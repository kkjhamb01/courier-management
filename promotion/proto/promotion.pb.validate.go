// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: promotion.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreatePromotionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreatePromotionRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *CreatePromotionRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := CreatePromotionRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreatePromotionRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartDate

	// no validation rules for ExpDate

	if _, ok := PromotionType_name[int32(m.GetType())]; !ok {
		err := CreatePromotionRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDiscountPercentage(); val < 0 || val > 100 {
		err := CreatePromotionRequestValidationError{
			field:  "DiscountPercentage",
			reason: "value must be inside range [0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DiscountValue

	if len(errors) > 0 {
		return CreatePromotionRequestMultiError(errors)
	}
	return nil
}

// CreatePromotionRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePromotionRequest.Validate(true) if the designated
// constraints aren't met.
type CreatePromotionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePromotionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePromotionRequestMultiError) AllErrors() []error { return m }

// CreatePromotionRequestValidationError is the validation error returned by
// CreatePromotionRequest.Validate if the designated constraints aren't met.
type CreatePromotionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePromotionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePromotionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePromotionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePromotionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePromotionRequestValidationError) ErrorName() string {
	return "CreatePromotionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePromotionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePromotionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePromotionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePromotionRequestValidationError{}

// Validate checks the field values on CreatePromotionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreatePromotionResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *CreatePromotionResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PromotionId

	if len(errors) > 0 {
		return CreatePromotionResponseMultiError(errors)
	}
	return nil
}

// CreatePromotionResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePromotionResponse.Validate(true) if the designated
// constraints aren't met.
type CreatePromotionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePromotionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePromotionResponseMultiError) AllErrors() []error { return m }

// CreatePromotionResponseValidationError is the validation error returned by
// CreatePromotionResponse.Validate if the designated constraints aren't met.
type CreatePromotionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePromotionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePromotionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePromotionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePromotionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePromotionResponseValidationError) ErrorName() string {
	return "CreatePromotionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePromotionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePromotionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePromotionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePromotionResponseValidationError{}

// Validate checks the field values on AssignPromotionToUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in AssignPromotionToUserRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *AssignPromotionToUserRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := AssignPromotionToUserRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPromotionId() <= 0 {
		err := AssignPromotionToUserRequestValidationError{
			field:  "PromotionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignPromotionToUserRequestMultiError(errors)
	}
	return nil
}

// AssignPromotionToUserRequestMultiError is an error wrapping multiple
// validation errors returned by AssignPromotionToUserRequest.Validate(true)
// if the designated constraints aren't met.
type AssignPromotionToUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignPromotionToUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignPromotionToUserRequestMultiError) AllErrors() []error { return m }

// AssignPromotionToUserRequestValidationError is the validation error returned
// by AssignPromotionToUserRequest.Validate if the designated constraints
// aren't met.
type AssignPromotionToUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignPromotionToUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignPromotionToUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignPromotionToUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignPromotionToUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignPromotionToUserRequestValidationError) ErrorName() string {
	return "AssignPromotionToUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignPromotionToUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignPromotionToUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignPromotionToUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignPromotionToUserRequestValidationError{}

// Validate checks the field values on AssignPromotionToUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in AssignPromotionToUserResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *AssignPromotionToUserResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AssignPromotionToUserResponseMultiError(errors)
	}
	return nil
}

// AssignPromotionToUserResponseMultiError is an error wrapping multiple
// validation errors returned by AssignPromotionToUserResponse.Validate(true)
// if the designated constraints aren't met.
type AssignPromotionToUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignPromotionToUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignPromotionToUserResponseMultiError) AllErrors() []error { return m }

// AssignPromotionToUserResponseValidationError is the validation error
// returned by AssignPromotionToUserResponse.Validate if the designated
// constraints aren't met.
type AssignPromotionToUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignPromotionToUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignPromotionToUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignPromotionToUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignPromotionToUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignPromotionToUserResponseValidationError) ErrorName() string {
	return "AssignPromotionToUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignPromotionToUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignPromotionToUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignPromotionToUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignPromotionToUserResponseValidationError{}

// Validate checks the field values on AssignUserReferralRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in AssignUserReferralRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *AssignUserReferralRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := AssignUserReferralRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReferral()) < 1 {
		err := AssignUserReferralRequestValidationError{
			field:  "Referral",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReferredId()) < 1 {
		err := AssignUserReferralRequestValidationError{
			field:  "ReferredId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignUserReferralRequestMultiError(errors)
	}
	return nil
}

// AssignUserReferralRequestMultiError is an error wrapping multiple validation
// errors returned by AssignUserReferralRequest.Validate(true) if the
// designated constraints aren't met.
type AssignUserReferralRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignUserReferralRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignUserReferralRequestMultiError) AllErrors() []error { return m }

// AssignUserReferralRequestValidationError is the validation error returned by
// AssignUserReferralRequest.Validate if the designated constraints aren't met.
type AssignUserReferralRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignUserReferralRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignUserReferralRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignUserReferralRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignUserReferralRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignUserReferralRequestValidationError) ErrorName() string {
	return "AssignUserReferralRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignUserReferralRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignUserReferralRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignUserReferralRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignUserReferralRequestValidationError{}

// Validate checks the field values on AssignUserReferralResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in AssignUserReferralResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *AssignUserReferralResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PromotionId

	if len(errors) > 0 {
		return AssignUserReferralResponseMultiError(errors)
	}
	return nil
}

// AssignUserReferralResponseMultiError is an error wrapping multiple
// validation errors returned by AssignUserReferralResponse.Validate(true) if
// the designated constraints aren't met.
type AssignUserReferralResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignUserReferralResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignUserReferralResponseMultiError) AllErrors() []error { return m }

// AssignUserReferralResponseValidationError is the validation error returned
// by AssignUserReferralResponse.Validate if the designated constraints aren't met.
type AssignUserReferralResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignUserReferralResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignUserReferralResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignUserReferralResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignUserReferralResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignUserReferralResponseValidationError) ErrorName() string {
	return "AssignUserReferralResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignUserReferralResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignUserReferralResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignUserReferralResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignUserReferralResponseValidationError{}

// Validate checks the field values on GetPromotionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetPromotionsRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetPromotionsRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := GetPromotionsRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetPromotionsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetPromotionsRequestMultiError(errors)
	}
	return nil
}

// GetPromotionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPromotionsRequest.Validate(true) if the designated
// constraints aren't met.
type GetPromotionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPromotionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPromotionsRequestMultiError) AllErrors() []error { return m }

// GetPromotionsRequestValidationError is the validation error returned by
// GetPromotionsRequest.Validate if the designated constraints aren't met.
type GetPromotionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPromotionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPromotionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPromotionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPromotionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPromotionsRequestValidationError) ErrorName() string {
	return "GetPromotionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPromotionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPromotionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPromotionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPromotionsRequestValidationError{}

// Validate checks the field values on GetPromotionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetPromotionsResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetPromotionsResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPromotions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetPromotionsResponseValidationError{
					field:  fmt.Sprintf("Promotions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetPromotionsResponseMultiError(errors)
	}
	return nil
}

// GetPromotionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPromotionsResponse.Validate(true) if the designated
// constraints aren't met.
type GetPromotionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPromotionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPromotionsResponseMultiError) AllErrors() []error { return m }

// GetPromotionsResponseValidationError is the validation error returned by
// GetPromotionsResponse.Validate if the designated constraints aren't met.
type GetPromotionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPromotionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPromotionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPromotionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPromotionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPromotionsResponseValidationError) ErrorName() string {
	return "GetPromotionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPromotionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPromotionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPromotionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPromotionsResponseValidationError{}

// Validate checks the field values on GetUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in GetUsersRequestMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *GetUsersRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := GetUsersRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch m.Filter.(type) {

	case *GetUsersRequest_PromotionId:
		// no validation rules for PromotionId

	case *GetUsersRequest_UserId:
		// no validation rules for UserId

	}

	if len(errors) > 0 {
		return GetUsersRequestMultiError(errors)
	}
	return nil
}

// GetUsersRequestMultiError is an error wrapping multiple validation errors
// returned by GetUsersRequest.Validate(true) if the designated constraints
// aren't met.
type GetUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersRequestMultiError) AllErrors() []error { return m }

// GetUsersRequestValidationError is the validation error returned by
// GetUsersRequest.Validate if the designated constraints aren't met.
type GetUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersRequestValidationError) ErrorName() string { return "GetUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersRequestValidationError{}

// Validate checks the field values on GetUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in GetUsersResponseMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *GetUsersResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersResponseMultiError(errors)
	}
	return nil
}

// GetUsersResponseMultiError is an error wrapping multiple validation errors
// returned by GetUsersResponse.Validate(true) if the designated constraints
// aren't met.
type GetUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersResponseMultiError) AllErrors() []error { return m }

// GetUsersResponseValidationError is the validation error returned by
// GetUsersResponse.Validate if the designated constraints aren't met.
type GetUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersResponseValidationError) ErrorName() string { return "GetUsersResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersResponseValidationError{}

// Validate checks the field values on ApplyPromotionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ApplyPromotionRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ApplyPromotionRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPromotionId() <= 0 {
		err := ApplyPromotionRequestValidationError{
			field:  "PromotionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ApplyPromotionRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTransactionId()) < 1 {
		err := ApplyPromotionRequestValidationError{
			field:  "TransactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalPayment() <= 0 {
		err := ApplyPromotionRequestValidationError{
			field:  "TotalPayment",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApplyPromotionRequestMultiError(errors)
	}
	return nil
}

// ApplyPromotionRequestMultiError is an error wrapping multiple validation
// errors returned by ApplyPromotionRequest.Validate(true) if the designated
// constraints aren't met.
type ApplyPromotionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyPromotionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyPromotionRequestMultiError) AllErrors() []error { return m }

// ApplyPromotionRequestValidationError is the validation error returned by
// ApplyPromotionRequest.Validate if the designated constraints aren't met.
type ApplyPromotionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyPromotionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyPromotionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyPromotionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyPromotionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyPromotionRequestValidationError) ErrorName() string {
	return "ApplyPromotionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyPromotionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyPromotionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyPromotionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyPromotionRequestValidationError{}

// Validate checks the field values on ApplyPromotionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ApplyPromotionResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ApplyPromotionResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountPercentage

	// no validation rules for DiscountValue

	if len(errors) > 0 {
		return ApplyPromotionResponseMultiError(errors)
	}
	return nil
}

// ApplyPromotionResponseMultiError is an error wrapping multiple validation
// errors returned by ApplyPromotionResponse.Validate(true) if the designated
// constraints aren't met.
type ApplyPromotionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyPromotionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyPromotionResponseMultiError) AllErrors() []error { return m }

// ApplyPromotionResponseValidationError is the validation error returned by
// ApplyPromotionResponse.Validate if the designated constraints aren't met.
type ApplyPromotionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyPromotionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyPromotionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyPromotionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyPromotionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyPromotionResponseValidationError) ErrorName() string {
	return "ApplyPromotionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyPromotionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyPromotionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyPromotionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyPromotionResponseValidationError{}

// Validate checks the field values on GetPromotionsOfUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetPromotionsOfUserRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetPromotionsOfUserRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := GetPromotionsOfUserRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PromotionUserStatus_name[int32(m.GetType())]; !ok {
		err := GetPromotionsOfUserRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPromotionsOfUserRequestMultiError(errors)
	}
	return nil
}

// GetPromotionsOfUserRequestMultiError is an error wrapping multiple
// validation errors returned by GetPromotionsOfUserRequest.Validate(true) if
// the designated constraints aren't met.
type GetPromotionsOfUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPromotionsOfUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPromotionsOfUserRequestMultiError) AllErrors() []error { return m }

// GetPromotionsOfUserRequestValidationError is the validation error returned
// by GetPromotionsOfUserRequest.Validate if the designated constraints aren't met.
type GetPromotionsOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPromotionsOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPromotionsOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPromotionsOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPromotionsOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPromotionsOfUserRequestValidationError) ErrorName() string {
	return "GetPromotionsOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPromotionsOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPromotionsOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPromotionsOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPromotionsOfUserRequestValidationError{}

// Validate checks the field values on GetPromotionsOfUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetPromotionsOfUserResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetPromotionsOfUserResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPromotions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetPromotionsOfUserResponseValidationError{
					field:  fmt.Sprintf("Promotions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetPromotionsOfUserResponseMultiError(errors)
	}
	return nil
}

// GetPromotionsOfUserResponseMultiError is an error wrapping multiple
// validation errors returned by GetPromotionsOfUserResponse.Validate(true) if
// the designated constraints aren't met.
type GetPromotionsOfUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPromotionsOfUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPromotionsOfUserResponseMultiError) AllErrors() []error { return m }

// GetPromotionsOfUserResponseValidationError is the validation error returned
// by GetPromotionsOfUserResponse.Validate if the designated constraints
// aren't met.
type GetPromotionsOfUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPromotionsOfUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPromotionsOfUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPromotionsOfUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPromotionsOfUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPromotionsOfUserResponseValidationError) ErrorName() string {
	return "GetPromotionsOfUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPromotionsOfUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPromotionsOfUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPromotionsOfUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPromotionsOfUserResponseValidationError{}

// Validate checks the field values on Promotion with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// PromotionMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *Promotion) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for StartDate

	// no validation rules for ExpDate

	// no validation rules for Type

	// no validation rules for DiscountPercentage

	// no validation rules for DiscountValue

	if len(errors) > 0 {
		return PromotionMultiError(errors)
	}
	return nil
}

// PromotionMultiError is an error wrapping multiple validation errors returned
// by Promotion.Validate(true) if the designated constraints aren't met.
type PromotionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromotionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromotionMultiError) AllErrors() []error { return m }

// PromotionValidationError is the validation error returned by
// Promotion.Validate if the designated constraints aren't met.
type PromotionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromotionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromotionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromotionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromotionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromotionValidationError) ErrorName() string { return "PromotionValidationError" }

// Error satisfies the builtin error interface
func (e PromotionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromotion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromotionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromotionValidationError{}

// Validate checks the field values on PromotionUser with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// PromotionUserMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *PromotionUser) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetPromotion()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = PromotionUserValidationError{
				field:  "Promotion",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	// no validation rules for UserId

	// no validation rules for Metadata

	// no validation rules for Status

	if v, ok := interface{}(m.GetTransaction()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = PromotionUserValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return PromotionUserMultiError(errors)
	}
	return nil
}

// PromotionUserMultiError is an error wrapping multiple validation errors
// returned by PromotionUser.Validate(true) if the designated constraints
// aren't met.
type PromotionUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromotionUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromotionUserMultiError) AllErrors() []error { return m }

// PromotionUserValidationError is the validation error returned by
// PromotionUser.Validate if the designated constraints aren't met.
type PromotionUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromotionUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromotionUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromotionUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromotionUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromotionUserValidationError) ErrorName() string { return "PromotionUserValidationError" }

// Error satisfies the builtin error interface
func (e PromotionUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromotionUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromotionUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromotionUserValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// TransactionMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *Transaction) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for Date

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}
	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.Validate(true) if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// PaginationMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *Pagination) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	// no validation rules for SortType

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}
	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.Validate(true) if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}
