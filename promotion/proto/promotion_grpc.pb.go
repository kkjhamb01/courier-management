// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PromotionAdminServiceClient is the client API for PromotionAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromotionAdminServiceClient interface {
	CreatePromotion(ctx context.Context, in *CreatePromotionRequest, opts ...grpc.CallOption) (*CreatePromotionResponse, error)
	AssignPromotionToUser(ctx context.Context, in *AssignPromotionToUserRequest, opts ...grpc.CallOption) (*AssignPromotionToUserResponse, error)
	GetPromotions(ctx context.Context, in *GetPromotionsRequest, opts ...grpc.CallOption) (*GetPromotionsResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
}

type promotionAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPromotionAdminServiceClient(cc grpc.ClientConnInterface) PromotionAdminServiceClient {
	return &promotionAdminServiceClient{cc}
}

func (c *promotionAdminServiceClient) CreatePromotion(ctx context.Context, in *CreatePromotionRequest, opts ...grpc.CallOption) (*CreatePromotionResponse, error) {
	out := new(CreatePromotionResponse)
	err := c.cc.Invoke(ctx, "/promotion.PromotionAdminService/CreatePromotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionAdminServiceClient) AssignPromotionToUser(ctx context.Context, in *AssignPromotionToUserRequest, opts ...grpc.CallOption) (*AssignPromotionToUserResponse, error) {
	out := new(AssignPromotionToUserResponse)
	err := c.cc.Invoke(ctx, "/promotion.PromotionAdminService/AssignPromotionToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionAdminServiceClient) GetPromotions(ctx context.Context, in *GetPromotionsRequest, opts ...grpc.CallOption) (*GetPromotionsResponse, error) {
	out := new(GetPromotionsResponse)
	err := c.cc.Invoke(ctx, "/promotion.PromotionAdminService/GetPromotions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionAdminServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/promotion.PromotionAdminService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromotionAdminServiceServer is the server API for PromotionAdminService service.
// All implementations must embed UnimplementedPromotionAdminServiceServer
// for forward compatibility
type PromotionAdminServiceServer interface {
	CreatePromotion(context.Context, *CreatePromotionRequest) (*CreatePromotionResponse, error)
	AssignPromotionToUser(context.Context, *AssignPromotionToUserRequest) (*AssignPromotionToUserResponse, error)
	GetPromotions(context.Context, *GetPromotionsRequest) (*GetPromotionsResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	mustEmbedUnimplementedPromotionAdminServiceServer()
}

// UnimplementedPromotionAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPromotionAdminServiceServer struct {
}

func (UnimplementedPromotionAdminServiceServer) CreatePromotion(context.Context, *CreatePromotionRequest) (*CreatePromotionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePromotion not implemented")
}
func (UnimplementedPromotionAdminServiceServer) AssignPromotionToUser(context.Context, *AssignPromotionToUserRequest) (*AssignPromotionToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPromotionToUser not implemented")
}
func (UnimplementedPromotionAdminServiceServer) GetPromotions(context.Context, *GetPromotionsRequest) (*GetPromotionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotions not implemented")
}
func (UnimplementedPromotionAdminServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedPromotionAdminServiceServer) mustEmbedUnimplementedPromotionAdminServiceServer() {}

// UnsafePromotionAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromotionAdminServiceServer will
// result in compilation errors.
type UnsafePromotionAdminServiceServer interface {
	mustEmbedUnimplementedPromotionAdminServiceServer()
}

func RegisterPromotionAdminServiceServer(s grpc.ServiceRegistrar, srv PromotionAdminServiceServer) {
	s.RegisterService(&PromotionAdminService_ServiceDesc, srv)
}

func _PromotionAdminService_CreatePromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePromotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionAdminServiceServer).CreatePromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promotion.PromotionAdminService/CreatePromotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionAdminServiceServer).CreatePromotion(ctx, req.(*CreatePromotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromotionAdminService_AssignPromotionToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPromotionToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionAdminServiceServer).AssignPromotionToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promotion.PromotionAdminService/AssignPromotionToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionAdminServiceServer).AssignPromotionToUser(ctx, req.(*AssignPromotionToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromotionAdminService_GetPromotions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromotionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionAdminServiceServer).GetPromotions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promotion.PromotionAdminService/GetPromotions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionAdminServiceServer).GetPromotions(ctx, req.(*GetPromotionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromotionAdminService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionAdminServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promotion.PromotionAdminService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionAdminServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PromotionAdminService_ServiceDesc is the grpc.ServiceDesc for PromotionAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromotionAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "promotion.PromotionAdminService",
	HandlerType: (*PromotionAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePromotion",
			Handler:    _PromotionAdminService_CreatePromotion_Handler,
		},
		{
			MethodName: "AssignPromotionToUser",
			Handler:    _PromotionAdminService_AssignPromotionToUser_Handler,
		},
		{
			MethodName: "GetPromotions",
			Handler:    _PromotionAdminService_GetPromotions_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _PromotionAdminService_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "promotion.proto",
}

// PromotionServiceClient is the client API for PromotionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromotionServiceClient interface {
	AssignUserReferral(ctx context.Context, in *AssignUserReferralRequest, opts ...grpc.CallOption) (*AssignUserReferralResponse, error)
	ApplyPromotion(ctx context.Context, in *ApplyPromotionRequest, opts ...grpc.CallOption) (*ApplyPromotionResponse, error)
}

type promotionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPromotionServiceClient(cc grpc.ClientConnInterface) PromotionServiceClient {
	return &promotionServiceClient{cc}
}

func (c *promotionServiceClient) AssignUserReferral(ctx context.Context, in *AssignUserReferralRequest, opts ...grpc.CallOption) (*AssignUserReferralResponse, error) {
	out := new(AssignUserReferralResponse)
	err := c.cc.Invoke(ctx, "/promotion.PromotionService/AssignUserReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionServiceClient) ApplyPromotion(ctx context.Context, in *ApplyPromotionRequest, opts ...grpc.CallOption) (*ApplyPromotionResponse, error) {
	out := new(ApplyPromotionResponse)
	err := c.cc.Invoke(ctx, "/promotion.PromotionService/ApplyPromotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromotionServiceServer is the server API for PromotionService service.
// All implementations must embed UnimplementedPromotionServiceServer
// for forward compatibility
type PromotionServiceServer interface {
	AssignUserReferral(context.Context, *AssignUserReferralRequest) (*AssignUserReferralResponse, error)
	ApplyPromotion(context.Context, *ApplyPromotionRequest) (*ApplyPromotionResponse, error)
	mustEmbedUnimplementedPromotionServiceServer()
}

// UnimplementedPromotionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPromotionServiceServer struct {
}

func (UnimplementedPromotionServiceServer) AssignUserReferral(context.Context, *AssignUserReferralRequest) (*AssignUserReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserReferral not implemented")
}
func (UnimplementedPromotionServiceServer) ApplyPromotion(context.Context, *ApplyPromotionRequest) (*ApplyPromotionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyPromotion not implemented")
}
func (UnimplementedPromotionServiceServer) mustEmbedUnimplementedPromotionServiceServer() {}

// UnsafePromotionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromotionServiceServer will
// result in compilation errors.
type UnsafePromotionServiceServer interface {
	mustEmbedUnimplementedPromotionServiceServer()
}

func RegisterPromotionServiceServer(s grpc.ServiceRegistrar, srv PromotionServiceServer) {
	s.RegisterService(&PromotionService_ServiceDesc, srv)
}

func _PromotionService_AssignUserReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServiceServer).AssignUserReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promotion.PromotionService/AssignUserReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServiceServer).AssignUserReferral(ctx, req.(*AssignUserReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromotionService_ApplyPromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPromotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServiceServer).ApplyPromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promotion.PromotionService/ApplyPromotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServiceServer).ApplyPromotion(ctx, req.(*ApplyPromotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PromotionService_ServiceDesc is the grpc.ServiceDesc for PromotionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromotionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "promotion.PromotionService",
	HandlerType: (*PromotionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignUserReferral",
			Handler:    _PromotionService_AssignUserReferral_Handler,
		},
		{
			MethodName: "ApplyPromotion",
			Handler:    _PromotionService_ApplyPromotion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "promotion.proto",
}

// PromotionUserServiceClient is the client API for PromotionUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromotionUserServiceClient interface {
	GetPromotionsOfUser(ctx context.Context, in *GetPromotionsOfUserRequest, opts ...grpc.CallOption) (*GetPromotionsOfUserResponse, error)
}

type promotionUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPromotionUserServiceClient(cc grpc.ClientConnInterface) PromotionUserServiceClient {
	return &promotionUserServiceClient{cc}
}

func (c *promotionUserServiceClient) GetPromotionsOfUser(ctx context.Context, in *GetPromotionsOfUserRequest, opts ...grpc.CallOption) (*GetPromotionsOfUserResponse, error) {
	out := new(GetPromotionsOfUserResponse)
	err := c.cc.Invoke(ctx, "/promotion.PromotionUserService/GetPromotionsOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromotionUserServiceServer is the server API for PromotionUserService service.
// All implementations must embed UnimplementedPromotionUserServiceServer
// for forward compatibility
type PromotionUserServiceServer interface {
	GetPromotionsOfUser(context.Context, *GetPromotionsOfUserRequest) (*GetPromotionsOfUserResponse, error)
	mustEmbedUnimplementedPromotionUserServiceServer()
}

// UnimplementedPromotionUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPromotionUserServiceServer struct {
}

func (UnimplementedPromotionUserServiceServer) GetPromotionsOfUser(context.Context, *GetPromotionsOfUserRequest) (*GetPromotionsOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotionsOfUser not implemented")
}
func (UnimplementedPromotionUserServiceServer) mustEmbedUnimplementedPromotionUserServiceServer() {}

// UnsafePromotionUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromotionUserServiceServer will
// result in compilation errors.
type UnsafePromotionUserServiceServer interface {
	mustEmbedUnimplementedPromotionUserServiceServer()
}

func RegisterPromotionUserServiceServer(s grpc.ServiceRegistrar, srv PromotionUserServiceServer) {
	s.RegisterService(&PromotionUserService_ServiceDesc, srv)
}

func _PromotionUserService_GetPromotionsOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromotionsOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionUserServiceServer).GetPromotionsOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promotion.PromotionUserService/GetPromotionsOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionUserServiceServer).GetPromotionsOfUser(ctx, req.(*GetPromotionsOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PromotionUserService_ServiceDesc is the grpc.ServiceDesc for PromotionUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromotionUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "promotion.PromotionUserService",
	HandlerType: (*PromotionUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPromotionsOfUser",
			Handler:    _PromotionUserService_GetPromotionsOfUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "promotion.proto",
}
