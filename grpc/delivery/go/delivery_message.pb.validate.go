// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: delivery_message.proto

package deliveryPb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	commonPb "gitlab.artin.ai/backend/courier-management/grpc/common/go"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = commonPb.VehicleType(0)
)

// define the regex for a UUID once up-front
var _delivery_message_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AddSavedLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddSavedLocationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FullName

	if wrapper := m.GetPhoneNumber(); wrapper != nil {

		if wrapper.GetValue() != "" {

			if !_AddSavedLocationRequest_PhoneNumber_Pattern.MatchString(wrapper.GetValue()) {
				return AddSavedLocationRequestValidationError{
					field:  "PhoneNumber",
					reason: "value does not match regex pattern \"^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\\\s\\\\./0-9]*$\"",
				}
			}

		}

	}

	if wrapper := m.GetAddressDetails(); wrapper != nil {

		if wrapper.GetValue() != "" {

		}

	}

	if val := m.GetLat(); val < -90 || val > 90 {
		return AddSavedLocationRequestValidationError{
			field:  "Lat",
			reason: "value must be inside range [-90, 90]",
		}
	}

	if val := m.GetLon(); val < -180 || val > 180 {
		return AddSavedLocationRequestValidationError{
			field:  "Lon",
			reason: "value must be inside range [-180, 180]",
		}
	}

	if v, ok := interface{}(m.GetCourierInstructions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSavedLocationRequestValidationError{
				field:  "CourierInstructions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddSavedLocationRequestValidationError is the validation error returned by
// AddSavedLocationRequest.Validate if the designated constraints aren't met.
type AddSavedLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSavedLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSavedLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSavedLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSavedLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSavedLocationRequestValidationError) ErrorName() string {
	return "AddSavedLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSavedLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSavedLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSavedLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSavedLocationRequestValidationError{}

var _AddSavedLocationRequest_PhoneNumber_Pattern = regexp.MustCompile("^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$")

// Validate checks the field values on AddSavedLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddSavedLocationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// AddSavedLocationResponseValidationError is the validation error returned by
// AddSavedLocationResponse.Validate if the designated constraints aren't met.
type AddSavedLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSavedLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSavedLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSavedLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSavedLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSavedLocationResponseValidationError) ErrorName() string {
	return "AddSavedLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSavedLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSavedLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSavedLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSavedLocationResponseValidationError{}

// Validate checks the field values on ListSavedLocationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSavedLocationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSavedLocations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSavedLocationsResponseValidationError{
					field:  fmt.Sprintf("SavedLocations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSavedLocationsResponseValidationError is the validation error returned
// by ListSavedLocationsResponse.Validate if the designated constraints aren't met.
type ListSavedLocationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSavedLocationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSavedLocationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSavedLocationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSavedLocationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSavedLocationsResponseValidationError) ErrorName() string {
	return "ListSavedLocationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSavedLocationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSavedLocationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSavedLocationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSavedLocationsResponseValidationError{}

// Validate checks the field values on UpdateSavedLocationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSavedLocationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return UpdateSavedLocationRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if wrapper := m.GetName(); wrapper != nil {

		if wrapper.GetValue() != "" {

		}

	}

	if wrapper := m.GetFullName(); wrapper != nil {

		if wrapper.GetValue() != "" {

		}

	}

	if wrapper := m.GetPhoneNumber(); wrapper != nil {

		if !_UpdateSavedLocationRequest_PhoneNumber_Pattern.MatchString(wrapper.GetValue()) {
			return UpdateSavedLocationRequestValidationError{
				field:  "PhoneNumber",
				reason: "value does not match regex pattern \"^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\\\s\\\\./0-9]*$\"",
			}
		}

	}

	if v, ok := interface{}(m.GetAddressDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSavedLocationRequestValidationError{
				field:  "AddressDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetLat(); wrapper != nil {

		if val := wrapper.GetValue(); val < -90 || val > 90 {
			return UpdateSavedLocationRequestValidationError{
				field:  "Lat",
				reason: "value must be inside range [-90, 90]",
			}
		}

	}

	if wrapper := m.GetLon(); wrapper != nil {

		if val := wrapper.GetValue(); val < -180 || val > 180 {
			return UpdateSavedLocationRequestValidationError{
				field:  "Lon",
				reason: "value must be inside range [-180, 180]",
			}
		}

	}

	if wrapper := m.GetCourierInstructions(); wrapper != nil {

		if wrapper.GetValue() != "" {

		}

	}

	return nil
}

func (m *UpdateSavedLocationRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateSavedLocationRequestValidationError is the validation error returned
// by UpdateSavedLocationRequest.Validate if the designated constraints aren't met.
type UpdateSavedLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSavedLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSavedLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSavedLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSavedLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSavedLocationRequestValidationError) ErrorName() string {
	return "UpdateSavedLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSavedLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSavedLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSavedLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSavedLocationRequestValidationError{}

var _UpdateSavedLocationRequest_PhoneNumber_Pattern = regexp.MustCompile("^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$")

// Validate checks the field values on RemoveSavedLocationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSavedLocationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetSavedLocationId()); err != nil {
		return RemoveSavedLocationRequestValidationError{
			field:  "SavedLocationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *RemoveSavedLocationRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveSavedLocationRequestValidationError is the validation error returned
// by RemoveSavedLocationRequest.Validate if the designated constraints aren't met.
type RemoveSavedLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSavedLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSavedLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSavedLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSavedLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSavedLocationRequestValidationError) ErrorName() string {
	return "RemoveSavedLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSavedLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSavedLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSavedLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSavedLocationRequestValidationError{}

// Validate checks the field values on RemoveAllSavedLocationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveAllSavedLocationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveAllSavedLocationsRequestValidationError is the validation error
// returned by RemoveAllSavedLocationsRequest.Validate if the designated
// constraints aren't met.
type RemoveAllSavedLocationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAllSavedLocationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAllSavedLocationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAllSavedLocationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAllSavedLocationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAllSavedLocationsRequestValidationError) ErrorName() string {
	return "RemoveAllSavedLocationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAllSavedLocationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAllSavedLocationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAllSavedLocationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAllSavedLocationsRequestValidationError{}

// Validate checks the field values on RemoveAllSavedLocationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveAllSavedLocationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveAllSavedLocationsResponseValidationError is the validation error
// returned by RemoveAllSavedLocationsResponse.Validate if the designated
// constraints aren't met.
type RemoveAllSavedLocationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAllSavedLocationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAllSavedLocationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAllSavedLocationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAllSavedLocationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAllSavedLocationsResponseValidationError) ErrorName() string {
	return "RemoveAllSavedLocationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAllSavedLocationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAllSavedLocationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAllSavedLocationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAllSavedLocationsResponseValidationError{}

// Validate checks the field values on CreateRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRequestRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VehicleType

	if m.GetOrigin() == nil {
		return CreateRequestRequestValidationError{
			field:  "Origin",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOrigin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestRequestValidationError{
				field:  "Origin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetDestinations()); l < 1 || l > 5 {
		return CreateRequestRequestValidationError{
			field:  "Destinations",
			reason: "value must contain between 1 and 5 items, inclusive",
		}
	}

	for idx, item := range m.GetDestinations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRequestRequestValidationError{
					field:  fmt.Sprintf("Destinations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestRequestValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetRequiredWorkers(); wrapper != nil {

		if wrapper.GetValue() < 0 {
			return CreateRequestRequestValidationError{
				field:  "RequiredWorkers",
				reason: "value must be greater than or equal to 0",
			}
		}

	}

	return nil
}

// CreateRequestRequestValidationError is the validation error returned by
// CreateRequestRequest.Validate if the designated constraints aren't met.
type CreateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestRequestValidationError) ErrorName() string {
	return "CreateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestRequestValidationError{}

// Validate checks the field values on CreateRequestLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRequestLocation) Validate() error {
	if m == nil {
		return nil
	}

	if wrapper := m.GetFullName(); wrapper != nil {

		if wrapper.GetValue() != "" {

		}

	}

	if wrapper := m.GetPhoneNumber(); wrapper != nil {

		if wrapper.GetValue() != "" {

		}

	}

	if v, ok := interface{}(m.GetAddressDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestLocationValidationError{
				field:  "AddressDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetLat(); val < -90 || val > 90 {
		return CreateRequestLocationValidationError{
			field:  "Lat",
			reason: "value must be inside range [-90, 90]",
		}
	}

	if val := m.GetLon(); val < -180 || val > 180 {
		return CreateRequestLocationValidationError{
			field:  "Lon",
			reason: "value must be inside range [-180, 180]",
		}
	}

	if v, ok := interface{}(m.GetCourierInstructions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestLocationValidationError{
				field:  "CourierInstructions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateRequestLocationValidationError is the validation error returned by
// CreateRequestLocation.Validate if the designated constraints aren't met.
type CreateRequestLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestLocationValidationError) ErrorName() string {
	return "CreateRequestLocationValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRequestLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestLocationValidationError{}

// Validate checks the field values on CreateRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRequestResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCreatedRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestResponseValidationError{
				field:  "CreatedRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateRequestResponseValidationError is the validation error returned by
// CreateRequestResponse.Validate if the designated constraints aren't met.
type CreateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestResponseValidationError) ErrorName() string {
	return "CreateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestResponseValidationError{}

// Validate checks the field values on AcceptRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcceptRequestRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return AcceptRequestRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptRequestRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *AcceptRequestRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AcceptRequestRequestValidationError is the validation error returned by
// AcceptRequestRequest.Validate if the designated constraints aren't met.
type AcceptRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptRequestRequestValidationError) ErrorName() string {
	return "AcceptRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptRequestRequestValidationError{}

// Validate checks the field values on RejectRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectRequestRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RejectRequestRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RejectRequestRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *RejectRequestRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RejectRequestRequestValidationError is the validation error returned by
// RejectRequestRequest.Validate if the designated constraints aren't met.
type RejectRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectRequestRequestValidationError) ErrorName() string {
	return "RejectRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectRequestRequestValidationError{}

// Validate checks the field values on CancelRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelRequestRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return CancelRequestRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for CancelReason

	// no validation rules for CancelledBy

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelRequestRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *CancelRequestRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelRequestRequestValidationError is the validation error returned by
// CancelRequestRequest.Validate if the designated constraints aren't met.
type CancelRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelRequestRequestValidationError) ErrorName() string {
	return "CancelRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelRequestRequestValidationError{}

// Validate checks the field values on RequestArrivedOriginRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestArrivedOriginRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RequestArrivedOriginRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestArrivedOriginRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *RequestArrivedOriginRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestArrivedOriginRequestValidationError is the validation error returned
// by RequestArrivedOriginRequest.Validate if the designated constraints
// aren't met.
type RequestArrivedOriginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestArrivedOriginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestArrivedOriginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestArrivedOriginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestArrivedOriginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestArrivedOriginRequestValidationError) ErrorName() string {
	return "RequestArrivedOriginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestArrivedOriginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestArrivedOriginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestArrivedOriginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestArrivedOriginRequestValidationError{}

// Validate checks the field values on RequestArrivedDestinationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RequestArrivedDestinationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RequestArrivedDestinationRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for DestinationOrder

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestArrivedDestinationRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *RequestArrivedDestinationRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestArrivedDestinationRequestValidationError is the validation error
// returned by RequestArrivedDestinationRequest.Validate if the designated
// constraints aren't met.
type RequestArrivedDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestArrivedDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestArrivedDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestArrivedDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestArrivedDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestArrivedDestinationRequestValidationError) ErrorName() string {
	return "RequestArrivedDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestArrivedDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestArrivedDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestArrivedDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestArrivedDestinationRequestValidationError{}

// Validate checks the field values on RequestPickedUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestPickedUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RequestPickedUpRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Name

	// no validation rules for Signature

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestPickedUpRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *RequestPickedUpRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestPickedUpRequestValidationError is the validation error returned by
// RequestPickedUpRequest.Validate if the designated constraints aren't met.
type RequestPickedUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestPickedUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestPickedUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestPickedUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestPickedUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestPickedUpRequestValidationError) ErrorName() string {
	return "RequestPickedUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestPickedUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestPickedUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestPickedUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestPickedUpRequestValidationError{}

// Validate checks the field values on RequestDeliveredRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestDeliveredRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RequestDeliveredRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for DestinationOrder

	// no validation rules for Name

	// no validation rules for Signature

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestDeliveredRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *RequestDeliveredRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestDeliveredRequestValidationError is the validation error returned by
// RequestDeliveredRequest.Validate if the designated constraints aren't met.
type RequestDeliveredRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestDeliveredRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestDeliveredRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestDeliveredRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestDeliveredRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestDeliveredRequestValidationError) ErrorName() string {
	return "RequestDeliveredRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestDeliveredRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestDeliveredRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestDeliveredRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestDeliveredRequestValidationError{}

// Validate checks the field values on RequestSenderNotAvailableRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RequestSenderNotAvailableRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RequestSenderNotAvailableRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestSenderNotAvailableRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *RequestSenderNotAvailableRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestSenderNotAvailableRequestValidationError is the validation error
// returned by RequestSenderNotAvailableRequest.Validate if the designated
// constraints aren't met.
type RequestSenderNotAvailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestSenderNotAvailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestSenderNotAvailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestSenderNotAvailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestSenderNotAvailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestSenderNotAvailableRequestValidationError) ErrorName() string {
	return "RequestSenderNotAvailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestSenderNotAvailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestSenderNotAvailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestSenderNotAvailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestSenderNotAvailableRequestValidationError{}

// Validate checks the field values on RequestNavigatingToSenderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RequestNavigatingToSenderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RequestNavigatingToSenderRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *RequestNavigatingToSenderRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestNavigatingToSenderRequestValidationError is the validation error
// returned by RequestNavigatingToSenderRequest.Validate if the designated
// constraints aren't met.
type RequestNavigatingToSenderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestNavigatingToSenderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestNavigatingToSenderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestNavigatingToSenderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestNavigatingToSenderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestNavigatingToSenderRequestValidationError) ErrorName() string {
	return "RequestNavigatingToSenderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestNavigatingToSenderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestNavigatingToSenderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestNavigatingToSenderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestNavigatingToSenderRequestValidationError{}

// Validate checks the field values on RequestNavigatingToReceiverRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RequestNavigatingToReceiverRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RequestNavigatingToReceiverRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for TargetDestinationOrder

	return nil
}

func (m *RequestNavigatingToReceiverRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestNavigatingToReceiverRequestValidationError is the validation error
// returned by RequestNavigatingToReceiverRequest.Validate if the designated
// constraints aren't met.
type RequestNavigatingToReceiverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestNavigatingToReceiverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestNavigatingToReceiverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestNavigatingToReceiverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestNavigatingToReceiverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestNavigatingToReceiverRequestValidationError) ErrorName() string {
	return "RequestNavigatingToReceiverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestNavigatingToReceiverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestNavigatingToReceiverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestNavigatingToReceiverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestNavigatingToReceiverRequestValidationError{}

// Validate checks the field values on RequestReceiverNotAvailableRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RequestReceiverNotAvailableRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RequestReceiverNotAvailableRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for DestinationOrder

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestReceiverNotAvailableRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *RequestReceiverNotAvailableRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestReceiverNotAvailableRequestValidationError is the validation error
// returned by RequestReceiverNotAvailableRequest.Validate if the designated
// constraints aren't met.
type RequestReceiverNotAvailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestReceiverNotAvailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestReceiverNotAvailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestReceiverNotAvailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestReceiverNotAvailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestReceiverNotAvailableRequestValidationError) ErrorName() string {
	return "RequestReceiverNotAvailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestReceiverNotAvailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestReceiverNotAvailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestReceiverNotAvailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestReceiverNotAvailableRequestValidationError{}

// Validate checks the field values on RequestCompletedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestCompletedRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RequestCompletedRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestCompletedRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *RequestCompletedRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestCompletedRequestValidationError is the validation error returned by
// RequestCompletedRequest.Validate if the designated constraints aren't met.
type RequestCompletedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCompletedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestCompletedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestCompletedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestCompletedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestCompletedRequestValidationError) ErrorName() string {
	return "RequestCompletedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCompletedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCompletedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCompletedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCompletedRequestValidationError{}

// Validate checks the field values on GetRequestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRequestsRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Filter.(type) {

	case *GetRequestsRequest_Id:

		if err := m._validateUuid(m.GetId()); err != nil {
			return GetRequestsRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
		}

	case *GetRequestsRequest_Origin:

		if v, ok := interface{}(m.GetOrigin()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRequestsRequestValidationError{
					field:  "Origin",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetRequestsRequest_Destination:

		if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRequestsRequestValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetRequestsRequest_TimeRange:

		if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRequestsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetRequestsRequest_Price:

		if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRequestsRequestValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetRequestsRequest_CustomerId:

		if err := m._validateUuid(m.GetCustomerId()); err != nil {
			return GetRequestsRequestValidationError{
				field:  "CustomerId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
		}

	case *GetRequestsRequest_CourierId:

		if err := m._validateUuid(m.GetCourierId()); err != nil {
			return GetRequestsRequestValidationError{
				field:  "CourierId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
		}

	}

	return nil
}

func (m *GetRequestsRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetRequestsRequestValidationError is the validation error returned by
// GetRequestsRequest.Validate if the designated constraints aren't met.
type GetRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestsRequestValidationError) ErrorName() string {
	return "GetRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestsRequestValidationError{}

// Validate checks the field values on GetRequestsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRequestsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRequestsResponseValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetRequestsResponseValidationError is the validation error returned by
// GetRequestsResponse.Validate if the designated constraints aren't met.
type GetRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestsResponseValidationError) ErrorName() string {
	return "GetRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestsResponseValidationError{}

// Validate checks the field values on GetCourierCompletedRequestsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCourierCompletedRequestsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourierCompletedRequestsRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourierCompletedRequestsRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCourierCompletedRequestsRequestValidationError is the validation error
// returned by GetCourierCompletedRequestsRequest.Validate if the designated
// constraints aren't met.
type GetCourierCompletedRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierCompletedRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierCompletedRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierCompletedRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierCompletedRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierCompletedRequestsRequestValidationError) ErrorName() string {
	return "GetCourierCompletedRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierCompletedRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierCompletedRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierCompletedRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierCompletedRequestsRequestValidationError{}

// Validate checks the field values on GetCourierCompletedRequestsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCourierCompletedRequestsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompletedRequests

	return nil
}

// GetCourierCompletedRequestsResponseValidationError is the validation error
// returned by GetCourierCompletedRequestsResponse.Validate if the designated
// constraints aren't met.
type GetCourierCompletedRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierCompletedRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierCompletedRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierCompletedRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierCompletedRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierCompletedRequestsResponseValidationError) ErrorName() string {
	return "GetCourierCompletedRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierCompletedRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierCompletedRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierCompletedRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierCompletedRequestsResponseValidationError{}

// Validate checks the field values on GetCourierRequestsDurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCourierRequestsDurationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourierRequestsDurationRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourierRequestsDurationRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCourierRequestsDurationRequestValidationError is the validation error
// returned by GetCourierRequestsDurationRequest.Validate if the designated
// constraints aren't met.
type GetCourierRequestsDurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRequestsDurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRequestsDurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRequestsDurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRequestsDurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRequestsDurationRequestValidationError) ErrorName() string {
	return "GetCourierRequestsDurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRequestsDurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRequestsDurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRequestsDurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRequestsDurationRequestValidationError{}

// Validate checks the field values on GetCourierRequestsDurationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCourierRequestsDurationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourierRequestsDurationResponseValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCourierRequestsDurationResponseValidationError is the validation error
// returned by GetCourierRequestsDurationResponse.Validate if the designated
// constraints aren't met.
type GetCourierRequestsDurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRequestsDurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRequestsDurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRequestsDurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRequestsDurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRequestsDurationResponseValidationError) ErrorName() string {
	return "GetCourierRequestsDurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRequestsDurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRequestsDurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRequestsDurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRequestsDurationResponseValidationError{}

// Validate checks the field values on GetCourierRequestsMileageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCourierRequestsMileageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourierRequestsMileageRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourierRequestsMileageRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCourierRequestsMileageRequestValidationError is the validation error
// returned by GetCourierRequestsMileageRequest.Validate if the designated
// constraints aren't met.
type GetCourierRequestsMileageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRequestsMileageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRequestsMileageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRequestsMileageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRequestsMileageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRequestsMileageRequestValidationError) ErrorName() string {
	return "GetCourierRequestsMileageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRequestsMileageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRequestsMileageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRequestsMileageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRequestsMileageRequestValidationError{}

// Validate checks the field values on GetCourierRequestsMileageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCourierRequestsMileageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Mileage

	return nil
}

// GetCourierRequestsMileageResponseValidationError is the validation error
// returned by GetCourierRequestsMileageResponse.Validate if the designated
// constraints aren't met.
type GetCourierRequestsMileageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRequestsMileageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRequestsMileageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRequestsMileageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRequestsMileageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRequestsMileageResponseValidationError) ErrorName() string {
	return "GetCourierRequestsMileageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRequestsMileageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRequestsMileageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRequestsMileageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRequestsMileageResponseValidationError{}

// Validate checks the field values on GetCourierRequestsHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCourierRequestsHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPageNumber() < 1 {
		return GetCourierRequestsHistoryRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetPageSize() < 1 {
		return GetCourierRequestsHistoryRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// GetCourierRequestsHistoryRequestValidationError is the validation error
// returned by GetCourierRequestsHistoryRequest.Validate if the designated
// constraints aren't met.
type GetCourierRequestsHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRequestsHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRequestsHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRequestsHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRequestsHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRequestsHistoryRequestValidationError) ErrorName() string {
	return "GetCourierRequestsHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRequestsHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRequestsHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRequestsHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRequestsHistoryRequestValidationError{}

// Validate checks the field values on GetCourierRequestsHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCourierRequestsHistoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCourierRequestsHistoryResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCourierRequestsHistoryResponseValidationError is the validation error
// returned by GetCourierRequestsHistoryResponse.Validate if the designated
// constraints aren't met.
type GetCourierRequestsHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRequestsHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRequestsHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRequestsHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRequestsHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRequestsHistoryResponseValidationError) ErrorName() string {
	return "GetCourierRequestsHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRequestsHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRequestsHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRequestsHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRequestsHistoryResponseValidationError{}

// Validate checks the field values on GetRequestHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRequestHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return GetRequestHistoryRequestValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *GetRequestHistoryRequest) _validateUuid(uuid string) error {
	if matched := _delivery_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetRequestHistoryRequestValidationError is the validation error returned by
// GetRequestHistoryRequest.Validate if the designated constraints aren't met.
type GetRequestHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestHistoryRequestValidationError) ErrorName() string {
	return "GetRequestHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestHistoryRequestValidationError{}

// Validate checks the field values on GetRequestHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRequestHistoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRequestHistoryResponseValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetRequestHistoryResponseValidationError is the validation error returned by
// GetRequestHistoryResponse.Validate if the designated constraints aren't met.
type GetRequestHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestHistoryResponseValidationError) ErrorName() string {
	return "GetRequestHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestHistoryResponseValidationError{}

// Validate checks the field values on GetCourierRequestDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCourierRequestDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	return nil
}

// GetCourierRequestDetailsRequestValidationError is the validation error
// returned by GetCourierRequestDetailsRequest.Validate if the designated
// constraints aren't met.
type GetCourierRequestDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRequestDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRequestDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRequestDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRequestDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRequestDetailsRequestValidationError) ErrorName() string {
	return "GetCourierRequestDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRequestDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRequestDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRequestDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRequestDetailsRequestValidationError{}

// Validate checks the field values on GetCourierRequestDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCourierRequestDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourierRequestDetailsResponseValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCourierRequestDetailsResponseValidationError is the validation error
// returned by GetCourierRequestDetailsResponse.Validate if the designated
// constraints aren't met.
type GetCourierRequestDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRequestDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRequestDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRequestDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRequestDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRequestDetailsResponseValidationError) ErrorName() string {
	return "GetCourierRequestDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRequestDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRequestDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRequestDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRequestDetailsResponseValidationError{}

// Validate checks the field values on GetCustomerCompletedRequestsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerCompletedRequestsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerCompletedRequestsRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerCompletedRequestsRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomerCompletedRequestsRequestValidationError is the validation error
// returned by GetCustomerCompletedRequestsRequest.Validate if the designated
// constraints aren't met.
type GetCustomerCompletedRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerCompletedRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerCompletedRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerCompletedRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerCompletedRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerCompletedRequestsRequestValidationError) ErrorName() string {
	return "GetCustomerCompletedRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerCompletedRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerCompletedRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerCompletedRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerCompletedRequestsRequestValidationError{}

// Validate checks the field values on GetCustomerCompletedRequestsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomerCompletedRequestsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompletedRequests

	return nil
}

// GetCustomerCompletedRequestsResponseValidationError is the validation error
// returned by GetCustomerCompletedRequestsResponse.Validate if the designated
// constraints aren't met.
type GetCustomerCompletedRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerCompletedRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerCompletedRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerCompletedRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerCompletedRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerCompletedRequestsResponseValidationError) ErrorName() string {
	return "GetCustomerCompletedRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerCompletedRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerCompletedRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerCompletedRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerCompletedRequestsResponseValidationError{}

// Validate checks the field values on GetCustomerRequestsDurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerRequestsDurationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerRequestsDurationRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerRequestsDurationRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomerRequestsDurationRequestValidationError is the validation error
// returned by GetCustomerRequestsDurationRequest.Validate if the designated
// constraints aren't met.
type GetCustomerRequestsDurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerRequestsDurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerRequestsDurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerRequestsDurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerRequestsDurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerRequestsDurationRequestValidationError) ErrorName() string {
	return "GetCustomerRequestsDurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerRequestsDurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerRequestsDurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerRequestsDurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerRequestsDurationRequestValidationError{}

// Validate checks the field values on GetCustomerRequestsDurationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerRequestsDurationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerRequestsDurationResponseValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomerRequestsDurationResponseValidationError is the validation error
// returned by GetCustomerRequestsDurationResponse.Validate if the designated
// constraints aren't met.
type GetCustomerRequestsDurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerRequestsDurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerRequestsDurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerRequestsDurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerRequestsDurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerRequestsDurationResponseValidationError) ErrorName() string {
	return "GetCustomerRequestsDurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerRequestsDurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerRequestsDurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerRequestsDurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerRequestsDurationResponseValidationError{}

// Validate checks the field values on GetCustomerRequestsMileageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerRequestsMileageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerRequestsMileageRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerRequestsMileageRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomerRequestsMileageRequestValidationError is the validation error
// returned by GetCustomerRequestsMileageRequest.Validate if the designated
// constraints aren't met.
type GetCustomerRequestsMileageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerRequestsMileageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerRequestsMileageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerRequestsMileageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerRequestsMileageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerRequestsMileageRequestValidationError) ErrorName() string {
	return "GetCustomerRequestsMileageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerRequestsMileageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerRequestsMileageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerRequestsMileageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerRequestsMileageRequestValidationError{}

// Validate checks the field values on GetCustomerRequestsMileageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerRequestsMileageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Mileage

	return nil
}

// GetCustomerRequestsMileageResponseValidationError is the validation error
// returned by GetCustomerRequestsMileageResponse.Validate if the designated
// constraints aren't met.
type GetCustomerRequestsMileageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerRequestsMileageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerRequestsMileageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerRequestsMileageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerRequestsMileageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerRequestsMileageResponseValidationError) ErrorName() string {
	return "GetCustomerRequestsMileageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerRequestsMileageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerRequestsMileageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerRequestsMileageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerRequestsMileageResponseValidationError{}

// Validate checks the field values on GetCustomerRequestsHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerRequestsHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPageNumber() < 1 {
		return GetCustomerRequestsHistoryRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetPageSize() < 1 {
		return GetCustomerRequestsHistoryRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// GetCustomerRequestsHistoryRequestValidationError is the validation error
// returned by GetCustomerRequestsHistoryRequest.Validate if the designated
// constraints aren't met.
type GetCustomerRequestsHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerRequestsHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerRequestsHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerRequestsHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerRequestsHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerRequestsHistoryRequestValidationError) ErrorName() string {
	return "GetCustomerRequestsHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerRequestsHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerRequestsHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerRequestsHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerRequestsHistoryRequestValidationError{}

// Validate checks the field values on GetCustomerRequestsHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerRequestsHistoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCustomerRequestsHistoryResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCustomerRequestsHistoryResponseValidationError is the validation error
// returned by GetCustomerRequestsHistoryResponse.Validate if the designated
// constraints aren't met.
type GetCustomerRequestsHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerRequestsHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerRequestsHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerRequestsHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerRequestsHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerRequestsHistoryResponseValidationError) ErrorName() string {
	return "GetCustomerRequestsHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerRequestsHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerRequestsHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerRequestsHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerRequestsHistoryResponseValidationError{}

// Validate checks the field values on GetCustomerRequestDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerRequestDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	return nil
}

// GetCustomerRequestDetailsRequestValidationError is the validation error
// returned by GetCustomerRequestDetailsRequest.Validate if the designated
// constraints aren't met.
type GetCustomerRequestDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerRequestDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerRequestDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerRequestDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerRequestDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerRequestDetailsRequestValidationError) ErrorName() string {
	return "GetCustomerRequestDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerRequestDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerRequestDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerRequestDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerRequestDetailsRequestValidationError{}

// Validate checks the field values on GetCustomerRequestDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerRequestDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerRequestDetailsResponseValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Plate

	// no validation rules for CourierPhoto

	// no validation rules for CourierPhoneNumber

	// no validation rules for CourierName

	return nil
}

// GetCustomerRequestDetailsResponseValidationError is the validation error
// returned by GetCustomerRequestDetailsResponse.Validate if the designated
// constraints aren't met.
type GetCustomerRequestDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerRequestDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerRequestDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerRequestDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerRequestDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerRequestDetailsResponseValidationError) ErrorName() string {
	return "GetCustomerRequestDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerRequestDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerRequestDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerRequestDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerRequestDetailsResponseValidationError{}

// Validate checks the field values on GetCourierActiveRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCourierActiveRequestResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequestAndStatuses()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourierActiveRequestResponseValidationError{
				field:  "RequestAndStatuses",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequesterName

	// no validation rules for RequesterPhone

	return nil
}

// GetCourierActiveRequestResponseValidationError is the validation error
// returned by GetCourierActiveRequestResponse.Validate if the designated
// constraints aren't met.
type GetCourierActiveRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierActiveRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierActiveRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierActiveRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierActiveRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierActiveRequestResponseValidationError) ErrorName() string {
	return "GetCourierActiveRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierActiveRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierActiveRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierActiveRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierActiveRequestResponseValidationError{}

// Validate checks the field values on GetCustomerActiveRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerActiveRequestResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequestAndStatuses()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerActiveRequestResponseValidationError{
				field:  "RequestAndStatuses",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequesterName

	// no validation rules for RequesterPhone

	return nil
}

// GetCustomerActiveRequestResponseValidationError is the validation error
// returned by GetCustomerActiveRequestResponse.Validate if the designated
// constraints aren't met.
type GetCustomerActiveRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerActiveRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerActiveRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerActiveRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerActiveRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerActiveRequestResponseValidationError) ErrorName() string {
	return "GetCustomerActiveRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerActiveRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerActiveRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerActiveRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerActiveRequestResponseValidationError{}
