// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: delivery_model.proto

package deliveryPb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	commonPb "gitlab.artin.ai/backend/courier-management/grpc/common/go"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = commonPb.VehicleType(0)
)

// define the regex for a UUID once up-front
var _delivery_model_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SavedLocation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SavedLocation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FullName

	if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SavedLocationValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAddressDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SavedLocationValidationError{
				field:  "AddressDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Lat

	// no validation rules for Lon

	if v, ok := interface{}(m.GetCourierInstructions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SavedLocationValidationError{
				field:  "CourierInstructions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SavedLocationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SavedLocationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SavedLocationValidationError is the validation error returned by
// SavedLocation.Validate if the designated constraints aren't met.
type SavedLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SavedLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SavedLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SavedLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SavedLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SavedLocationValidationError) ErrorName() string { return "SavedLocationValidationError" }

// Error satisfies the builtin error interface
func (e SavedLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSavedLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SavedLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SavedLocationValidationError{}

// Validate checks the field values on RideStatus with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RideStatus) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RideStatusValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RideStatusValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetRideLocationId()); err != nil {
		return RideStatusValidationError{
			field:  "RideLocationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Status

	// no validation rules for CancellationNote

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RideStatusValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *RideStatus) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RideStatusValidationError is the validation error returned by
// RideStatus.Validate if the designated constraints aren't met.
type RideStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RideStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RideStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RideStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RideStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RideStatusValidationError) ErrorName() string { return "RideStatusValidationError" }

// Error satisfies the builtin error interface
func (e RideStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRideStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RideStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RideStatusValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Request) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return RequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for HumanReadableId

	if err := m._validateUuid(m.GetCustomerId()); err != nil {
		return RequestValidationError{
			field:  "CustomerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetCourierId()); err != nil {
		return RequestValidationError{
			field:  "CourierId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if v, ok := interface{}(m.GetOrigin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "Origin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDestinations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestValidationError{
					field:  fmt.Sprintf("Destinations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for EstimatedDuration

	// no validation rules for EstimatedDistanceMeter

	// no validation rules for FinalPrice

	// no validation rules for FinalPriceCurrency

	// no validation rules for VehicleType

	// no validation rules for RequiredWorkers

	// no validation rules for Status

	// no validation rules for LastProcessedDestination

	if v, ok := interface{}(m.GetScheduledOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "ScheduledOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CalculatedPrice

	return nil
}

func (m *Request) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on RequestLocation with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RequestLocation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FullName

	// no validation rules for PhoneNumber

	// no validation rules for AddressDetails

	// no validation rules for Lat

	// no validation rules for Lon

	// no validation rules for CourierInstructions

	// no validation rules for Order

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestLocationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestLocationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RequestLocationValidationError is the validation error returned by
// RequestLocation.Validate if the designated constraints aren't met.
type RequestLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestLocationValidationError) ErrorName() string { return "RequestLocationValidationError" }

// Error satisfies the builtin error interface
func (e RequestLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestLocationValidationError{}

// Validate checks the field values on NewRequestEvent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NewRequestEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	return nil
}

// NewRequestEventValidationError is the validation error returned by
// NewRequestEvent.Validate if the designated constraints aren't met.
type NewRequestEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewRequestEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewRequestEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewRequestEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewRequestEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewRequestEventValidationError) ErrorName() string { return "NewRequestEventValidationError" }

// Error satisfies the builtin error interface
func (e NewRequestEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewRequestEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewRequestEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewRequestEventValidationError{}

// Validate checks the field values on RequestCancelledEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestCancelledEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestCancelledEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetCustomerId()); err != nil {
		return RequestCancelledEventValidationError{
			field:  "CustomerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for CourierId

	// no validation rules for CancelReason

	// no validation rules for CancelledBy

	if err := m._validateUuid(m.GetUpdatedBy()); err != nil {
		return RequestCancelledEventValidationError{
			field:  "UpdatedBy",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *RequestCancelledEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestCancelledEventValidationError is the validation error returned by
// RequestCancelledEvent.Validate if the designated constraints aren't met.
type RequestCancelledEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCancelledEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestCancelledEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestCancelledEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestCancelledEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestCancelledEventValidationError) ErrorName() string {
	return "RequestCancelledEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCancelledEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCancelledEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCancelledEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCancelledEventValidationError{}

// Validate checks the field values on RequestAcceptedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestAcceptedEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestAcceptedEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetCustomerId()); err != nil {
		return RequestAcceptedEventValidationError{
			field:  "CustomerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetCourierId()); err != nil {
		return RequestAcceptedEventValidationError{
			field:  "CourierId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Desc

	return nil
}

func (m *RequestAcceptedEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestAcceptedEventValidationError is the validation error returned by
// RequestAcceptedEvent.Validate if the designated constraints aren't met.
type RequestAcceptedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestAcceptedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestAcceptedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestAcceptedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestAcceptedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestAcceptedEventValidationError) ErrorName() string {
	return "RequestAcceptedEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestAcceptedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestAcceptedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestAcceptedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestAcceptedEventValidationError{}

// Validate checks the field values on RequestRejectedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestRejectedEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestRejectedEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetCustomerId()); err != nil {
		return RequestRejectedEventValidationError{
			field:  "CustomerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetCourierId()); err != nil {
		return RequestRejectedEventValidationError{
			field:  "CourierId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Desc

	return nil
}

func (m *RequestRejectedEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestRejectedEventValidationError is the validation error returned by
// RequestRejectedEvent.Validate if the designated constraints aren't met.
type RequestRejectedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestRejectedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestRejectedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestRejectedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestRejectedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestRejectedEventValidationError) ErrorName() string {
	return "RequestRejectedEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestRejectedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestRejectedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestRejectedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestRejectedEventValidationError{}

// Validate checks the field values on RequestArrivedOriginEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestArrivedOriginEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestArrivedOriginEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Desc

	return nil
}

func (m *RequestArrivedOriginEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestArrivedOriginEventValidationError is the validation error returned by
// RequestArrivedOriginEvent.Validate if the designated constraints aren't met.
type RequestArrivedOriginEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestArrivedOriginEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestArrivedOriginEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestArrivedOriginEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestArrivedOriginEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestArrivedOriginEventValidationError) ErrorName() string {
	return "RequestArrivedOriginEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestArrivedOriginEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestArrivedOriginEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestArrivedOriginEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestArrivedOriginEventValidationError{}

// Validate checks the field values on RequestArrivedDestinationEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestArrivedDestinationEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestArrivedDestinationEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for DestinationOrder

	// no validation rules for Desc

	return nil
}

func (m *RequestArrivedDestinationEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestArrivedDestinationEventValidationError is the validation error
// returned by RequestArrivedDestinationEvent.Validate if the designated
// constraints aren't met.
type RequestArrivedDestinationEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestArrivedDestinationEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestArrivedDestinationEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestArrivedDestinationEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestArrivedDestinationEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestArrivedDestinationEventValidationError) ErrorName() string {
	return "RequestArrivedDestinationEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestArrivedDestinationEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestArrivedDestinationEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestArrivedDestinationEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestArrivedDestinationEventValidationError{}

// Validate checks the field values on RequestPickedUpEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestPickedUpEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestPickedUpEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Desc

	return nil
}

func (m *RequestPickedUpEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestPickedUpEventValidationError is the validation error returned by
// RequestPickedUpEvent.Validate if the designated constraints aren't met.
type RequestPickedUpEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestPickedUpEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestPickedUpEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestPickedUpEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestPickedUpEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestPickedUpEventValidationError) ErrorName() string {
	return "RequestPickedUpEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestPickedUpEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestPickedUpEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestPickedUpEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestPickedUpEventValidationError{}

// Validate checks the field values on RequestDeliveredEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestDeliveredEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestDeliveredEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for DestinationOrder

	// no validation rules for Desc

	return nil
}

func (m *RequestDeliveredEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestDeliveredEventValidationError is the validation error returned by
// RequestDeliveredEvent.Validate if the designated constraints aren't met.
type RequestDeliveredEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestDeliveredEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestDeliveredEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestDeliveredEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestDeliveredEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestDeliveredEventValidationError) ErrorName() string {
	return "RequestDeliveredEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestDeliveredEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestDeliveredEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestDeliveredEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestDeliveredEventValidationError{}

// Validate checks the field values on RequestCompletedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestCompletedEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestCompletedEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Desc

	return nil
}

func (m *RequestCompletedEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestCompletedEventValidationError is the validation error returned by
// RequestCompletedEvent.Validate if the designated constraints aren't met.
type RequestCompletedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCompletedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestCompletedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestCompletedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestCompletedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestCompletedEventValidationError) ErrorName() string {
	return "RequestCompletedEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCompletedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCompletedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCompletedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCompletedEventValidationError{}

// Validate checks the field values on RequestNavigatingToSenderEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestNavigatingToSenderEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestNavigatingToSenderEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *RequestNavigatingToSenderEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestNavigatingToSenderEventValidationError is the validation error
// returned by RequestNavigatingToSenderEvent.Validate if the designated
// constraints aren't met.
type RequestNavigatingToSenderEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestNavigatingToSenderEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestNavigatingToSenderEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestNavigatingToSenderEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestNavigatingToSenderEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestNavigatingToSenderEventValidationError) ErrorName() string {
	return "RequestNavigatingToSenderEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestNavigatingToSenderEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestNavigatingToSenderEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestNavigatingToSenderEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestNavigatingToSenderEventValidationError{}

// Validate checks the field values on RequestNavigatingToReceiverEvent with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RequestNavigatingToReceiverEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestNavigatingToReceiverEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for TargetDestinationOrder

	return nil
}

func (m *RequestNavigatingToReceiverEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestNavigatingToReceiverEventValidationError is the validation error
// returned by RequestNavigatingToReceiverEvent.Validate if the designated
// constraints aren't met.
type RequestNavigatingToReceiverEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestNavigatingToReceiverEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestNavigatingToReceiverEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestNavigatingToReceiverEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestNavigatingToReceiverEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestNavigatingToReceiverEventValidationError) ErrorName() string {
	return "RequestNavigatingToReceiverEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestNavigatingToReceiverEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestNavigatingToReceiverEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestNavigatingToReceiverEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestNavigatingToReceiverEventValidationError{}

// Validate checks the field values on RequestSenderNotAvailableEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestSenderNotAvailableEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestSenderNotAvailableEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Desc

	return nil
}

func (m *RequestSenderNotAvailableEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestSenderNotAvailableEventValidationError is the validation error
// returned by RequestSenderNotAvailableEvent.Validate if the designated
// constraints aren't met.
type RequestSenderNotAvailableEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestSenderNotAvailableEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestSenderNotAvailableEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestSenderNotAvailableEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestSenderNotAvailableEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestSenderNotAvailableEventValidationError) ErrorName() string {
	return "RequestSenderNotAvailableEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestSenderNotAvailableEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestSenderNotAvailableEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestSenderNotAvailableEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestSenderNotAvailableEventValidationError{}

// Validate checks the field values on RequestReceiverNotAvailableEvent with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RequestReceiverNotAvailableEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		return RequestReceiverNotAvailableEventValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for DestinationOrder

	// no validation rules for Desc

	return nil
}

func (m *RequestReceiverNotAvailableEvent) _validateUuid(uuid string) error {
	if matched := _delivery_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestReceiverNotAvailableEventValidationError is the validation error
// returned by RequestReceiverNotAvailableEvent.Validate if the designated
// constraints aren't met.
type RequestReceiverNotAvailableEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestReceiverNotAvailableEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestReceiverNotAvailableEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestReceiverNotAvailableEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestReceiverNotAvailableEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestReceiverNotAvailableEventValidationError) ErrorName() string {
	return "RequestReceiverNotAvailableEventValidationError"
}

// Error satisfies the builtin error interface
func (e RequestReceiverNotAvailableEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestReceiverNotAvailableEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestReceiverNotAvailableEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestReceiverNotAvailableEventValidationError{}

// Validate checks the field values on RequestHistoryItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestHistoryItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestHistoryItemValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestHistoryItemValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RequestHistoryItemValidationError is the validation error returned by
// RequestHistoryItem.Validate if the designated constraints aren't met.
type RequestHistoryItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestHistoryItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestHistoryItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestHistoryItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestHistoryItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestHistoryItemValidationError) ErrorName() string {
	return "RequestHistoryItemValidationError"
}

// Error satisfies the builtin error interface
func (e RequestHistoryItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestHistoryItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestHistoryItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestHistoryItemValidationError{}
