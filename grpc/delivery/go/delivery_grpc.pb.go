// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package deliveryPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryClient is the client API for Delivery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryClient interface {
	AddSavedLocation(ctx context.Context, in *AddSavedLocationRequest, opts ...grpc.CallOption) (*AddSavedLocationResponse, error)
	ListSavedLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSavedLocationsResponse, error)
	UpdateSavedLocation(ctx context.Context, in *UpdateSavedLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveSavedLocation(ctx context.Context, in *RemoveSavedLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveAllSavedLocations(ctx context.Context, in *RemoveAllSavedLocationsRequest, opts ...grpc.CallOption) (*RemoveAllSavedLocationsResponse, error)
	CreateRequest(ctx context.Context, in *CreateRequestRequest, opts ...grpc.CallOption) (*CreateRequestResponse, error)
	AcceptRequest(ctx context.Context, in *AcceptRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RejectRequest(ctx context.Context, in *RejectRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelRequest(ctx context.Context, in *CancelRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestArrivedOrigin(ctx context.Context, in *RequestArrivedOriginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestArrivedDestination(ctx context.Context, in *RequestArrivedDestinationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestPickedUp(ctx context.Context, in *RequestPickedUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestDelivered(ctx context.Context, in *RequestDeliveredRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestNavigatingToSender(ctx context.Context, in *RequestNavigatingToSenderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestNavigatingToReceiver(ctx context.Context, in *RequestNavigatingToReceiverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestSenderNotAvailable(ctx context.Context, in *RequestSenderNotAvailableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestReceiverNotAvailable(ctx context.Context, in *RequestReceiverNotAvailableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestCompleted(ctx context.Context, in *RequestCompletedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCourierCompletedRequests(ctx context.Context, in *GetCourierCompletedRequestsRequest, opts ...grpc.CallOption) (*GetCourierCompletedRequestsResponse, error)
	GetCourierRequestsDuration(ctx context.Context, in *GetCourierRequestsDurationRequest, opts ...grpc.CallOption) (*GetCourierRequestsDurationResponse, error)
	GetCourierRequestsMileage(ctx context.Context, in *GetCourierRequestsMileageRequest, opts ...grpc.CallOption) (*GetCourierRequestsMileageResponse, error)
	GetCourierRequestsHistory(ctx context.Context, in *GetCourierRequestsHistoryRequest, opts ...grpc.CallOption) (*GetCourierRequestsHistoryResponse, error)
	GetCourierRequestDetails(ctx context.Context, in *GetCourierRequestDetailsRequest, opts ...grpc.CallOption) (*GetCourierRequestDetailsResponse, error)
	GetRequestHistory(ctx context.Context, in *GetRequestHistoryRequest, opts ...grpc.CallOption) (*GetRequestHistoryResponse, error)
	GetCustomerCompletedRequests(ctx context.Context, in *GetCustomerCompletedRequestsRequest, opts ...grpc.CallOption) (*GetCustomerCompletedRequestsResponse, error)
	GetCustomerRequestsDuration(ctx context.Context, in *GetCustomerRequestsDurationRequest, opts ...grpc.CallOption) (*GetCustomerRequestsDurationResponse, error)
	GetCustomerRequestsMileage(ctx context.Context, in *GetCustomerRequestsMileageRequest, opts ...grpc.CallOption) (*GetCustomerRequestsMileageResponse, error)
	GetCustomerRequestsHistory(ctx context.Context, in *GetCustomerRequestsHistoryRequest, opts ...grpc.CallOption) (*GetCustomerRequestsHistoryResponse, error)
	GetCustomerRequestDetails(ctx context.Context, in *GetCustomerRequestDetailsRequest, opts ...grpc.CallOption) (*GetCustomerRequestDetailsResponse, error)
	GetRequests(ctx context.Context, in *GetRequestsRequest, opts ...grpc.CallOption) (*GetRequestsResponse, error)
	GetCourierActiveRequest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCourierActiveRequestResponse, error)
	GetCustomerActiveRequest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCustomerActiveRequestResponse, error)
}

type deliveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryClient(cc grpc.ClientConnInterface) DeliveryClient {
	return &deliveryClient{cc}
}

func (c *deliveryClient) AddSavedLocation(ctx context.Context, in *AddSavedLocationRequest, opts ...grpc.CallOption) (*AddSavedLocationResponse, error) {
	out := new(AddSavedLocationResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/AddSavedLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) ListSavedLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSavedLocationsResponse, error) {
	out := new(ListSavedLocationsResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/ListSavedLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) UpdateSavedLocation(ctx context.Context, in *UpdateSavedLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/UpdateSavedLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RemoveSavedLocation(ctx context.Context, in *RemoveSavedLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RemoveSavedLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RemoveAllSavedLocations(ctx context.Context, in *RemoveAllSavedLocationsRequest, opts ...grpc.CallOption) (*RemoveAllSavedLocationsResponse, error) {
	out := new(RemoveAllSavedLocationsResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RemoveAllSavedLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) CreateRequest(ctx context.Context, in *CreateRequestRequest, opts ...grpc.CallOption) (*CreateRequestResponse, error) {
	out := new(CreateRequestResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/CreateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) AcceptRequest(ctx context.Context, in *AcceptRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/AcceptRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RejectRequest(ctx context.Context, in *RejectRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RejectRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) CancelRequest(ctx context.Context, in *CancelRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/CancelRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RequestArrivedOrigin(ctx context.Context, in *RequestArrivedOriginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RequestArrivedOrigin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RequestArrivedDestination(ctx context.Context, in *RequestArrivedDestinationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RequestArrivedDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RequestPickedUp(ctx context.Context, in *RequestPickedUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RequestPickedUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RequestDelivered(ctx context.Context, in *RequestDeliveredRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RequestDelivered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RequestNavigatingToSender(ctx context.Context, in *RequestNavigatingToSenderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RequestNavigatingToSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RequestNavigatingToReceiver(ctx context.Context, in *RequestNavigatingToReceiverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RequestNavigatingToReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RequestSenderNotAvailable(ctx context.Context, in *RequestSenderNotAvailableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RequestSenderNotAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RequestReceiverNotAvailable(ctx context.Context, in *RequestReceiverNotAvailableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RequestReceiverNotAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) RequestCompleted(ctx context.Context, in *RequestCompletedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/RequestCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCourierCompletedRequests(ctx context.Context, in *GetCourierCompletedRequestsRequest, opts ...grpc.CallOption) (*GetCourierCompletedRequestsResponse, error) {
	out := new(GetCourierCompletedRequestsResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCourierCompletedRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCourierRequestsDuration(ctx context.Context, in *GetCourierRequestsDurationRequest, opts ...grpc.CallOption) (*GetCourierRequestsDurationResponse, error) {
	out := new(GetCourierRequestsDurationResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCourierRequestsDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCourierRequestsMileage(ctx context.Context, in *GetCourierRequestsMileageRequest, opts ...grpc.CallOption) (*GetCourierRequestsMileageResponse, error) {
	out := new(GetCourierRequestsMileageResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCourierRequestsMileage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCourierRequestsHistory(ctx context.Context, in *GetCourierRequestsHistoryRequest, opts ...grpc.CallOption) (*GetCourierRequestsHistoryResponse, error) {
	out := new(GetCourierRequestsHistoryResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCourierRequestsHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCourierRequestDetails(ctx context.Context, in *GetCourierRequestDetailsRequest, opts ...grpc.CallOption) (*GetCourierRequestDetailsResponse, error) {
	out := new(GetCourierRequestDetailsResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCourierRequestDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetRequestHistory(ctx context.Context, in *GetRequestHistoryRequest, opts ...grpc.CallOption) (*GetRequestHistoryResponse, error) {
	out := new(GetRequestHistoryResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetRequestHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCustomerCompletedRequests(ctx context.Context, in *GetCustomerCompletedRequestsRequest, opts ...grpc.CallOption) (*GetCustomerCompletedRequestsResponse, error) {
	out := new(GetCustomerCompletedRequestsResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCustomerCompletedRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCustomerRequestsDuration(ctx context.Context, in *GetCustomerRequestsDurationRequest, opts ...grpc.CallOption) (*GetCustomerRequestsDurationResponse, error) {
	out := new(GetCustomerRequestsDurationResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCustomerRequestsDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCustomerRequestsMileage(ctx context.Context, in *GetCustomerRequestsMileageRequest, opts ...grpc.CallOption) (*GetCustomerRequestsMileageResponse, error) {
	out := new(GetCustomerRequestsMileageResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCustomerRequestsMileage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCustomerRequestsHistory(ctx context.Context, in *GetCustomerRequestsHistoryRequest, opts ...grpc.CallOption) (*GetCustomerRequestsHistoryResponse, error) {
	out := new(GetCustomerRequestsHistoryResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCustomerRequestsHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCustomerRequestDetails(ctx context.Context, in *GetCustomerRequestDetailsRequest, opts ...grpc.CallOption) (*GetCustomerRequestDetailsResponse, error) {
	out := new(GetCustomerRequestDetailsResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCustomerRequestDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetRequests(ctx context.Context, in *GetRequestsRequest, opts ...grpc.CallOption) (*GetRequestsResponse, error) {
	out := new(GetRequestsResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCourierActiveRequest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCourierActiveRequestResponse, error) {
	out := new(GetCourierActiveRequestResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCourierActiveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) GetCustomerActiveRequest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCustomerActiveRequestResponse, error) {
	out := new(GetCustomerActiveRequestResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.delivery.Delivery/GetCustomerActiveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServer is the server API for Delivery service.
// All implementations must embed UnimplementedDeliveryServer
// for forward compatibility
type DeliveryServer interface {
	AddSavedLocation(context.Context, *AddSavedLocationRequest) (*AddSavedLocationResponse, error)
	ListSavedLocations(context.Context, *emptypb.Empty) (*ListSavedLocationsResponse, error)
	UpdateSavedLocation(context.Context, *UpdateSavedLocationRequest) (*emptypb.Empty, error)
	RemoveSavedLocation(context.Context, *RemoveSavedLocationRequest) (*emptypb.Empty, error)
	RemoveAllSavedLocations(context.Context, *RemoveAllSavedLocationsRequest) (*RemoveAllSavedLocationsResponse, error)
	CreateRequest(context.Context, *CreateRequestRequest) (*CreateRequestResponse, error)
	AcceptRequest(context.Context, *AcceptRequestRequest) (*emptypb.Empty, error)
	RejectRequest(context.Context, *RejectRequestRequest) (*emptypb.Empty, error)
	CancelRequest(context.Context, *CancelRequestRequest) (*emptypb.Empty, error)
	RequestArrivedOrigin(context.Context, *RequestArrivedOriginRequest) (*emptypb.Empty, error)
	RequestArrivedDestination(context.Context, *RequestArrivedDestinationRequest) (*emptypb.Empty, error)
	RequestPickedUp(context.Context, *RequestPickedUpRequest) (*emptypb.Empty, error)
	RequestDelivered(context.Context, *RequestDeliveredRequest) (*emptypb.Empty, error)
	RequestNavigatingToSender(context.Context, *RequestNavigatingToSenderRequest) (*emptypb.Empty, error)
	RequestNavigatingToReceiver(context.Context, *RequestNavigatingToReceiverRequest) (*emptypb.Empty, error)
	RequestSenderNotAvailable(context.Context, *RequestSenderNotAvailableRequest) (*emptypb.Empty, error)
	RequestReceiverNotAvailable(context.Context, *RequestReceiverNotAvailableRequest) (*emptypb.Empty, error)
	RequestCompleted(context.Context, *RequestCompletedRequest) (*emptypb.Empty, error)
	GetCourierCompletedRequests(context.Context, *GetCourierCompletedRequestsRequest) (*GetCourierCompletedRequestsResponse, error)
	GetCourierRequestsDuration(context.Context, *GetCourierRequestsDurationRequest) (*GetCourierRequestsDurationResponse, error)
	GetCourierRequestsMileage(context.Context, *GetCourierRequestsMileageRequest) (*GetCourierRequestsMileageResponse, error)
	GetCourierRequestsHistory(context.Context, *GetCourierRequestsHistoryRequest) (*GetCourierRequestsHistoryResponse, error)
	GetCourierRequestDetails(context.Context, *GetCourierRequestDetailsRequest) (*GetCourierRequestDetailsResponse, error)
	GetRequestHistory(context.Context, *GetRequestHistoryRequest) (*GetRequestHistoryResponse, error)
	GetCustomerCompletedRequests(context.Context, *GetCustomerCompletedRequestsRequest) (*GetCustomerCompletedRequestsResponse, error)
	GetCustomerRequestsDuration(context.Context, *GetCustomerRequestsDurationRequest) (*GetCustomerRequestsDurationResponse, error)
	GetCustomerRequestsMileage(context.Context, *GetCustomerRequestsMileageRequest) (*GetCustomerRequestsMileageResponse, error)
	GetCustomerRequestsHistory(context.Context, *GetCustomerRequestsHistoryRequest) (*GetCustomerRequestsHistoryResponse, error)
	GetCustomerRequestDetails(context.Context, *GetCustomerRequestDetailsRequest) (*GetCustomerRequestDetailsResponse, error)
	GetRequests(context.Context, *GetRequestsRequest) (*GetRequestsResponse, error)
	GetCourierActiveRequest(context.Context, *emptypb.Empty) (*GetCourierActiveRequestResponse, error)
	GetCustomerActiveRequest(context.Context, *emptypb.Empty) (*GetCustomerActiveRequestResponse, error)
	mustEmbedUnimplementedDeliveryServer()
}

// UnimplementedDeliveryServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryServer struct {
}

func (UnimplementedDeliveryServer) AddSavedLocation(context.Context, *AddSavedLocationRequest) (*AddSavedLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSavedLocation not implemented")
}
func (UnimplementedDeliveryServer) ListSavedLocations(context.Context, *emptypb.Empty) (*ListSavedLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSavedLocations not implemented")
}
func (UnimplementedDeliveryServer) UpdateSavedLocation(context.Context, *UpdateSavedLocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSavedLocation not implemented")
}
func (UnimplementedDeliveryServer) RemoveSavedLocation(context.Context, *RemoveSavedLocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSavedLocation not implemented")
}
func (UnimplementedDeliveryServer) RemoveAllSavedLocations(context.Context, *RemoveAllSavedLocationsRequest) (*RemoveAllSavedLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllSavedLocations not implemented")
}
func (UnimplementedDeliveryServer) CreateRequest(context.Context, *CreateRequestRequest) (*CreateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequest not implemented")
}
func (UnimplementedDeliveryServer) AcceptRequest(context.Context, *AcceptRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequest not implemented")
}
func (UnimplementedDeliveryServer) RejectRequest(context.Context, *RejectRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectRequest not implemented")
}
func (UnimplementedDeliveryServer) CancelRequest(context.Context, *CancelRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRequest not implemented")
}
func (UnimplementedDeliveryServer) RequestArrivedOrigin(context.Context, *RequestArrivedOriginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestArrivedOrigin not implemented")
}
func (UnimplementedDeliveryServer) RequestArrivedDestination(context.Context, *RequestArrivedDestinationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestArrivedDestination not implemented")
}
func (UnimplementedDeliveryServer) RequestPickedUp(context.Context, *RequestPickedUpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPickedUp not implemented")
}
func (UnimplementedDeliveryServer) RequestDelivered(context.Context, *RequestDeliveredRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDelivered not implemented")
}
func (UnimplementedDeliveryServer) RequestNavigatingToSender(context.Context, *RequestNavigatingToSenderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNavigatingToSender not implemented")
}
func (UnimplementedDeliveryServer) RequestNavigatingToReceiver(context.Context, *RequestNavigatingToReceiverRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNavigatingToReceiver not implemented")
}
func (UnimplementedDeliveryServer) RequestSenderNotAvailable(context.Context, *RequestSenderNotAvailableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSenderNotAvailable not implemented")
}
func (UnimplementedDeliveryServer) RequestReceiverNotAvailable(context.Context, *RequestReceiverNotAvailableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestReceiverNotAvailable not implemented")
}
func (UnimplementedDeliveryServer) RequestCompleted(context.Context, *RequestCompletedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCompleted not implemented")
}
func (UnimplementedDeliveryServer) GetCourierCompletedRequests(context.Context, *GetCourierCompletedRequestsRequest) (*GetCourierCompletedRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierCompletedRequests not implemented")
}
func (UnimplementedDeliveryServer) GetCourierRequestsDuration(context.Context, *GetCourierRequestsDurationRequest) (*GetCourierRequestsDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierRequestsDuration not implemented")
}
func (UnimplementedDeliveryServer) GetCourierRequestsMileage(context.Context, *GetCourierRequestsMileageRequest) (*GetCourierRequestsMileageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierRequestsMileage not implemented")
}
func (UnimplementedDeliveryServer) GetCourierRequestsHistory(context.Context, *GetCourierRequestsHistoryRequest) (*GetCourierRequestsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierRequestsHistory not implemented")
}
func (UnimplementedDeliveryServer) GetCourierRequestDetails(context.Context, *GetCourierRequestDetailsRequest) (*GetCourierRequestDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierRequestDetails not implemented")
}
func (UnimplementedDeliveryServer) GetRequestHistory(context.Context, *GetRequestHistoryRequest) (*GetRequestHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestHistory not implemented")
}
func (UnimplementedDeliveryServer) GetCustomerCompletedRequests(context.Context, *GetCustomerCompletedRequestsRequest) (*GetCustomerCompletedRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerCompletedRequests not implemented")
}
func (UnimplementedDeliveryServer) GetCustomerRequestsDuration(context.Context, *GetCustomerRequestsDurationRequest) (*GetCustomerRequestsDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRequestsDuration not implemented")
}
func (UnimplementedDeliveryServer) GetCustomerRequestsMileage(context.Context, *GetCustomerRequestsMileageRequest) (*GetCustomerRequestsMileageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRequestsMileage not implemented")
}
func (UnimplementedDeliveryServer) GetCustomerRequestsHistory(context.Context, *GetCustomerRequestsHistoryRequest) (*GetCustomerRequestsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRequestsHistory not implemented")
}
func (UnimplementedDeliveryServer) GetCustomerRequestDetails(context.Context, *GetCustomerRequestDetailsRequest) (*GetCustomerRequestDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRequestDetails not implemented")
}
func (UnimplementedDeliveryServer) GetRequests(context.Context, *GetRequestsRequest) (*GetRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequests not implemented")
}
func (UnimplementedDeliveryServer) GetCourierActiveRequest(context.Context, *emptypb.Empty) (*GetCourierActiveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierActiveRequest not implemented")
}
func (UnimplementedDeliveryServer) GetCustomerActiveRequest(context.Context, *emptypb.Empty) (*GetCustomerActiveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerActiveRequest not implemented")
}
func (UnimplementedDeliveryServer) mustEmbedUnimplementedDeliveryServer() {}

// UnsafeDeliveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServer will
// result in compilation errors.
type UnsafeDeliveryServer interface {
	mustEmbedUnimplementedDeliveryServer()
}

func RegisterDeliveryServer(s grpc.ServiceRegistrar, srv DeliveryServer) {
	s.RegisterService(&Delivery_ServiceDesc, srv)
}

func _Delivery_AddSavedLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSavedLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).AddSavedLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/AddSavedLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).AddSavedLocation(ctx, req.(*AddSavedLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_ListSavedLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).ListSavedLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/ListSavedLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).ListSavedLocations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_UpdateSavedLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSavedLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).UpdateSavedLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/UpdateSavedLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).UpdateSavedLocation(ctx, req.(*UpdateSavedLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RemoveSavedLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSavedLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RemoveSavedLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RemoveSavedLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RemoveSavedLocation(ctx, req.(*RemoveSavedLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RemoveAllSavedLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllSavedLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RemoveAllSavedLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RemoveAllSavedLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RemoveAllSavedLocations(ctx, req.(*RemoveAllSavedLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_CreateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).CreateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/CreateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).CreateRequest(ctx, req.(*CreateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/AcceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).AcceptRequest(ctx, req.(*AcceptRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RejectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RejectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RejectRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RejectRequest(ctx, req.(*RejectRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_CancelRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).CancelRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/CancelRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).CancelRequest(ctx, req.(*CancelRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RequestArrivedOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArrivedOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RequestArrivedOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RequestArrivedOrigin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RequestArrivedOrigin(ctx, req.(*RequestArrivedOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RequestArrivedDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArrivedDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RequestArrivedDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RequestArrivedDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RequestArrivedDestination(ctx, req.(*RequestArrivedDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RequestPickedUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPickedUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RequestPickedUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RequestPickedUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RequestPickedUp(ctx, req.(*RequestPickedUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RequestDelivered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RequestDelivered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RequestDelivered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RequestDelivered(ctx, req.(*RequestDeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RequestNavigatingToSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNavigatingToSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RequestNavigatingToSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RequestNavigatingToSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RequestNavigatingToSender(ctx, req.(*RequestNavigatingToSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RequestNavigatingToReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNavigatingToReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RequestNavigatingToReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RequestNavigatingToReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RequestNavigatingToReceiver(ctx, req.(*RequestNavigatingToReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RequestSenderNotAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSenderNotAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RequestSenderNotAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RequestSenderNotAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RequestSenderNotAvailable(ctx, req.(*RequestSenderNotAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RequestReceiverNotAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReceiverNotAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RequestReceiverNotAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RequestReceiverNotAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RequestReceiverNotAvailable(ctx, req.(*RequestReceiverNotAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_RequestCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).RequestCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/RequestCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).RequestCompleted(ctx, req.(*RequestCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCourierCompletedRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierCompletedRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCourierCompletedRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCourierCompletedRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCourierCompletedRequests(ctx, req.(*GetCourierCompletedRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCourierRequestsDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierRequestsDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCourierRequestsDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCourierRequestsDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCourierRequestsDuration(ctx, req.(*GetCourierRequestsDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCourierRequestsMileage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierRequestsMileageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCourierRequestsMileage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCourierRequestsMileage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCourierRequestsMileage(ctx, req.(*GetCourierRequestsMileageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCourierRequestsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierRequestsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCourierRequestsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCourierRequestsHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCourierRequestsHistory(ctx, req.(*GetCourierRequestsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCourierRequestDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierRequestDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCourierRequestDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCourierRequestDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCourierRequestDetails(ctx, req.(*GetCourierRequestDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetRequestHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetRequestHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetRequestHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetRequestHistory(ctx, req.(*GetRequestHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCustomerCompletedRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerCompletedRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCustomerCompletedRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCustomerCompletedRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCustomerCompletedRequests(ctx, req.(*GetCustomerCompletedRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCustomerRequestsDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequestsDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCustomerRequestsDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCustomerRequestsDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCustomerRequestsDuration(ctx, req.(*GetCustomerRequestsDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCustomerRequestsMileage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequestsMileageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCustomerRequestsMileage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCustomerRequestsMileage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCustomerRequestsMileage(ctx, req.(*GetCustomerRequestsMileageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCustomerRequestsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequestsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCustomerRequestsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCustomerRequestsHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCustomerRequestsHistory(ctx, req.(*GetCustomerRequestsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCustomerRequestDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequestDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCustomerRequestDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCustomerRequestDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCustomerRequestDetails(ctx, req.(*GetCustomerRequestDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetRequests(ctx, req.(*GetRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCourierActiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCourierActiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCourierActiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCourierActiveRequest(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_GetCustomerActiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).GetCustomerActiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.delivery.Delivery/GetCustomerActiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).GetCustomerActiveRequest(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Delivery_ServiceDesc is the grpc.ServiceDesc for Delivery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Delivery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artin.couriermanagement.delivery.Delivery",
	HandlerType: (*DeliveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSavedLocation",
			Handler:    _Delivery_AddSavedLocation_Handler,
		},
		{
			MethodName: "ListSavedLocations",
			Handler:    _Delivery_ListSavedLocations_Handler,
		},
		{
			MethodName: "UpdateSavedLocation",
			Handler:    _Delivery_UpdateSavedLocation_Handler,
		},
		{
			MethodName: "RemoveSavedLocation",
			Handler:    _Delivery_RemoveSavedLocation_Handler,
		},
		{
			MethodName: "RemoveAllSavedLocations",
			Handler:    _Delivery_RemoveAllSavedLocations_Handler,
		},
		{
			MethodName: "CreateRequest",
			Handler:    _Delivery_CreateRequest_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _Delivery_AcceptRequest_Handler,
		},
		{
			MethodName: "RejectRequest",
			Handler:    _Delivery_RejectRequest_Handler,
		},
		{
			MethodName: "CancelRequest",
			Handler:    _Delivery_CancelRequest_Handler,
		},
		{
			MethodName: "RequestArrivedOrigin",
			Handler:    _Delivery_RequestArrivedOrigin_Handler,
		},
		{
			MethodName: "RequestArrivedDestination",
			Handler:    _Delivery_RequestArrivedDestination_Handler,
		},
		{
			MethodName: "RequestPickedUp",
			Handler:    _Delivery_RequestPickedUp_Handler,
		},
		{
			MethodName: "RequestDelivered",
			Handler:    _Delivery_RequestDelivered_Handler,
		},
		{
			MethodName: "RequestNavigatingToSender",
			Handler:    _Delivery_RequestNavigatingToSender_Handler,
		},
		{
			MethodName: "RequestNavigatingToReceiver",
			Handler:    _Delivery_RequestNavigatingToReceiver_Handler,
		},
		{
			MethodName: "RequestSenderNotAvailable",
			Handler:    _Delivery_RequestSenderNotAvailable_Handler,
		},
		{
			MethodName: "RequestReceiverNotAvailable",
			Handler:    _Delivery_RequestReceiverNotAvailable_Handler,
		},
		{
			MethodName: "RequestCompleted",
			Handler:    _Delivery_RequestCompleted_Handler,
		},
		{
			MethodName: "GetCourierCompletedRequests",
			Handler:    _Delivery_GetCourierCompletedRequests_Handler,
		},
		{
			MethodName: "GetCourierRequestsDuration",
			Handler:    _Delivery_GetCourierRequestsDuration_Handler,
		},
		{
			MethodName: "GetCourierRequestsMileage",
			Handler:    _Delivery_GetCourierRequestsMileage_Handler,
		},
		{
			MethodName: "GetCourierRequestsHistory",
			Handler:    _Delivery_GetCourierRequestsHistory_Handler,
		},
		{
			MethodName: "GetCourierRequestDetails",
			Handler:    _Delivery_GetCourierRequestDetails_Handler,
		},
		{
			MethodName: "GetRequestHistory",
			Handler:    _Delivery_GetRequestHistory_Handler,
		},
		{
			MethodName: "GetCustomerCompletedRequests",
			Handler:    _Delivery_GetCustomerCompletedRequests_Handler,
		},
		{
			MethodName: "GetCustomerRequestsDuration",
			Handler:    _Delivery_GetCustomerRequestsDuration_Handler,
		},
		{
			MethodName: "GetCustomerRequestsMileage",
			Handler:    _Delivery_GetCustomerRequestsMileage_Handler,
		},
		{
			MethodName: "GetCustomerRequestsHistory",
			Handler:    _Delivery_GetCustomerRequestsHistory_Handler,
		},
		{
			MethodName: "GetCustomerRequestDetails",
			Handler:    _Delivery_GetCustomerRequestDetails_Handler,
		},
		{
			MethodName: "GetRequests",
			Handler:    _Delivery_GetRequests_Handler,
		},
		{
			MethodName: "GetCourierActiveRequest",
			Handler:    _Delivery_GetCourierActiveRequest_Handler,
		},
		{
			MethodName: "GetCustomerActiveRequest",
			Handler:    _Delivery_GetCustomerActiveRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delivery.proto",
}
