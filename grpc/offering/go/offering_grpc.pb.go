// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package offeringPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfferingClient is the client API for Offering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfferingClient interface {
	SetCourierLiveLocation(ctx context.Context, opts ...grpc.CallOption) (Offering_SetCourierLiveLocationClient, error)
	GetCourierLiveLocation(ctx context.Context, in *GetCourierLiveLocationRequest, opts ...grpc.CallOption) (Offering_GetCourierLiveLocationClient, error)
	CourierSubscriptionOnOffer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Offering_CourierSubscriptionOnOfferClient, error)
	CustomerSubscriptionOnOffer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Offering_CustomerSubscriptionOnOfferClient, error)
	SetCourierLocation(ctx context.Context, in *SetCourierLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNearbyCouriers(ctx context.Context, in *GetNearbyCouriersRequest, opts ...grpc.CallOption) (*GetNearbyCouriersResponse, error)
	HadCustomerRideWithCourier(ctx context.Context, in *HadCustomerRideWithCourierRequest, opts ...grpc.CallOption) (*HadCustomerRideWithCourierResponse, error)
	GetOfferCourierAndCustomer(ctx context.Context, in *GetOfferCourierAndCustomerRequest, opts ...grpc.CallOption) (*GetOfferCourierAndCustomerResponse, error)
}

type offeringClient struct {
	cc grpc.ClientConnInterface
}

func NewOfferingClient(cc grpc.ClientConnInterface) OfferingClient {
	return &offeringClient{cc}
}

func (c *offeringClient) SetCourierLiveLocation(ctx context.Context, opts ...grpc.CallOption) (Offering_SetCourierLiveLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Offering_ServiceDesc.Streams[0], "/artin.couriermanagement.offering.Offering/SetCourierLiveLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &offeringSetCourierLiveLocationClient{stream}
	return x, nil
}

type Offering_SetCourierLiveLocationClient interface {
	Send(*SetCourierLiveLocationRequest) error
	Recv() (*SetCourierLiveLocationResponse, error)
	grpc.ClientStream
}

type offeringSetCourierLiveLocationClient struct {
	grpc.ClientStream
}

func (x *offeringSetCourierLiveLocationClient) Send(m *SetCourierLiveLocationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *offeringSetCourierLiveLocationClient) Recv() (*SetCourierLiveLocationResponse, error) {
	m := new(SetCourierLiveLocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *offeringClient) GetCourierLiveLocation(ctx context.Context, in *GetCourierLiveLocationRequest, opts ...grpc.CallOption) (Offering_GetCourierLiveLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Offering_ServiceDesc.Streams[1], "/artin.couriermanagement.offering.Offering/GetCourierLiveLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &offeringGetCourierLiveLocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Offering_GetCourierLiveLocationClient interface {
	Recv() (*GetCourierLiveLocationResponse, error)
	grpc.ClientStream
}

type offeringGetCourierLiveLocationClient struct {
	grpc.ClientStream
}

func (x *offeringGetCourierLiveLocationClient) Recv() (*GetCourierLiveLocationResponse, error) {
	m := new(GetCourierLiveLocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *offeringClient) CourierSubscriptionOnOffer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Offering_CourierSubscriptionOnOfferClient, error) {
	stream, err := c.cc.NewStream(ctx, &Offering_ServiceDesc.Streams[2], "/artin.couriermanagement.offering.Offering/CourierSubscriptionOnOffer", opts...)
	if err != nil {
		return nil, err
	}
	x := &offeringCourierSubscriptionOnOfferClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Offering_CourierSubscriptionOnOfferClient interface {
	Recv() (*CourierSubscriptionOnOfferResponse, error)
	grpc.ClientStream
}

type offeringCourierSubscriptionOnOfferClient struct {
	grpc.ClientStream
}

func (x *offeringCourierSubscriptionOnOfferClient) Recv() (*CourierSubscriptionOnOfferResponse, error) {
	m := new(CourierSubscriptionOnOfferResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *offeringClient) CustomerSubscriptionOnOffer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Offering_CustomerSubscriptionOnOfferClient, error) {
	stream, err := c.cc.NewStream(ctx, &Offering_ServiceDesc.Streams[3], "/artin.couriermanagement.offering.Offering/CustomerSubscriptionOnOffer", opts...)
	if err != nil {
		return nil, err
	}
	x := &offeringCustomerSubscriptionOnOfferClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Offering_CustomerSubscriptionOnOfferClient interface {
	Recv() (*CustomerSubscriptionOnOfferResponse, error)
	grpc.ClientStream
}

type offeringCustomerSubscriptionOnOfferClient struct {
	grpc.ClientStream
}

func (x *offeringCustomerSubscriptionOnOfferClient) Recv() (*CustomerSubscriptionOnOfferResponse, error) {
	m := new(CustomerSubscriptionOnOfferResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *offeringClient) SetCourierLocation(ctx context.Context, in *SetCourierLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.offering.Offering/SetCourierLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offeringClient) GetNearbyCouriers(ctx context.Context, in *GetNearbyCouriersRequest, opts ...grpc.CallOption) (*GetNearbyCouriersResponse, error) {
	out := new(GetNearbyCouriersResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.offering.Offering/GetNearbyCouriers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offeringClient) HadCustomerRideWithCourier(ctx context.Context, in *HadCustomerRideWithCourierRequest, opts ...grpc.CallOption) (*HadCustomerRideWithCourierResponse, error) {
	out := new(HadCustomerRideWithCourierResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.offering.Offering/HadCustomerRideWithCourier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offeringClient) GetOfferCourierAndCustomer(ctx context.Context, in *GetOfferCourierAndCustomerRequest, opts ...grpc.CallOption) (*GetOfferCourierAndCustomerResponse, error) {
	out := new(GetOfferCourierAndCustomerResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.offering.Offering/GetOfferCourierAndCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfferingServer is the server API for Offering service.
// All implementations must embed UnimplementedOfferingServer
// for forward compatibility
type OfferingServer interface {
	SetCourierLiveLocation(Offering_SetCourierLiveLocationServer) error
	GetCourierLiveLocation(*GetCourierLiveLocationRequest, Offering_GetCourierLiveLocationServer) error
	CourierSubscriptionOnOffer(*emptypb.Empty, Offering_CourierSubscriptionOnOfferServer) error
	CustomerSubscriptionOnOffer(*emptypb.Empty, Offering_CustomerSubscriptionOnOfferServer) error
	SetCourierLocation(context.Context, *SetCourierLocationRequest) (*emptypb.Empty, error)
	GetNearbyCouriers(context.Context, *GetNearbyCouriersRequest) (*GetNearbyCouriersResponse, error)
	HadCustomerRideWithCourier(context.Context, *HadCustomerRideWithCourierRequest) (*HadCustomerRideWithCourierResponse, error)
	GetOfferCourierAndCustomer(context.Context, *GetOfferCourierAndCustomerRequest) (*GetOfferCourierAndCustomerResponse, error)
	mustEmbedUnimplementedOfferingServer()
}

// UnimplementedOfferingServer must be embedded to have forward compatible implementations.
type UnimplementedOfferingServer struct {
}

func (UnimplementedOfferingServer) SetCourierLiveLocation(Offering_SetCourierLiveLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method SetCourierLiveLocation not implemented")
}
func (UnimplementedOfferingServer) GetCourierLiveLocation(*GetCourierLiveLocationRequest, Offering_GetCourierLiveLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCourierLiveLocation not implemented")
}
func (UnimplementedOfferingServer) CourierSubscriptionOnOffer(*emptypb.Empty, Offering_CourierSubscriptionOnOfferServer) error {
	return status.Errorf(codes.Unimplemented, "method CourierSubscriptionOnOffer not implemented")
}
func (UnimplementedOfferingServer) CustomerSubscriptionOnOffer(*emptypb.Empty, Offering_CustomerSubscriptionOnOfferServer) error {
	return status.Errorf(codes.Unimplemented, "method CustomerSubscriptionOnOffer not implemented")
}
func (UnimplementedOfferingServer) SetCourierLocation(context.Context, *SetCourierLocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCourierLocation not implemented")
}
func (UnimplementedOfferingServer) GetNearbyCouriers(context.Context, *GetNearbyCouriersRequest) (*GetNearbyCouriersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearbyCouriers not implemented")
}
func (UnimplementedOfferingServer) HadCustomerRideWithCourier(context.Context, *HadCustomerRideWithCourierRequest) (*HadCustomerRideWithCourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HadCustomerRideWithCourier not implemented")
}
func (UnimplementedOfferingServer) GetOfferCourierAndCustomer(context.Context, *GetOfferCourierAndCustomerRequest) (*GetOfferCourierAndCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfferCourierAndCustomer not implemented")
}
func (UnimplementedOfferingServer) mustEmbedUnimplementedOfferingServer() {}

// UnsafeOfferingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfferingServer will
// result in compilation errors.
type UnsafeOfferingServer interface {
	mustEmbedUnimplementedOfferingServer()
}

func RegisterOfferingServer(s grpc.ServiceRegistrar, srv OfferingServer) {
	s.RegisterService(&Offering_ServiceDesc, srv)
}

func _Offering_SetCourierLiveLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OfferingServer).SetCourierLiveLocation(&offeringSetCourierLiveLocationServer{stream})
}

type Offering_SetCourierLiveLocationServer interface {
	Send(*SetCourierLiveLocationResponse) error
	Recv() (*SetCourierLiveLocationRequest, error)
	grpc.ServerStream
}

type offeringSetCourierLiveLocationServer struct {
	grpc.ServerStream
}

func (x *offeringSetCourierLiveLocationServer) Send(m *SetCourierLiveLocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *offeringSetCourierLiveLocationServer) Recv() (*SetCourierLiveLocationRequest, error) {
	m := new(SetCourierLiveLocationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Offering_GetCourierLiveLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCourierLiveLocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OfferingServer).GetCourierLiveLocation(m, &offeringGetCourierLiveLocationServer{stream})
}

type Offering_GetCourierLiveLocationServer interface {
	Send(*GetCourierLiveLocationResponse) error
	grpc.ServerStream
}

type offeringGetCourierLiveLocationServer struct {
	grpc.ServerStream
}

func (x *offeringGetCourierLiveLocationServer) Send(m *GetCourierLiveLocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Offering_CourierSubscriptionOnOffer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OfferingServer).CourierSubscriptionOnOffer(m, &offeringCourierSubscriptionOnOfferServer{stream})
}

type Offering_CourierSubscriptionOnOfferServer interface {
	Send(*CourierSubscriptionOnOfferResponse) error
	grpc.ServerStream
}

type offeringCourierSubscriptionOnOfferServer struct {
	grpc.ServerStream
}

func (x *offeringCourierSubscriptionOnOfferServer) Send(m *CourierSubscriptionOnOfferResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Offering_CustomerSubscriptionOnOffer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OfferingServer).CustomerSubscriptionOnOffer(m, &offeringCustomerSubscriptionOnOfferServer{stream})
}

type Offering_CustomerSubscriptionOnOfferServer interface {
	Send(*CustomerSubscriptionOnOfferResponse) error
	grpc.ServerStream
}

type offeringCustomerSubscriptionOnOfferServer struct {
	grpc.ServerStream
}

func (x *offeringCustomerSubscriptionOnOfferServer) Send(m *CustomerSubscriptionOnOfferResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Offering_SetCourierLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCourierLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingServer).SetCourierLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.offering.Offering/SetCourierLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingServer).SetCourierLocation(ctx, req.(*SetCourierLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offering_GetNearbyCouriers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearbyCouriersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingServer).GetNearbyCouriers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.offering.Offering/GetNearbyCouriers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingServer).GetNearbyCouriers(ctx, req.(*GetNearbyCouriersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offering_HadCustomerRideWithCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HadCustomerRideWithCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingServer).HadCustomerRideWithCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.offering.Offering/HadCustomerRideWithCourier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingServer).HadCustomerRideWithCourier(ctx, req.(*HadCustomerRideWithCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offering_GetOfferCourierAndCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfferCourierAndCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingServer).GetOfferCourierAndCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.offering.Offering/GetOfferCourierAndCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingServer).GetOfferCourierAndCustomer(ctx, req.(*GetOfferCourierAndCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Offering_ServiceDesc is the grpc.ServiceDesc for Offering service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Offering_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artin.couriermanagement.offering.Offering",
	HandlerType: (*OfferingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCourierLocation",
			Handler:    _Offering_SetCourierLocation_Handler,
		},
		{
			MethodName: "GetNearbyCouriers",
			Handler:    _Offering_GetNearbyCouriers_Handler,
		},
		{
			MethodName: "HadCustomerRideWithCourier",
			Handler:    _Offering_HadCustomerRideWithCourier_Handler,
		},
		{
			MethodName: "GetOfferCourierAndCustomer",
			Handler:    _Offering_GetOfferCourierAndCustomer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetCourierLiveLocation",
			Handler:       _Offering_SetCourierLiveLocation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCourierLiveLocation",
			Handler:       _Offering_GetCourierLiveLocation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CourierSubscriptionOnOffer",
			Handler:       _Offering_CourierSubscriptionOnOffer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CustomerSubscriptionOnOffer",
			Handler:       _Offering_CustomerSubscriptionOnOffer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "offering.proto",
}
