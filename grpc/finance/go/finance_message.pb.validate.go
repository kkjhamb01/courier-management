// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: finance_message.proto

package financePb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonPb "gitlab.artin.ai/backend/courier-management/grpc/common/go"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = commonPb.UserType(0)
)

// Validate checks the field values on SetUpStripeUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetUpStripeUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := commonPb.UserType_name[int32(m.GetUserType())]; !ok {
		return SetUpStripeUserRequestValidationError{
			field:  "UserType",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// SetUpStripeUserRequestValidationError is the validation error returned by
// SetUpStripeUserRequest.Validate if the designated constraints aren't met.
type SetUpStripeUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUpStripeUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUpStripeUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUpStripeUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUpStripeUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUpStripeUserRequestValidationError) ErrorName() string {
	return "SetUpStripeUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetUpStripeUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUpStripeUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUpStripeUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUpStripeUserRequestValidationError{}

// Validate checks the field values on SetUpStripeUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetUpStripeUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *SetUpStripeUserResponse_OnboardingUrl:

		if v, ok := interface{}(m.GetOnboardingUrl()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetUpStripeUserResponseValidationError{
					field:  "OnboardingUrl",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SetUpStripeUserResponse_OnboardingResult:

		if v, ok := interface{}(m.GetOnboardingResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetUpStripeUserResponseValidationError{
					field:  "OnboardingResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SetUpStripeUserResponseValidationError is the validation error returned by
// SetUpStripeUserResponse.Validate if the designated constraints aren't met.
type SetUpStripeUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUpStripeUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUpStripeUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUpStripeUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUpStripeUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUpStripeUserResponseValidationError) ErrorName() string {
	return "SetUpStripeUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetUpStripeUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUpStripeUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUpStripeUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUpStripeUserResponseValidationError{}

// Validate checks the field values on GetClientSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClientSecretRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetClientSecretRequestValidationError is the validation error returned by
// GetClientSecretRequest.Validate if the designated constraints aren't met.
type GetClientSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientSecretRequestValidationError) ErrorName() string {
	return "GetClientSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientSecretRequestValidationError{}

// Validate checks the field values on GetClientSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClientSecretResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClientSecret

	return nil
}

// GetClientSecretResponseValidationError is the validation error returned by
// GetClientSecretResponse.Validate if the designated constraints aren't met.
type GetClientSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientSecretResponseValidationError) ErrorName() string {
	return "GetClientSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientSecretResponseValidationError{}

// Validate checks the field values on GetCustomerPaymentMethodsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerPaymentMethodsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetCustomerPaymentMethodsRequestValidationError is the validation error
// returned by GetCustomerPaymentMethodsRequest.Validate if the designated
// constraints aren't met.
type GetCustomerPaymentMethodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerPaymentMethodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerPaymentMethodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerPaymentMethodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerPaymentMethodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerPaymentMethodsRequestValidationError) ErrorName() string {
	return "GetCustomerPaymentMethodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerPaymentMethodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerPaymentMethodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerPaymentMethodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerPaymentMethodsRequestValidationError{}

// Validate checks the field values on GetCustomerPaymentMethodsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomerPaymentMethodsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPaymentMethod() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCustomerPaymentMethodsResponseValidationError{
					field:  fmt.Sprintf("PaymentMethod[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCustomerPaymentMethodsResponseValidationError is the validation error
// returned by GetCustomerPaymentMethodsResponse.Validate if the designated
// constraints aren't met.
type GetCustomerPaymentMethodsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerPaymentMethodsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerPaymentMethodsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerPaymentMethodsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerPaymentMethodsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerPaymentMethodsResponseValidationError) ErrorName() string {
	return "GetCustomerPaymentMethodsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerPaymentMethodsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerPaymentMethodsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerPaymentMethodsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerPaymentMethodsResponseValidationError{}

// Validate checks the field values on DeleteCustomerPaymentMethodRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteCustomerPaymentMethodRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentMethodId

	return nil
}

// DeleteCustomerPaymentMethodRequestValidationError is the validation error
// returned by DeleteCustomerPaymentMethodRequest.Validate if the designated
// constraints aren't met.
type DeleteCustomerPaymentMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerPaymentMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerPaymentMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerPaymentMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerPaymentMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerPaymentMethodRequestValidationError) ErrorName() string {
	return "DeleteCustomerPaymentMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerPaymentMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerPaymentMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerPaymentMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerPaymentMethodRequestValidationError{}

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPaymentMethodId()) < 3 {
		return CreatePaymentRequestValidationError{
			field:  "PaymentMethodId",
			reason: "value length must be at least 3 runes",
		}
	}

	// no validation rules for RequestId

	// no validation rules for CourierId

	if m.GetPrice() < 0 {
		return CreatePaymentRequestValidationError{
			field:  "Price",
			reason: "value must be greater than or equal to 0",
		}
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 3 {
		return CreatePaymentRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 3 runes",
		}
	}

	return nil
}

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePaymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClientSecret

	return nil
}

// CreatePaymentResponseValidationError is the validation error returned by
// CreatePaymentResponse.Validate if the designated constraints aren't met.
type CreatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponseValidationError) ErrorName() string {
	return "CreatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponseValidationError{}

// Validate checks the field values on SetDefaultPaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetDefaultPaymentMethodRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPaymentMethodId()) < 3 {
		return SetDefaultPaymentMethodRequestValidationError{
			field:  "PaymentMethodId",
			reason: "value length must be at least 3 runes",
		}
	}

	return nil
}

// SetDefaultPaymentMethodRequestValidationError is the validation error
// returned by SetDefaultPaymentMethodRequest.Validate if the designated
// constraints aren't met.
type SetDefaultPaymentMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultPaymentMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultPaymentMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultPaymentMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultPaymentMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultPaymentMethodRequestValidationError) ErrorName() string {
	return "SetDefaultPaymentMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultPaymentMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultPaymentMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultPaymentMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultPaymentMethodRequestValidationError{}

// Validate checks the field values on GetCourierPayableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCourierPayableResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Price

	// no validation rules for Currency

	return nil
}

// GetCourierPayableResponseValidationError is the validation error returned by
// GetCourierPayableResponse.Validate if the designated constraints aren't met.
type GetCourierPayableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierPayableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierPayableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierPayableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierPayableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierPayableResponseValidationError) ErrorName() string {
	return "GetCourierPayableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierPayableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierPayableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierPayableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierPayableResponseValidationError{}

// Validate checks the field values on GetRequestTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRequestTransactionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	return nil
}

// GetRequestTransactionsRequestValidationError is the validation error
// returned by GetRequestTransactionsRequest.Validate if the designated
// constraints aren't met.
type GetRequestTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestTransactionsRequestValidationError) ErrorName() string {
	return "GetRequestTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestTransactionsRequestValidationError{}

// Validate checks the field values on GetRequestTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRequestTransactionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRequestTransactionsResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetRequestTransactionsResponseValidationError is the validation error
// returned by GetRequestTransactionsResponse.Validate if the designated
// constraints aren't met.
type GetRequestTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestTransactionsResponseValidationError) ErrorName() string {
	return "GetRequestTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRequestTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequestTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestTransactionsResponseValidationError{}

// Validate checks the field values on GetTransactionsPaidByCustomerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetTransactionsPaidByCustomerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionsPaidByCustomerRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionsPaidByCustomerRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTransactionsPaidByCustomerRequestValidationError is the validation error
// returned by GetTransactionsPaidByCustomerRequest.Validate if the designated
// constraints aren't met.
type GetTransactionsPaidByCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsPaidByCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsPaidByCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsPaidByCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsPaidByCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsPaidByCustomerRequestValidationError) ErrorName() string {
	return "GetTransactionsPaidByCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsPaidByCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsPaidByCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsPaidByCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsPaidByCustomerRequestValidationError{}

// Validate checks the field values on GetTransactionsPaidByCustomerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetTransactionsPaidByCustomerResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransactionsPaidByCustomerResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetTransactionsPaidByCustomerResponseValidationError is the validation error
// returned by GetTransactionsPaidByCustomerResponse.Validate if the
// designated constraints aren't met.
type GetTransactionsPaidByCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsPaidByCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsPaidByCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsPaidByCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsPaidByCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsPaidByCustomerResponseValidationError) ErrorName() string {
	return "GetTransactionsPaidByCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsPaidByCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsPaidByCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsPaidByCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsPaidByCustomerResponseValidationError{}

// Validate checks the field values on GetTransactionsPaidToCourierRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetTransactionsPaidToCourierRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPageNumber() < 1 {
		return GetTransactionsPaidToCourierRequestValidationError{
			field:  "PageNumber",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetPageSize() < 1 {
		return GetTransactionsPaidToCourierRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionsPaidToCourierRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionsPaidToCourierRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTransactionsPaidToCourierRequestValidationError is the validation error
// returned by GetTransactionsPaidToCourierRequest.Validate if the designated
// constraints aren't met.
type GetTransactionsPaidToCourierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsPaidToCourierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsPaidToCourierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsPaidToCourierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsPaidToCourierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsPaidToCourierRequestValidationError) ErrorName() string {
	return "GetTransactionsPaidToCourierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsPaidToCourierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsPaidToCourierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsPaidToCourierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsPaidToCourierRequestValidationError{}

// Validate checks the field values on GetTransactionsPaidToCourierResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetTransactionsPaidToCourierResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransactionsPaidToCourierResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetTransactionsPaidToCourierResponseValidationError is the validation error
// returned by GetTransactionsPaidToCourierResponse.Validate if the designated
// constraints aren't met.
type GetTransactionsPaidToCourierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsPaidToCourierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsPaidToCourierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsPaidToCourierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsPaidToCourierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsPaidToCourierResponseValidationError) ErrorName() string {
	return "GetTransactionsPaidToCourierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsPaidToCourierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsPaidToCourierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsPaidToCourierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsPaidToCourierResponseValidationError{}

// Validate checks the field values on GetAmountPaidToCourierRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAmountPaidToCourierRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAmountPaidToCourierRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAmountPaidToCourierRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAmountPaidToCourierRequestValidationError is the validation error
// returned by GetAmountPaidToCourierRequest.Validate if the designated
// constraints aren't met.
type GetAmountPaidToCourierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAmountPaidToCourierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAmountPaidToCourierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAmountPaidToCourierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAmountPaidToCourierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAmountPaidToCourierRequestValidationError) ErrorName() string {
	return "GetAmountPaidToCourierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAmountPaidToCourierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAmountPaidToCourierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAmountPaidToCourierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAmountPaidToCourierRequestValidationError{}

// Validate checks the field values on GetAmountPaidToCourierResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAmountPaidToCourierResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Amount

	// no validation rules for Currency

	return nil
}

// GetAmountPaidToCourierResponseValidationError is the validation error
// returned by GetAmountPaidToCourierResponse.Validate if the designated
// constraints aren't met.
type GetAmountPaidToCourierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAmountPaidToCourierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAmountPaidToCourierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAmountPaidToCourierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAmountPaidToCourierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAmountPaidToCourierResponseValidationError) ErrorName() string {
	return "GetAmountPaidToCourierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAmountPaidToCourierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAmountPaidToCourierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAmountPaidToCourierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAmountPaidToCourierResponseValidationError{}

// Validate checks the field values on
// GetTransactionsPaidByCustomerResponse_Item with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetTransactionsPaidByCustomerResponse_Item) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	// no validation rules for Amount

	// no validation rules for Currency

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionsPaidByCustomerResponse_ItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTransactionsPaidByCustomerResponse_ItemValidationError is the validation
// error returned by GetTransactionsPaidByCustomerResponse_Item.Validate if
// the designated constraints aren't met.
type GetTransactionsPaidByCustomerResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsPaidByCustomerResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsPaidByCustomerResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsPaidByCustomerResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsPaidByCustomerResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsPaidByCustomerResponse_ItemValidationError) ErrorName() string {
	return "GetTransactionsPaidByCustomerResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsPaidByCustomerResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsPaidByCustomerResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsPaidByCustomerResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsPaidByCustomerResponse_ItemValidationError{}
