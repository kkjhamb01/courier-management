// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: finance_model.proto

package financePb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _finance_model_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on OfferCancelledEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OfferCancelledEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetOfferId()); err != nil {
		return OfferCancelledEventValidationError{
			field:  "OfferId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetCourierId()); err != nil {
		return OfferCancelledEventValidationError{
			field:  "CourierId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for CancelReason

	return nil
}

func (m *OfferCancelledEvent) _validateUuid(uuid string) error {
	if matched := _finance_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OfferCancelledEventValidationError is the validation error returned by
// OfferCancelledEvent.Validate if the designated constraints aren't met.
type OfferCancelledEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferCancelledEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferCancelledEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferCancelledEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferCancelledEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferCancelledEventValidationError) ErrorName() string {
	return "OfferCancelledEventValidationError"
}

// Error satisfies the builtin error interface
func (e OfferCancelledEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferCancelledEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferCancelledEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferCancelledEventValidationError{}

// Validate checks the field values on OfferAcceptedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OfferAcceptedEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetOfferId()); err != nil {
		return OfferAcceptedEventValidationError{
			field:  "OfferId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetCourierId()); err != nil {
		return OfferAcceptedEventValidationError{
			field:  "CourierId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Desc

	return nil
}

func (m *OfferAcceptedEvent) _validateUuid(uuid string) error {
	if matched := _finance_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OfferAcceptedEventValidationError is the validation error returned by
// OfferAcceptedEvent.Validate if the designated constraints aren't met.
type OfferAcceptedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferAcceptedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferAcceptedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferAcceptedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferAcceptedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferAcceptedEventValidationError) ErrorName() string {
	return "OfferAcceptedEventValidationError"
}

// Error satisfies the builtin error interface
func (e OfferAcceptedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferAcceptedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferAcceptedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferAcceptedEventValidationError{}

// Validate checks the field values on OfferRejectedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OfferRejectedEvent) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetOfferId()); err != nil {
		return OfferRejectedEventValidationError{
			field:  "OfferId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetCourierId()); err != nil {
		return OfferRejectedEventValidationError{
			field:  "CourierId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Desc

	return nil
}

func (m *OfferRejectedEvent) _validateUuid(uuid string) error {
	if matched := _finance_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OfferRejectedEventValidationError is the validation error returned by
// OfferRejectedEvent.Validate if the designated constraints aren't met.
type OfferRejectedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferRejectedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferRejectedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferRejectedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferRejectedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferRejectedEventValidationError) ErrorName() string {
	return "OfferRejectedEventValidationError"
}

// Error satisfies the builtin error interface
func (e OfferRejectedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferRejectedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferRejectedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferRejectedEventValidationError{}

// Validate checks the field values on PaymentMethod with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PaymentMethod) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Type

	if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMethodValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PaymentMethodValidationError is the validation error returned by
// PaymentMethod.Validate if the designated constraints aren't met.
type PaymentMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodValidationError) ErrorName() string { return "PaymentMethodValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodValidationError{}

// Validate checks the field values on AccountRole with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AccountRole) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return AccountRoleValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		return AccountRoleValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if v, ok := interface{}(m.GetFromDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountRoleValidationError{
				field:  "FromDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountRoleValidationError{
				field:  "ToDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Type

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountRoleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountRoleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *AccountRole) _validateUuid(uuid string) error {
	if matched := _finance_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AccountRoleValidationError is the validation error returned by
// AccountRole.Validate if the designated constraints aren't met.
type AccountRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountRoleValidationError) ErrorName() string { return "AccountRoleValidationError" }

// Error satisfies the builtin error interface
func (e AccountRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountRoleValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Account) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return AccountValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if len(m.GetAccountRoles()) < 1 {
		return AccountValidationError{
			field:  "AccountRoles",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetAccountRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountValidationError{
					field:  fmt.Sprintf("AccountRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	// no validation rules for Type

	for idx, item := range m.GetPaymentMethods() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountValidationError{
					field:  fmt.Sprintf("PaymentMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DefaultPaymentMethod

	// no validation rules for Balance

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *Account) _validateUuid(uuid string) error {
	if matched := _finance_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Transaction) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return TransactionValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Status

	// no validation rules for PaymentMethod

	if v, ok := interface{}(m.GetSourceAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "SourceAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTargetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "TargetAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestId

	// no validation rules for Description

	// no validation rules for TargetBalance

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *Transaction) _validateUuid(uuid string) error {
	if matched := _finance_model_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on OnboardingUrl with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OnboardingUrl) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnboardingUrlValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnboardingUrlValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RefreshUrl

	// no validation rules for ReturnUrl

	return nil
}

// OnboardingUrlValidationError is the validation error returned by
// OnboardingUrl.Validate if the designated constraints aren't met.
type OnboardingUrlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnboardingUrlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnboardingUrlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnboardingUrlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnboardingUrlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnboardingUrlValidationError) ErrorName() string { return "OnboardingUrlValidationError" }

// Error satisfies the builtin error interface
func (e OnboardingUrlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnboardingUrl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnboardingUrlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnboardingUrlValidationError{}

// Validate checks the field values on OnboardingResult with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OnboardingResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Successful

	// no validation rules for Desc

	return nil
}

// OnboardingResultValidationError is the validation error returned by
// OnboardingResult.Validate if the designated constraints aren't met.
type OnboardingResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnboardingResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnboardingResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnboardingResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnboardingResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnboardingResultValidationError) ErrorName() string { return "OnboardingResultValidationError" }

// Error satisfies the builtin error interface
func (e OnboardingResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnboardingResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnboardingResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnboardingResultValidationError{}

// Validate checks the field values on PaymentMethod_Card with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PaymentMethod_Card) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Brand

	// no validation rules for Checks

	// no validation rules for Country

	// no validation rules for ExpMonth

	// no validation rules for ExpYear

	// no validation rules for Fingerprint

	// no validation rules for Funding

	// no validation rules for Last4

	// no validation rules for Networks

	// no validation rules for ThreeDSecureUsage

	// no validation rules for Wallet

	return nil
}

// PaymentMethod_CardValidationError is the validation error returned by
// PaymentMethod_Card.Validate if the designated constraints aren't met.
type PaymentMethod_CardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethod_CardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethod_CardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethod_CardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethod_CardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethod_CardValidationError) ErrorName() string {
	return "PaymentMethod_CardValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMethod_CardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethod_Card.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethod_CardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethod_CardValidationError{}
