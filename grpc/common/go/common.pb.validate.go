// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common.proto

package commonPb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _common_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Courier with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Courier) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return CourierValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for VehicleType

	return nil
}

func (m *Courier) _validateUuid(uuid string) error {
	if matched := _common_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CourierValidationError is the validation error returned by Courier.Validate
// if the designated constraints aren't met.
type CourierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourierValidationError) ErrorName() string { return "CourierValidationError" }

// Error satisfies the builtin error interface
func (e CourierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourierValidationError{}

// Validate checks the field values on CourierLocation with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CourierLocation) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCourier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourierLocationValidationError{
				field:  "Courier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourierLocationValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CourierLocationValidationError is the validation error returned by
// CourierLocation.Validate if the designated constraints aren't met.
type CourierLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourierLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourierLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourierLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourierLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourierLocationValidationError) ErrorName() string { return "CourierLocationValidationError" }

// Error satisfies the builtin error interface
func (e CourierLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourierLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourierLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourierLocationValidationError{}

// Validate checks the field values on CourierETA with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CourierETA) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCourier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourierETAValidationError{
				field:  "Courier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourierETAValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Meters

	return nil
}

// CourierETAValidationError is the validation error returned by
// CourierETA.Validate if the designated constraints aren't met.
type CourierETAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourierETAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourierETAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourierETAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourierETAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourierETAValidationError) ErrorName() string { return "CourierETAValidationError" }

// Error satisfies the builtin error interface
func (e CourierETAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourierETA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourierETAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourierETAValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Location) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLat(); val < -90 || val > 90 {
		return LocationValidationError{
			field:  "Lat",
			reason: "value must be inside range [-90, 90]",
		}
	}

	if val := m.GetLon(); val < -180 || val > 180 {
		return LocationValidationError{
			field:  "Lon",
			reason: "value must be inside range [-180, 180]",
		}
	}

	return nil
}

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

// Validate checks the field values on LocationRange with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LocationRange) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLat(); val < -90 || val > 90 {
		return LocationRangeValidationError{
			field:  "Lat",
			reason: "value must be inside range [-90, 90]",
		}
	}

	if val := m.GetLon(); val < -180 || val > 180 {
		return LocationRangeValidationError{
			field:  "Lon",
			reason: "value must be inside range [-180, 180]",
		}
	}

	// no validation rules for Range

	return nil
}

// LocationRangeValidationError is the validation error returned by
// LocationRange.Validate if the designated constraints aren't met.
type LocationRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationRangeValidationError) ErrorName() string { return "LocationRangeValidationError" }

// Error satisfies the builtin error interface
func (e LocationRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationRangeValidationError{}

// Validate checks the field values on TimeRange with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TimeRange) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TimeRangeValidationError is the validation error returned by
// TimeRange.Validate if the designated constraints aren't met.
type TimeRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeRangeValidationError) ErrorName() string { return "TimeRangeValidationError" }

// Error satisfies the builtin error interface
func (e TimeRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeRangeValidationError{}
