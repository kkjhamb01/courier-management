// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pricingPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PricingClient is the client API for Pricing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricingClient interface {
	CalculateCourierPrice(ctx context.Context, in *CalculateCourierPriceRequest, opts ...grpc.CallOption) (*CalculateCourierPriceResponse, error)
	ReviewCourierPrice(ctx context.Context, in *ReviewCourierPriceRequest, opts ...grpc.CallOption) (*ReviewCourierPriceResponse, error)
}

type pricingClient struct {
	cc grpc.ClientConnInterface
}

func NewPricingClient(cc grpc.ClientConnInterface) PricingClient {
	return &pricingClient{cc}
}

func (c *pricingClient) CalculateCourierPrice(ctx context.Context, in *CalculateCourierPriceRequest, opts ...grpc.CallOption) (*CalculateCourierPriceResponse, error) {
	out := new(CalculateCourierPriceResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.pricing.Pricing/CalculateCourierPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingClient) ReviewCourierPrice(ctx context.Context, in *ReviewCourierPriceRequest, opts ...grpc.CallOption) (*ReviewCourierPriceResponse, error) {
	out := new(ReviewCourierPriceResponse)
	err := c.cc.Invoke(ctx, "/artin.couriermanagement.pricing.Pricing/ReviewCourierPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PricingServer is the server API for Pricing service.
// All implementations must embed UnimplementedPricingServer
// for forward compatibility
type PricingServer interface {
	CalculateCourierPrice(context.Context, *CalculateCourierPriceRequest) (*CalculateCourierPriceResponse, error)
	ReviewCourierPrice(context.Context, *ReviewCourierPriceRequest) (*ReviewCourierPriceResponse, error)
	mustEmbedUnimplementedPricingServer()
}

// UnimplementedPricingServer must be embedded to have forward compatible implementations.
type UnimplementedPricingServer struct {
}

func (UnimplementedPricingServer) CalculateCourierPrice(context.Context, *CalculateCourierPriceRequest) (*CalculateCourierPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCourierPrice not implemented")
}
func (UnimplementedPricingServer) ReviewCourierPrice(context.Context, *ReviewCourierPriceRequest) (*ReviewCourierPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewCourierPrice not implemented")
}
func (UnimplementedPricingServer) mustEmbedUnimplementedPricingServer() {}

// UnsafePricingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricingServer will
// result in compilation errors.
type UnsafePricingServer interface {
	mustEmbedUnimplementedPricingServer()
}

func RegisterPricingServer(s grpc.ServiceRegistrar, srv PricingServer) {
	s.RegisterService(&Pricing_ServiceDesc, srv)
}

func _Pricing_CalculateCourierPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCourierPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServer).CalculateCourierPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.pricing.Pricing/CalculateCourierPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServer).CalculateCourierPrice(ctx, req.(*CalculateCourierPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricing_ReviewCourierPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewCourierPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServer).ReviewCourierPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artin.couriermanagement.pricing.Pricing/ReviewCourierPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServer).ReviewCourierPrice(ctx, req.(*ReviewCourierPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pricing_ServiceDesc is the grpc.ServiceDesc for Pricing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pricing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artin.couriermanagement.pricing.Pricing",
	HandlerType: (*PricingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateCourierPrice",
			Handler:    _Pricing_CalculateCourierPrice_Handler,
		},
		{
			MethodName: "ReviewCourierPrice",
			Handler:    _Pricing_ReviewCourierPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pricing.proto",
}
