// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: party.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on SearchMotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in SearchMotRequestMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *SearchMotRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetRegistrationNumber()) < 1 {
		err := SearchMotRequestValidationError{
			field:  "RegistrationNumber",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchMotRequestMultiError(errors)
	}
	return nil
}

// SearchMotRequestMultiError is an error wrapping multiple validation errors
// returned by SearchMotRequest.Validate(true) if the designated constraints
// aren't met.
type SearchMotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMotRequestMultiError) AllErrors() []error { return m }

// SearchMotRequestValidationError is the validation error returned by
// SearchMotRequest.Validate if the designated constraints aren't met.
type SearchMotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMotRequestValidationError) ErrorName() string { return "SearchMotRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchMotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMotRequestValidationError{}

// Validate checks the field values on SearchMotResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in SearchMotResponseMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *SearchMotResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetMot()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = SearchMotResponseValidationError{
				field:  "Mot",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return SearchMotResponseMultiError(errors)
	}
	return nil
}

// SearchMotResponseMultiError is an error wrapping multiple validation errors
// returned by SearchMotResponse.Validate(true) if the designated constraints
// aren't met.
type SearchMotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMotResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMotResponseMultiError) AllErrors() []error { return m }

// SearchMotResponseValidationError is the validation error returned by
// SearchMotResponse.Validate if the designated constraints aren't met.
type SearchMotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMotResponseValidationError) ErrorName() string {
	return "SearchMotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchMotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMotResponseValidationError{}

// Validate checks the field values on GetCourierAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetCourierAccountRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetCourierAccountRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return GetCourierAccountRequestMultiError(errors)
	}
	return nil
}

// GetCourierAccountRequestMultiError is an error wrapping multiple validation
// errors returned by GetCourierAccountRequest.Validate(true) if the
// designated constraints aren't met.
type GetCourierAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierAccountRequestMultiError) AllErrors() []error { return m }

// GetCourierAccountRequestValidationError is the validation error returned by
// GetCourierAccountRequest.Validate if the designated constraints aren't met.
type GetCourierAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierAccountRequestValidationError) ErrorName() string {
	return "GetCourierAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierAccountRequestValidationError{}

// Validate checks the field values on GetCourierAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetCourierAccountResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetCourierAccountResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetCourierAccountResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetCourierAccountResponseMultiError(errors)
	}
	return nil
}

// GetCourierAccountResponseMultiError is an error wrapping multiple validation
// errors returned by GetCourierAccountResponse.Validate(true) if the
// designated constraints aren't met.
type GetCourierAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierAccountResponseMultiError) AllErrors() []error { return m }

// GetCourierAccountResponseValidationError is the validation error returned by
// GetCourierAccountResponse.Validate if the designated constraints aren't met.
type GetCourierAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierAccountResponseValidationError) ErrorName() string {
	return "GetCourierAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierAccountResponseValidationError{}

// Validate checks the field values on FindCourierAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in FindCourierAccountsRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *FindCourierAccountsRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	switch m.Filter.(type) {

	case *FindCourierAccountsRequest_UserId:
		// no validation rules for UserId

	case *FindCourierAccountsRequest_PhoneNumber:
		// no validation rules for PhoneNumber

	case *FindCourierAccountsRequest_Email:
		// no validation rules for Email

	case *FindCourierAccountsRequest_Name:
		// no validation rules for Name

	default:
		err := FindCourierAccountsRequestValidationError{
			field:  "Filter",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return FindCourierAccountsRequestMultiError(errors)
	}
	return nil
}

// FindCourierAccountsRequestMultiError is an error wrapping multiple
// validation errors returned by FindCourierAccountsRequest.Validate(true) if
// the designated constraints aren't met.
type FindCourierAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCourierAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCourierAccountsRequestMultiError) AllErrors() []error { return m }

// FindCourierAccountsRequestValidationError is the validation error returned
// by FindCourierAccountsRequest.Validate if the designated constraints aren't met.
type FindCourierAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCourierAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCourierAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCourierAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCourierAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCourierAccountsRequestValidationError) ErrorName() string {
	return "FindCourierAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindCourierAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCourierAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCourierAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCourierAccountsRequestValidationError{}

// Validate checks the field values on FindCourierAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in FindCourierAccountsResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *FindCourierAccountsResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = FindCourierAccountsResponseValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return FindCourierAccountsResponseMultiError(errors)
	}
	return nil
}

// FindCourierAccountsResponseMultiError is an error wrapping multiple
// validation errors returned by FindCourierAccountsResponse.Validate(true) if
// the designated constraints aren't met.
type FindCourierAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCourierAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCourierAccountsResponseMultiError) AllErrors() []error { return m }

// FindCourierAccountsResponseValidationError is the validation error returned
// by FindCourierAccountsResponse.Validate if the designated constraints
// aren't met.
type FindCourierAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCourierAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCourierAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCourierAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCourierAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCourierAccountsResponseValidationError) ErrorName() string {
	return "FindCourierAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCourierAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCourierAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCourierAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCourierAccountsResponseValidationError{}

// Validate checks the field values on CourierProfile with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// CourierProfileMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *CourierProfile) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for PhoneNumber

	// no validation rules for Email

	// no validation rules for BirthDate

	// no validation rules for TransportType

	// no validation rules for Citizen

	// no validation rules for TransportSize

	for idx, item := range m.GetAuthorizedClaims() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = CourierProfileValidationError{
					field:  fmt.Sprintf("AuthorizedClaims[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return CourierProfileMultiError(errors)
	}
	return nil
}

// CourierProfileMultiError is an error wrapping multiple validation errors
// returned by CourierProfile.Validate(true) if the designated constraints
// aren't met.
type CourierProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourierProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourierProfileMultiError) AllErrors() []error { return m }

// CourierProfileValidationError is the validation error returned by
// CourierProfile.Validate if the designated constraints aren't met.
type CourierProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourierProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourierProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourierProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourierProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourierProfileValidationError) ErrorName() string { return "CourierProfileValidationError" }

// Error satisfies the builtin error interface
func (e CourierProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourierProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourierProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourierProfileValidationError{}

// Validate checks the field values on AuthorizedClaim with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in AuthorizedClaimMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *AuthorizedClaim) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identifier

	// no validation rules for Type

	if len(errors) > 0 {
		return AuthorizedClaimMultiError(errors)
	}
	return nil
}

// AuthorizedClaimMultiError is an error wrapping multiple validation errors
// returned by AuthorizedClaim.Validate(true) if the designated constraints
// aren't met.
type AuthorizedClaimMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizedClaimMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizedClaimMultiError) AllErrors() []error { return m }

// AuthorizedClaimValidationError is the validation error returned by
// AuthorizedClaim.Validate if the designated constraints aren't met.
type AuthorizedClaimValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizedClaimValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizedClaimValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizedClaimValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizedClaimValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizedClaimValidationError) ErrorName() string { return "AuthorizedClaimValidationError" }

// Error satisfies the builtin error interface
func (e AuthorizedClaimValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizedClaim.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizedClaimValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizedClaimValidationError{}

// Validate checks the field values on CreateCourierAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateCourierAccountRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *CreateCourierAccountRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetFirstName()) < 1 {
		err := CreateCourierAccountRequestValidationError{
			field:  "FirstName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLastName()) < 1 {
		err := CreateCourierAccountRequestValidationError{
			field:  "LastName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateCourierAccountRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BirthDate

	// no validation rules for Citizen

	if len(errors) > 0 {
		return CreateCourierAccountRequestMultiError(errors)
	}
	return nil
}

func (m *CreateCourierAccountRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateCourierAccountRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateCourierAccountRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCourierAccountRequest.Validate(true) if
// the designated constraints aren't met.
type CreateCourierAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCourierAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCourierAccountRequestMultiError) AllErrors() []error { return m }

// CreateCourierAccountRequestValidationError is the validation error returned
// by CreateCourierAccountRequest.Validate if the designated constraints
// aren't met.
type CreateCourierAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourierAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourierAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourierAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourierAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourierAccountRequestValidationError) ErrorName() string {
	return "CreateCourierAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourierAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourierAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourierAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourierAccountRequestValidationError{}

// Validate checks the field values on CreateCourierAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateCourierAccountResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *CreateCourierAccountResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCourierAccountResponseMultiError(errors)
	}
	return nil
}

// CreateCourierAccountResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCourierAccountResponse.Validate(true)
// if the designated constraints aren't met.
type CreateCourierAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCourierAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCourierAccountResponseMultiError) AllErrors() []error { return m }

// CreateCourierAccountResponseValidationError is the validation error returned
// by CreateCourierAccountResponse.Validate if the designated constraints
// aren't met.
type CreateCourierAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourierAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourierAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourierAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourierAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourierAccountResponseValidationError) ErrorName() string {
	return "CreateCourierAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourierAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourierAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourierAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourierAccountResponseValidationError{}

// Validate checks the field values on UpdateCourierAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateCourierAccountRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateCourierAccountRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for BirthDate

	// no validation rules for TransportationType

	// no validation rules for Citizen

	// no validation rules for TransportSize

	if len(errors) > 0 {
		return UpdateCourierAccountRequestMultiError(errors)
	}
	return nil
}

// UpdateCourierAccountRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCourierAccountRequest.Validate(true) if
// the designated constraints aren't met.
type UpdateCourierAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourierAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourierAccountRequestMultiError) AllErrors() []error { return m }

// UpdateCourierAccountRequestValidationError is the validation error returned
// by UpdateCourierAccountRequest.Validate if the designated constraints
// aren't met.
type UpdateCourierAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourierAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourierAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourierAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourierAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourierAccountRequestValidationError) ErrorName() string {
	return "UpdateCourierAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourierAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourierAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourierAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourierAccountRequestValidationError{}

// Validate checks the field values on UpdateCourierAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateCourierAccountResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateCourierAccountResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCourierAccountResponseMultiError(errors)
	}
	return nil
}

// UpdateCourierAccountResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCourierAccountResponse.Validate(true)
// if the designated constraints aren't met.
type UpdateCourierAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourierAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourierAccountResponseMultiError) AllErrors() []error { return m }

// UpdateCourierAccountResponseValidationError is the validation error returned
// by UpdateCourierAccountResponse.Validate if the designated constraints
// aren't met.
type UpdateCourierAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourierAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourierAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourierAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourierAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourierAccountResponseValidationError) ErrorName() string {
	return "UpdateCourierAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourierAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourierAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourierAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourierAccountResponseValidationError{}

// Validate checks the field values on UpdateCourierPhoneNumberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateCourierPhoneNumberRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateCourierPhoneNumberRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetNewAccessToken()) < 1 {
		err := UpdateCourierPhoneNumberRequestValidationError{
			field:  "NewAccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCourierPhoneNumberRequestMultiError(errors)
	}
	return nil
}

// UpdateCourierPhoneNumberRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCourierPhoneNumberRequest.Validate(true) if the designated
// constraints aren't met.
type UpdateCourierPhoneNumberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourierPhoneNumberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourierPhoneNumberRequestMultiError) AllErrors() []error { return m }

// UpdateCourierPhoneNumberRequestValidationError is the validation error
// returned by UpdateCourierPhoneNumberRequest.Validate if the designated
// constraints aren't met.
type UpdateCourierPhoneNumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourierPhoneNumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourierPhoneNumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourierPhoneNumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourierPhoneNumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourierPhoneNumberRequestValidationError) ErrorName() string {
	return "UpdateCourierPhoneNumberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourierPhoneNumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourierPhoneNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourierPhoneNumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourierPhoneNumberRequestValidationError{}

// Validate checks the field values on UpdateCourierPhoneNumberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in UpdateCourierPhoneNumberResponseMultiError, or
// nil if none found. Otherwise, only the first error is returned, if any.
func (m *UpdateCourierPhoneNumberResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCourierPhoneNumberResponseMultiError(errors)
	}
	return nil
}

// UpdateCourierPhoneNumberResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCourierPhoneNumberResponse.Validate(true) if the designated
// constraints aren't met.
type UpdateCourierPhoneNumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourierPhoneNumberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourierPhoneNumberResponseMultiError) AllErrors() []error { return m }

// UpdateCourierPhoneNumberResponseValidationError is the validation error
// returned by UpdateCourierPhoneNumberResponse.Validate if the designated
// constraints aren't met.
type UpdateCourierPhoneNumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourierPhoneNumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourierPhoneNumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourierPhoneNumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourierPhoneNumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourierPhoneNumberResponseValidationError) ErrorName() string {
	return "UpdateCourierPhoneNumberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourierPhoneNumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourierPhoneNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourierPhoneNumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourierPhoneNumberResponseValidationError{}

// Validate checks the field values on IDCard with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// IDCardMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *IDCard) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Number

	// no validation rules for ExpirationDate

	// no validation rules for IssuePlace

	// no validation rules for Type

	for idx, item := range m.GetDocumentIds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = IDCardValidationError{
					field:  fmt.Sprintf("DocumentIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return IDCardMultiError(errors)
	}
	return nil
}

// IDCardMultiError is an error wrapping multiple validation errors returned by
// IDCard.Validate(true) if the designated constraints aren't met.
type IDCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDCardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDCardMultiError) AllErrors() []error { return m }

// IDCardValidationError is the validation error returned by IDCard.Validate if
// the designated constraints aren't met.
type IDCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDCardValidationError) ErrorName() string { return "IDCardValidationError" }

// Error satisfies the builtin error interface
func (e IDCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDCardValidationError{}

// Validate checks the field values on DrivingLicense with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// DrivingLicenseMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *DrivingLicense) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DrivingLicenseNumber

	// no validation rules for ExpirationDate

	for idx, item := range m.GetDocumentIds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = DrivingLicenseValidationError{
					field:  fmt.Sprintf("DocumentIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return DrivingLicenseMultiError(errors)
	}
	return nil
}

// DrivingLicenseMultiError is an error wrapping multiple validation errors
// returned by DrivingLicense.Validate(true) if the designated constraints
// aren't met.
type DrivingLicenseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DrivingLicenseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DrivingLicenseMultiError) AllErrors() []error { return m }

// DrivingLicenseValidationError is the validation error returned by
// DrivingLicense.Validate if the designated constraints aren't met.
type DrivingLicenseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrivingLicenseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrivingLicenseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrivingLicenseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrivingLicenseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrivingLicenseValidationError) ErrorName() string { return "DrivingLicenseValidationError" }

// Error satisfies the builtin error interface
func (e DrivingLicenseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrivingLicense.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrivingLicenseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrivingLicenseValidationError{}

// Validate checks the field values on DriverBackground with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in DriverBackgroundMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *DriverBackground) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NationalInsuranceNumber

	// no validation rules for UploadDbsLater

	for idx, item := range m.GetDocumentIds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = DriverBackgroundValidationError{
					field:  fmt.Sprintf("DocumentIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return DriverBackgroundMultiError(errors)
	}
	return nil
}

// DriverBackgroundMultiError is an error wrapping multiple validation errors
// returned by DriverBackground.Validate(true) if the designated constraints
// aren't met.
type DriverBackgroundMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DriverBackgroundMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DriverBackgroundMultiError) AllErrors() []error { return m }

// DriverBackgroundValidationError is the validation error returned by
// DriverBackground.Validate if the designated constraints aren't met.
type DriverBackgroundValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DriverBackgroundValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DriverBackgroundValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DriverBackgroundValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DriverBackgroundValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DriverBackgroundValidationError) ErrorName() string { return "DriverBackgroundValidationError" }

// Error satisfies the builtin error interface
func (e DriverBackgroundValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDriverBackground.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DriverBackgroundValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DriverBackgroundValidationError{}

// Validate checks the field values on ResidenceCard with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// ResidenceCardMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *ResidenceCard) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for ExpirationDate

	// no validation rules for IssueDate

	for idx, item := range m.GetDocumentIds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = ResidenceCardValidationError{
					field:  fmt.Sprintf("DocumentIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return ResidenceCardMultiError(errors)
	}
	return nil
}

// ResidenceCardMultiError is an error wrapping multiple validation errors
// returned by ResidenceCard.Validate(true) if the designated constraints
// aren't met.
type ResidenceCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResidenceCardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResidenceCardMultiError) AllErrors() []error { return m }

// ResidenceCardValidationError is the validation error returned by
// ResidenceCard.Validate if the designated constraints aren't met.
type ResidenceCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResidenceCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResidenceCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResidenceCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResidenceCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResidenceCardValidationError) ErrorName() string { return "ResidenceCardValidationError" }

// Error satisfies the builtin error interface
func (e ResidenceCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResidenceCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResidenceCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResidenceCardValidationError{}

// Validate checks the field values on BankAccount with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// BankAccountMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *BankAccount) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BankName

	// no validation rules for AccountNumber

	// no validation rules for AccountHolderName

	// no validation rules for SortCode

	for idx, item := range m.GetDocumentIds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = BankAccountValidationError{
					field:  fmt.Sprintf("DocumentIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return BankAccountMultiError(errors)
	}
	return nil
}

// BankAccountMultiError is an error wrapping multiple validation errors
// returned by BankAccount.Validate(true) if the designated constraints aren't met.
type BankAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BankAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BankAccountMultiError) AllErrors() []error { return m }

// BankAccountValidationError is the validation error returned by
// BankAccount.Validate if the designated constraints aren't met.
type BankAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankAccountValidationError) ErrorName() string { return "BankAccountValidationError" }

// Error satisfies the builtin error interface
func (e BankAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBankAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankAccountValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// AddressMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *Address) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Street

	// no validation rules for Building

	// no validation rules for City

	// no validation rules for County

	// no validation rules for PostCode

	// no validation rules for AddressDetails

	for idx, item := range m.GetDocumentIds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = AddressValidationError{
					field:  fmt.Sprintf("DocumentIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}
	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.Validate(true) if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on Mot with the rules defined in the proto
// definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// MotMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *Mot) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistrationNumber

	// no validation rules for Co2Emissions

	// no validation rules for EngineCapacity

	// no validation rules for EuroStatus

	// no validation rules for MarkedForExport

	// no validation rules for FuelType

	// no validation rules for MotStatus

	// no validation rules for RevenueWeight

	// no validation rules for Colour

	// no validation rules for Make

	// no validation rules for TypeApproval

	// no validation rules for YearOfManufacture

	// no validation rules for TaxDueDate

	// no validation rules for TaxStatus

	// no validation rules for DateOfLastV5CIssued

	// no validation rules for RealDrivingEmissions

	// no validation rules for Wheelplan

	// no validation rules for MonthOfFirstRegistration

	if len(errors) > 0 {
		return MotMultiError(errors)
	}
	return nil
}

// MotMultiError is an error wrapping multiple validation errors returned by
// Mot.Validate(true) if the designated constraints aren't met.
type MotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MotMultiError) AllErrors() []error { return m }

// MotValidationError is the validation error returned by Mot.Validate if the
// designated constraints aren't met.
type MotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MotValidationError) ErrorName() string { return "MotValidationError" }

// Error satisfies the builtin error interface
func (e MotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MotValidationError{}

// Validate checks the field values on UpdateProfileAdditionalInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in UpdateProfileAdditionalInfoRequestMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *UpdateProfileAdditionalInfoRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	switch m.Info.(type) {

	case *UpdateProfileAdditionalInfoRequest_IdCard:

		if v, ok := interface{}(m.GetIdCard()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = UpdateProfileAdditionalInfoRequestValidationError{
					field:  "IdCard",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *UpdateProfileAdditionalInfoRequest_DrivingLicense:

		if v, ok := interface{}(m.GetDrivingLicense()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = UpdateProfileAdditionalInfoRequestValidationError{
					field:  "DrivingLicense",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *UpdateProfileAdditionalInfoRequest_DriverBackground:

		if v, ok := interface{}(m.GetDriverBackground()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = UpdateProfileAdditionalInfoRequestValidationError{
					field:  "DriverBackground",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *UpdateProfileAdditionalInfoRequest_ResidenceCard:

		if v, ok := interface{}(m.GetResidenceCard()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = UpdateProfileAdditionalInfoRequestValidationError{
					field:  "ResidenceCard",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *UpdateProfileAdditionalInfoRequest_BankAccount:

		if v, ok := interface{}(m.GetBankAccount()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = UpdateProfileAdditionalInfoRequestValidationError{
					field:  "BankAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *UpdateProfileAdditionalInfoRequest_Address:

		if v, ok := interface{}(m.GetAddress()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = UpdateProfileAdditionalInfoRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *UpdateProfileAdditionalInfoRequest_Mot:

		if v, ok := interface{}(m.GetMot()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = UpdateProfileAdditionalInfoRequestValidationError{
					field:  "Mot",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	default:
		err := UpdateProfileAdditionalInfoRequestValidationError{
			field:  "Info",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return UpdateProfileAdditionalInfoRequestMultiError(errors)
	}
	return nil
}

// UpdateProfileAdditionalInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProfileAdditionalInfoRequest.Validate(true) if the designated
// constraints aren't met.
type UpdateProfileAdditionalInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileAdditionalInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileAdditionalInfoRequestMultiError) AllErrors() []error { return m }

// UpdateProfileAdditionalInfoRequestValidationError is the validation error
// returned by UpdateProfileAdditionalInfoRequest.Validate if the designated
// constraints aren't met.
type UpdateProfileAdditionalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileAdditionalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileAdditionalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileAdditionalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileAdditionalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileAdditionalInfoRequestValidationError) ErrorName() string {
	return "UpdateProfileAdditionalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileAdditionalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileAdditionalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileAdditionalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileAdditionalInfoRequestValidationError{}

// Validate checks the field values on UpdateProfileAdditionalInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in UpdateProfileAdditionalInfoResponseMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *UpdateProfileAdditionalInfoResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProfileAdditionalInfoResponseMultiError(errors)
	}
	return nil
}

// UpdateProfileAdditionalInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProfileAdditionalInfoResponse.Validate(true) if the designated
// constraints aren't met.
type UpdateProfileAdditionalInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileAdditionalInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileAdditionalInfoResponseMultiError) AllErrors() []error { return m }

// UpdateProfileAdditionalInfoResponseValidationError is the validation error
// returned by UpdateProfileAdditionalInfoResponse.Validate if the designated
// constraints aren't met.
type UpdateProfileAdditionalInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileAdditionalInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileAdditionalInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileAdditionalInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileAdditionalInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileAdditionalInfoResponseValidationError) ErrorName() string {
	return "UpdateProfileAdditionalInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileAdditionalInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileAdditionalInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileAdditionalInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileAdditionalInfoResponseValidationError{}

// Validate checks the field values on MotConfirm with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// MotConfirmMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *MotConfirm) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRegistrationNumber()) < 1 {
		err := MotConfirmValidationError{
			field:  "RegistrationNumber",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MotConfirmMultiError(errors)
	}
	return nil
}

// MotConfirmMultiError is an error wrapping multiple validation errors
// returned by MotConfirm.Validate(true) if the designated constraints aren't met.
type MotConfirmMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MotConfirmMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MotConfirmMultiError) AllErrors() []error { return m }

// MotConfirmValidationError is the validation error returned by
// MotConfirm.Validate if the designated constraints aren't met.
type MotConfirmValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MotConfirmValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MotConfirmValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MotConfirmValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MotConfirmValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MotConfirmValidationError) ErrorName() string { return "MotConfirmValidationError" }

// Error satisfies the builtin error interface
func (e MotConfirmValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMotConfirm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MotConfirmValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MotConfirmValidationError{}

// Validate checks the field values on DeleteProfileAdditionalInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in DeleteProfileAdditionalInfoRequestMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *DeleteProfileAdditionalInfoRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for Type

	if len(errors) > 0 {
		return DeleteProfileAdditionalInfoRequestMultiError(errors)
	}
	return nil
}

// DeleteProfileAdditionalInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteProfileAdditionalInfoRequest.Validate(true) if the designated
// constraints aren't met.
type DeleteProfileAdditionalInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProfileAdditionalInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProfileAdditionalInfoRequestMultiError) AllErrors() []error { return m }

// DeleteProfileAdditionalInfoRequestValidationError is the validation error
// returned by DeleteProfileAdditionalInfoRequest.Validate if the designated
// constraints aren't met.
type DeleteProfileAdditionalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProfileAdditionalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProfileAdditionalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProfileAdditionalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProfileAdditionalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProfileAdditionalInfoRequestValidationError) ErrorName() string {
	return "DeleteProfileAdditionalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProfileAdditionalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProfileAdditionalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProfileAdditionalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProfileAdditionalInfoRequestValidationError{}

// Validate checks the field values on DeleteProfileAdditionalInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in DeleteProfileAdditionalInfoResponseMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *DeleteProfileAdditionalInfoResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProfileAdditionalInfoResponseMultiError(errors)
	}
	return nil
}

// DeleteProfileAdditionalInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteProfileAdditionalInfoResponse.Validate(true) if the designated
// constraints aren't met.
type DeleteProfileAdditionalInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProfileAdditionalInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProfileAdditionalInfoResponseMultiError) AllErrors() []error { return m }

// DeleteProfileAdditionalInfoResponseValidationError is the validation error
// returned by DeleteProfileAdditionalInfoResponse.Validate if the designated
// constraints aren't met.
type DeleteProfileAdditionalInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProfileAdditionalInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProfileAdditionalInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProfileAdditionalInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProfileAdditionalInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProfileAdditionalInfoResponseValidationError) ErrorName() string {
	return "DeleteProfileAdditionalInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProfileAdditionalInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProfileAdditionalInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProfileAdditionalInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProfileAdditionalInfoResponseValidationError{}

// Validate checks the field values on GetProfileAdditionalInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetProfileAdditionalInfoRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetProfileAdditionalInfoRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for Type

	if len(errors) > 0 {
		return GetProfileAdditionalInfoRequestMultiError(errors)
	}
	return nil
}

// GetProfileAdditionalInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetProfileAdditionalInfoRequest.Validate(true) if the designated
// constraints aren't met.
type GetProfileAdditionalInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileAdditionalInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileAdditionalInfoRequestMultiError) AllErrors() []error { return m }

// GetProfileAdditionalInfoRequestValidationError is the validation error
// returned by GetProfileAdditionalInfoRequest.Validate if the designated
// constraints aren't met.
type GetProfileAdditionalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileAdditionalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileAdditionalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileAdditionalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileAdditionalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileAdditionalInfoRequestValidationError) ErrorName() string {
	return "GetProfileAdditionalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileAdditionalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileAdditionalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileAdditionalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileAdditionalInfoRequestValidationError{}

// Validate checks the field values on GetProfileAdditionalInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in GetProfileAdditionalInfoResponseMultiError, or
// nil if none found. Otherwise, only the first error is returned, if any.
func (m *GetProfileAdditionalInfoResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Info.(type) {

	case *GetProfileAdditionalInfoResponse_IdCard:

		if v, ok := interface{}(m.GetIdCard()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoResponseValidationError{
					field:  "IdCard",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *GetProfileAdditionalInfoResponse_DrivingLicense:

		if v, ok := interface{}(m.GetDrivingLicense()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoResponseValidationError{
					field:  "DrivingLicense",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *GetProfileAdditionalInfoResponse_DriverBackground:

		if v, ok := interface{}(m.GetDriverBackground()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoResponseValidationError{
					field:  "DriverBackground",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *GetProfileAdditionalInfoResponse_ResidenceCard:

		if v, ok := interface{}(m.GetResidenceCard()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoResponseValidationError{
					field:  "ResidenceCard",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *GetProfileAdditionalInfoResponse_BankAccount:

		if v, ok := interface{}(m.GetBankAccount()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoResponseValidationError{
					field:  "BankAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *GetProfileAdditionalInfoResponse_Address:

		if v, ok := interface{}(m.GetAddress()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoResponseValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *GetProfileAdditionalInfoResponse_Mot:

		if v, ok := interface{}(m.GetMot()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoResponseValidationError{
					field:  "Mot",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *GetProfileAdditionalInfoResponse_InsuranceCertificate:

		if v, ok := interface{}(m.GetInsuranceCertificate()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoResponseValidationError{
					field:  "InsuranceCertificate",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *GetProfileAdditionalInfoResponse_ProfilePicture:

		if v, ok := interface{}(m.GetProfilePicture()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoResponseValidationError{
					field:  "ProfilePicture",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *GetProfileAdditionalInfoResponse_ProfileAdditionalInfo:

		if v, ok := interface{}(m.GetProfileAdditionalInfo()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoResponseValidationError{
					field:  "ProfileAdditionalInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetProfileAdditionalInfoResponseMultiError(errors)
	}
	return nil
}

// GetProfileAdditionalInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetProfileAdditionalInfoResponse.Validate(true) if the designated
// constraints aren't met.
type GetProfileAdditionalInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileAdditionalInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileAdditionalInfoResponseMultiError) AllErrors() []error { return m }

// GetProfileAdditionalInfoResponseValidationError is the validation error
// returned by GetProfileAdditionalInfoResponse.Validate if the designated
// constraints aren't met.
type GetProfileAdditionalInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileAdditionalInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileAdditionalInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileAdditionalInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileAdditionalInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileAdditionalInfoResponseValidationError) ErrorName() string {
	return "GetProfileAdditionalInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileAdditionalInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileAdditionalInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileAdditionalInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileAdditionalInfoResponseValidationError{}

// Validate checks the field values on ProfileAdditionalInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ProfileAdditionalInfoMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ProfileAdditionalInfo) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetIdCard()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ProfileAdditionalInfoValidationError{
				field:  "IdCard",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetDrivingLicense()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ProfileAdditionalInfoValidationError{
				field:  "DrivingLicense",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetDriverBackground()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ProfileAdditionalInfoValidationError{
				field:  "DriverBackground",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetResidenceCard()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ProfileAdditionalInfoValidationError{
				field:  "ResidenceCard",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetBankAccount()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ProfileAdditionalInfoValidationError{
				field:  "BankAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ProfileAdditionalInfoValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetMot()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ProfileAdditionalInfoValidationError{
				field:  "Mot",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetInsuranceCertificate()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ProfileAdditionalInfoValidationError{
				field:  "InsuranceCertificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetProfilePicture()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ProfileAdditionalInfoValidationError{
				field:  "ProfilePicture",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return ProfileAdditionalInfoMultiError(errors)
	}
	return nil
}

// ProfileAdditionalInfoMultiError is an error wrapping multiple validation
// errors returned by ProfileAdditionalInfo.Validate(true) if the designated
// constraints aren't met.
type ProfileAdditionalInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileAdditionalInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileAdditionalInfoMultiError) AllErrors() []error { return m }

// ProfileAdditionalInfoValidationError is the validation error returned by
// ProfileAdditionalInfo.Validate if the designated constraints aren't met.
type ProfileAdditionalInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileAdditionalInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileAdditionalInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileAdditionalInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileAdditionalInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileAdditionalInfoValidationError) ErrorName() string {
	return "ProfileAdditionalInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileAdditionalInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileAdditionalInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileAdditionalInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileAdditionalInfoValidationError{}

// Validate checks the field values on InsuranceCertificate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in InsuranceCertificateMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *InsuranceCertificate) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjectId

	// no validation rules for Data

	if len(errors) > 0 {
		return InsuranceCertificateMultiError(errors)
	}
	return nil
}

// InsuranceCertificateMultiError is an error wrapping multiple validation
// errors returned by InsuranceCertificate.Validate(true) if the designated
// constraints aren't met.
type InsuranceCertificateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsuranceCertificateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsuranceCertificateMultiError) AllErrors() []error { return m }

// InsuranceCertificateValidationError is the validation error returned by
// InsuranceCertificate.Validate if the designated constraints aren't met.
type InsuranceCertificateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsuranceCertificateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsuranceCertificateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsuranceCertificateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsuranceCertificateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsuranceCertificateValidationError) ErrorName() string {
	return "InsuranceCertificateValidationError"
}

// Error satisfies the builtin error interface
func (e InsuranceCertificateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsuranceCertificate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsuranceCertificateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsuranceCertificateValidationError{}

// Validate checks the field values on ProfilePicture with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// ProfilePictureMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *ProfilePicture) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjectId

	// no validation rules for Data

	if len(errors) > 0 {
		return ProfilePictureMultiError(errors)
	}
	return nil
}

// ProfilePictureMultiError is an error wrapping multiple validation errors
// returned by ProfilePicture.Validate(true) if the designated constraints
// aren't met.
type ProfilePictureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfilePictureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfilePictureMultiError) AllErrors() []error { return m }

// ProfilePictureValidationError is the validation error returned by
// ProfilePicture.Validate if the designated constraints aren't met.
type ProfilePictureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfilePictureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfilePictureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfilePictureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfilePictureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfilePictureValidationError) ErrorName() string { return "ProfilePictureValidationError" }

// Error satisfies the builtin error interface
func (e ProfilePictureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfilePicture.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfilePictureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfilePictureValidationError{}

// Validate checks the field values on GetProfileAdditionalInfoStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in
// GetProfileAdditionalInfoStatusRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetProfileAdditionalInfoStatusRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return GetProfileAdditionalInfoStatusRequestMultiError(errors)
	}
	return nil
}

// GetProfileAdditionalInfoStatusRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetProfileAdditionalInfoStatusRequest.Validate(true) if the designated
// constraints aren't met.
type GetProfileAdditionalInfoStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileAdditionalInfoStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileAdditionalInfoStatusRequestMultiError) AllErrors() []error { return m }

// GetProfileAdditionalInfoStatusRequestValidationError is the validation error
// returned by GetProfileAdditionalInfoStatusRequest.Validate if the
// designated constraints aren't met.
type GetProfileAdditionalInfoStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileAdditionalInfoStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileAdditionalInfoStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileAdditionalInfoStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileAdditionalInfoStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileAdditionalInfoStatusRequestValidationError) ErrorName() string {
	return "GetProfileAdditionalInfoStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileAdditionalInfoStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileAdditionalInfoStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileAdditionalInfoStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileAdditionalInfoStatusRequestValidationError{}

// Validate checks the field values on GetProfileAdditionalInfoStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in
// GetProfileAdditionalInfoStatusResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetProfileAdditionalInfoStatusResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetProfileAdditionalInfoStatusResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetProfileAdditionalInfoStatusResponseMultiError(errors)
	}
	return nil
}

// GetProfileAdditionalInfoStatusResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetProfileAdditionalInfoStatusResponse.Validate(true) if the designated
// constraints aren't met.
type GetProfileAdditionalInfoStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileAdditionalInfoStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileAdditionalInfoStatusResponseMultiError) AllErrors() []error { return m }

// GetProfileAdditionalInfoStatusResponseValidationError is the validation
// error returned by GetProfileAdditionalInfoStatusResponse.Validate if the
// designated constraints aren't met.
type GetProfileAdditionalInfoStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileAdditionalInfoStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileAdditionalInfoStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileAdditionalInfoStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileAdditionalInfoStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileAdditionalInfoStatusResponseValidationError) ErrorName() string {
	return "GetProfileAdditionalInfoStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileAdditionalInfoStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileAdditionalInfoStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileAdditionalInfoStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileAdditionalInfoStatusResponseValidationError{}

// Validate checks the field values on
// GetProfileAdditionalInfoStatusResponseItem with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// GetProfileAdditionalInfoStatusResponseItemMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetProfileAdditionalInfoStatusResponseItem) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Message

	if len(errors) > 0 {
		return GetProfileAdditionalInfoStatusResponseItemMultiError(errors)
	}
	return nil
}

// GetProfileAdditionalInfoStatusResponseItemMultiError is an error wrapping
// multiple validation errors returned by
// GetProfileAdditionalInfoStatusResponseItem.Validate(true) if the designated
// constraints aren't met.
type GetProfileAdditionalInfoStatusResponseItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileAdditionalInfoStatusResponseItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileAdditionalInfoStatusResponseItemMultiError) AllErrors() []error { return m }

// GetProfileAdditionalInfoStatusResponseItemValidationError is the validation
// error returned by GetProfileAdditionalInfoStatusResponseItem.Validate if
// the designated constraints aren't met.
type GetProfileAdditionalInfoStatusResponseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileAdditionalInfoStatusResponseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileAdditionalInfoStatusResponseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileAdditionalInfoStatusResponseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileAdditionalInfoStatusResponseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileAdditionalInfoStatusResponseItemValidationError) ErrorName() string {
	return "GetProfileAdditionalInfoStatusResponseItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileAdditionalInfoStatusResponseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileAdditionalInfoStatusResponseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileAdditionalInfoStatusResponseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileAdditionalInfoStatusResponseItemValidationError{}

// Validate checks the field values on UpdateProfileAdditionalInfoStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in
// UpdateProfileAdditionalInfoStatusRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UpdateProfileAdditionalInfoStatusRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if _, ok := AdditionalInfoType_name[int32(m.GetType())]; !ok {
		err := UpdateProfileAdditionalInfoStatusRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UpdateProfileAdditionalInfoStatus_name[int32(m.GetStatus())]; !ok {
		err := UpdateProfileAdditionalInfoStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateProfileAdditionalInfoStatusRequestMultiError(errors)
	}
	return nil
}

// UpdateProfileAdditionalInfoStatusRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateProfileAdditionalInfoStatusRequest.Validate(true) if the designated
// constraints aren't met.
type UpdateProfileAdditionalInfoStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileAdditionalInfoStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileAdditionalInfoStatusRequestMultiError) AllErrors() []error { return m }

// UpdateProfileAdditionalInfoStatusRequestValidationError is the validation
// error returned by UpdateProfileAdditionalInfoStatusRequest.Validate if the
// designated constraints aren't met.
type UpdateProfileAdditionalInfoStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileAdditionalInfoStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileAdditionalInfoStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileAdditionalInfoStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileAdditionalInfoStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileAdditionalInfoStatusRequestValidationError) ErrorName() string {
	return "UpdateProfileAdditionalInfoStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileAdditionalInfoStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileAdditionalInfoStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileAdditionalInfoStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileAdditionalInfoStatusRequestValidationError{}

// Validate checks the field values on
// UpdateProfileAdditionalInfoStatusResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// UpdateProfileAdditionalInfoStatusResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UpdateProfileAdditionalInfoStatusResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProfileAdditionalInfoStatusResponseMultiError(errors)
	}
	return nil
}

// UpdateProfileAdditionalInfoStatusResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateProfileAdditionalInfoStatusResponse.Validate(true) if the designated
// constraints aren't met.
type UpdateProfileAdditionalInfoStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileAdditionalInfoStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileAdditionalInfoStatusResponseMultiError) AllErrors() []error { return m }

// UpdateProfileAdditionalInfoStatusResponseValidationError is the validation
// error returned by UpdateProfileAdditionalInfoStatusResponse.Validate if the
// designated constraints aren't met.
type UpdateProfileAdditionalInfoStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileAdditionalInfoStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileAdditionalInfoStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileAdditionalInfoStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileAdditionalInfoStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileAdditionalInfoStatusResponseValidationError) ErrorName() string {
	return "UpdateProfileAdditionalInfoStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileAdditionalInfoStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileAdditionalInfoStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileAdditionalInfoStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileAdditionalInfoStatusResponseValidationError{}

// Validate checks the field values on GetProfileStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetProfileStatusRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetProfileStatusRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return GetProfileStatusRequestMultiError(errors)
	}
	return nil
}

// GetProfileStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetProfileStatusRequest.Validate(true) if the designated
// constraints aren't met.
type GetProfileStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileStatusRequestMultiError) AllErrors() []error { return m }

// GetProfileStatusRequestValidationError is the validation error returned by
// GetProfileStatusRequest.Validate if the designated constraints aren't met.
type GetProfileStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileStatusRequestValidationError) ErrorName() string {
	return "GetProfileStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileStatusRequestValidationError{}

// Validate checks the field values on GetProfileStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetProfileStatusResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetProfileStatusResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GetProfileStatusResponseMultiError(errors)
	}
	return nil
}

// GetProfileStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetProfileStatusResponse.Validate(true) if the
// designated constraints aren't met.
type GetProfileStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileStatusResponseMultiError) AllErrors() []error { return m }

// GetProfileStatusResponseValidationError is the validation error returned by
// GetProfileStatusResponse.Validate if the designated constraints aren't met.
type GetProfileStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileStatusResponseValidationError) ErrorName() string {
	return "GetProfileStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileStatusResponseValidationError{}

// Validate checks the field values on Document with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// DocumentMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *Document) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjectId

	// no validation rules for InfoType

	// no validation rules for DocType

	// no validation rules for FileType

	// no validation rules for Data

	if len(errors) > 0 {
		return DocumentMultiError(errors)
	}
	return nil
}

// DocumentMultiError is an error wrapping multiple validation errors returned
// by Document.Validate(true) if the designated constraints aren't met.
type DocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentMultiError) AllErrors() []error { return m }

// DocumentValidationError is the validation error returned by
// Document.Validate if the designated constraints aren't met.
type DocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentValidationError) ErrorName() string { return "DocumentValidationError" }

// Error satisfies the builtin error interface
func (e DocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentValidationError{}

// Validate checks the field values on DocumentInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// DocumentInfoMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *DocumentInfo) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InfoType

	// no validation rules for DocType

	// no validation rules for FileType

	// no validation rules for ObjectId

	// no validation rules for Data

	// no validation rules for CreationDate

	if len(errors) > 0 {
		return DocumentInfoMultiError(errors)
	}
	return nil
}

// DocumentInfoMultiError is an error wrapping multiple validation errors
// returned by DocumentInfo.Validate(true) if the designated constraints
// aren't met.
type DocumentInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentInfoMultiError) AllErrors() []error { return m }

// DocumentInfoValidationError is the validation error returned by
// DocumentInfo.Validate if the designated constraints aren't met.
type DocumentInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentInfoValidationError) ErrorName() string { return "DocumentInfoValidationError" }

// Error satisfies the builtin error interface
func (e DocumentInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentInfoValidationError{}

// Validate checks the field values on UploadDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UploadDocumentRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UploadDocumentRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if m.GetDocument() == nil {
		err := UploadDocumentRequestValidationError{
			field:  "Document",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetDocument()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = UploadDocumentRequestValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return UploadDocumentRequestMultiError(errors)
	}
	return nil
}

// UploadDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by UploadDocumentRequest.Validate(true) if the designated
// constraints aren't met.
type UploadDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadDocumentRequestMultiError) AllErrors() []error { return m }

// UploadDocumentRequestValidationError is the validation error returned by
// UploadDocumentRequest.Validate if the designated constraints aren't met.
type UploadDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadDocumentRequestValidationError) ErrorName() string {
	return "UploadDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadDocumentRequestValidationError{}

// Validate checks the field values on UploadDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UploadDocumentResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UploadDocumentResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjectId

	if len(errors) > 0 {
		return UploadDocumentResponseMultiError(errors)
	}
	return nil
}

// UploadDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by UploadDocumentResponse.Validate(true) if the designated
// constraints aren't met.
type UploadDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadDocumentResponseMultiError) AllErrors() []error { return m }

// UploadDocumentResponseValidationError is the validation error returned by
// UploadDocumentResponse.Validate if the designated constraints aren't met.
type UploadDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadDocumentResponseValidationError) ErrorName() string {
	return "UploadDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadDocumentResponseValidationError{}

// Validate checks the field values on GetDocumentsOfUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetDocumentsOfUserRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetDocumentsOfUserRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for Type

	// no validation rules for DataType

	if len(errors) > 0 {
		return GetDocumentsOfUserRequestMultiError(errors)
	}
	return nil
}

// GetDocumentsOfUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetDocumentsOfUserRequest.Validate(true) if the
// designated constraints aren't met.
type GetDocumentsOfUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentsOfUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentsOfUserRequestMultiError) AllErrors() []error { return m }

// GetDocumentsOfUserRequestValidationError is the validation error returned by
// GetDocumentsOfUserRequest.Validate if the designated constraints aren't met.
type GetDocumentsOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentsOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentsOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentsOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentsOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentsOfUserRequestValidationError) ErrorName() string {
	return "GetDocumentsOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentsOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentsOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentsOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentsOfUserRequestValidationError{}

// Validate checks the field values on GetDocumentsOfUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetDocumentsOfUserResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetDocumentsOfUserResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDocuments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetDocumentsOfUserResponseValidationError{
					field:  fmt.Sprintf("Documents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetDocumentsOfUserResponseMultiError(errors)
	}
	return nil
}

// GetDocumentsOfUserResponseMultiError is an error wrapping multiple
// validation errors returned by GetDocumentsOfUserResponse.Validate(true) if
// the designated constraints aren't met.
type GetDocumentsOfUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentsOfUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentsOfUserResponseMultiError) AllErrors() []error { return m }

// GetDocumentsOfUserResponseValidationError is the validation error returned
// by GetDocumentsOfUserResponse.Validate if the designated constraints aren't met.
type GetDocumentsOfUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentsOfUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentsOfUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentsOfUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentsOfUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentsOfUserResponseValidationError) ErrorName() string {
	return "GetDocumentsOfUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentsOfUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentsOfUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentsOfUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentsOfUserResponseValidationError{}

// Validate checks the field values on GetDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetDocumentRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetDocumentRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetObjectId()) < 1 {
		err := GetDocumentRequestValidationError{
			field:  "ObjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDocumentRequestMultiError(errors)
	}
	return nil
}

// GetDocumentRequestMultiError is an error wrapping multiple validation errors
// returned by GetDocumentRequest.Validate(true) if the designated constraints
// aren't met.
type GetDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRequestMultiError) AllErrors() []error { return m }

// GetDocumentRequestValidationError is the validation error returned by
// GetDocumentRequest.Validate if the designated constraints aren't met.
type GetDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRequestValidationError) ErrorName() string {
	return "GetDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRequestValidationError{}

// Validate checks the field values on GetDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetDocumentResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetDocumentResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadLinkExpiration

	// no validation rules for DownloadLink

	if len(errors) > 0 {
		return GetDocumentResponseMultiError(errors)
	}
	return nil
}

// GetDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by GetDocumentResponse.Validate(true) if the designated
// constraints aren't met.
type GetDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentResponseMultiError) AllErrors() []error { return m }

// GetDocumentResponseValidationError is the validation error returned by
// GetDocumentResponse.Validate if the designated constraints aren't met.
type GetDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentResponseValidationError) ErrorName() string {
	return "GetDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentResponseValidationError{}

// Validate checks the field values on DownloadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in DownloadRequestMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *DownloadRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDownloadLink()) < 1 {
		err := DownloadRequestValidationError{
			field:  "DownloadLink",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DownloadRequestMultiError(errors)
	}
	return nil
}

// DownloadRequestMultiError is an error wrapping multiple validation errors
// returned by DownloadRequest.Validate(true) if the designated constraints
// aren't met.
type DownloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadRequestMultiError) AllErrors() []error { return m }

// DownloadRequestValidationError is the validation error returned by
// DownloadRequest.Validate if the designated constraints aren't met.
type DownloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadRequestValidationError) ErrorName() string { return "DownloadRequestValidationError" }

// Error satisfies the builtin error interface
func (e DownloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadRequestValidationError{}

// Validate checks the field values on DownloadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in DownloadResponseMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *DownloadResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DownloadResponseMultiError(errors)
	}
	return nil
}

// DownloadResponseMultiError is an error wrapping multiple validation errors
// returned by DownloadResponse.Validate(true) if the designated constraints
// aren't met.
type DownloadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadResponseMultiError) AllErrors() []error { return m }

// DownloadResponseValidationError is the validation error returned by
// DownloadResponse.Validate if the designated constraints aren't met.
type DownloadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadResponseValidationError) ErrorName() string { return "DownloadResponseValidationError" }

// Error satisfies the builtin error interface
func (e DownloadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadResponseValidationError{}

// Validate checks the field values on DirectDownloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in DirectDownloadRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *DirectDownloadRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetObjectId()) < 1 {
		err := DirectDownloadRequestValidationError{
			field:  "ObjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DirectDownloadRequestMultiError(errors)
	}
	return nil
}

// DirectDownloadRequestMultiError is an error wrapping multiple validation
// errors returned by DirectDownloadRequest.Validate(true) if the designated
// constraints aren't met.
type DirectDownloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DirectDownloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DirectDownloadRequestMultiError) AllErrors() []error { return m }

// DirectDownloadRequestValidationError is the validation error returned by
// DirectDownloadRequest.Validate if the designated constraints aren't met.
type DirectDownloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DirectDownloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DirectDownloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DirectDownloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DirectDownloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DirectDownloadRequestValidationError) ErrorName() string {
	return "DirectDownloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DirectDownloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDirectDownloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DirectDownloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DirectDownloadRequestValidationError{}

// Validate checks the field values on DirectDownloadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in DirectDownloadResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *DirectDownloadResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InfoType

	// no validation rules for DocType

	// no validation rules for FileType

	// no validation rules for Data

	if len(errors) > 0 {
		return DirectDownloadResponseMultiError(errors)
	}
	return nil
}

// DirectDownloadResponseMultiError is an error wrapping multiple validation
// errors returned by DirectDownloadResponse.Validate(true) if the designated
// constraints aren't met.
type DirectDownloadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DirectDownloadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DirectDownloadResponseMultiError) AllErrors() []error { return m }

// DirectDownloadResponseValidationError is the validation error returned by
// DirectDownloadResponse.Validate if the designated constraints aren't met.
type DirectDownloadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DirectDownloadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DirectDownloadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DirectDownloadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DirectDownloadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DirectDownloadResponseValidationError) ErrorName() string {
	return "DirectDownloadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DirectDownloadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDirectDownloadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DirectDownloadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DirectDownloadResponseValidationError{}

// Validate checks the field values on GetUserAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetUserAddressRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetUserAddressRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return GetUserAddressRequestMultiError(errors)
	}
	return nil
}

// GetUserAddressRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserAddressRequest.Validate(true) if the designated
// constraints aren't met.
type GetUserAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAddressRequestMultiError) AllErrors() []error { return m }

// GetUserAddressRequestValidationError is the validation error returned by
// GetUserAddressRequest.Validate if the designated constraints aren't met.
type GetUserAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAddressRequestValidationError) ErrorName() string {
	return "GetUserAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAddressRequestValidationError{}

// Validate checks the field values on GetUserAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetUserAddressResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetUserAddressResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetUserAddressResponseValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetUserAddressResponseMultiError(errors)
	}
	return nil
}

// GetUserAddressResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserAddressResponse.Validate(true) if the designated
// constraints aren't met.
type GetUserAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAddressResponseMultiError) AllErrors() []error { return m }

// GetUserAddressResponseValidationError is the validation error returned by
// GetUserAddressResponse.Validate if the designated constraints aren't met.
type GetUserAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAddressResponseValidationError) ErrorName() string {
	return "GetUserAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAddressResponseValidationError{}

// Validate checks the field values on UpdateUserAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateUserAddressRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UpdateUserAddressRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if m.GetAddress() == nil {
		err := UpdateUserAddressRequestValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = UpdateUserAddressRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return UpdateUserAddressRequestMultiError(errors)
	}
	return nil
}

// UpdateUserAddressRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserAddressRequest.Validate(true) if the
// designated constraints aren't met.
type UpdateUserAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserAddressRequestMultiError) AllErrors() []error { return m }

// UpdateUserAddressRequestValidationError is the validation error returned by
// UpdateUserAddressRequest.Validate if the designated constraints aren't met.
type UpdateUserAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAddressRequestValidationError) ErrorName() string {
	return "UpdateUserAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAddressRequestValidationError{}

// Validate checks the field values on UpdateUserAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateUserAddressResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateUserAddressResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserAddressResponseMultiError(errors)
	}
	return nil
}

// UpdateUserAddressResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserAddressResponse.Validate(true) if the
// designated constraints aren't met.
type UpdateUserAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserAddressResponseMultiError) AllErrors() []error { return m }

// UpdateUserAddressResponseValidationError is the validation error returned by
// UpdateUserAddressResponse.Validate if the designated constraints aren't met.
type UpdateUserAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAddressResponseValidationError) ErrorName() string {
	return "UpdateUserAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAddressResponseValidationError{}

// Validate checks the field values on UserAddress with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// UserAddressMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *UserAddress) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Street

	// no validation rules for Building

	// no validation rules for City

	// no validation rules for County

	// no validation rules for PostCode

	// no validation rules for AddressDetails

	if len(errors) > 0 {
		return UserAddressMultiError(errors)
	}
	return nil
}

// UserAddressMultiError is an error wrapping multiple validation errors
// returned by UserAddress.Validate(true) if the designated constraints aren't met.
type UserAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAddressMultiError) AllErrors() []error { return m }

// UserAddressValidationError is the validation error returned by
// UserAddress.Validate if the designated constraints aren't met.
type UserAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAddressValidationError) ErrorName() string { return "UserAddressValidationError" }

// Error satisfies the builtin error interface
func (e UserAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAddressValidationError{}

// Validate checks the field values on CreateUserAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateUserAccountRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *CreateUserAccountRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetFirstName()) < 1 {
		err := CreateUserAccountRequestValidationError{
			field:  "FirstName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLastName()) < 1 {
		err := CreateUserAccountRequestValidationError{
			field:  "LastName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateUserAccountRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BirthDate

	// no validation rules for Referral

	if len(errors) > 0 {
		return CreateUserAccountRequestMultiError(errors)
	}
	return nil
}

func (m *CreateUserAccountRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateUserAccountRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateUserAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserAccountRequest.Validate(true) if the
// designated constraints aren't met.
type CreateUserAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserAccountRequestMultiError) AllErrors() []error { return m }

// CreateUserAccountRequestValidationError is the validation error returned by
// CreateUserAccountRequest.Validate if the designated constraints aren't met.
type CreateUserAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserAccountRequestValidationError) ErrorName() string {
	return "CreateUserAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserAccountRequestValidationError{}

// Validate checks the field values on CreateUserAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateUserAccountResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *CreateUserAccountResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateUserAccountResponseMultiError(errors)
	}
	return nil
}

// CreateUserAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateUserAccountResponse.Validate(true) if the
// designated constraints aren't met.
type CreateUserAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserAccountResponseMultiError) AllErrors() []error { return m }

// CreateUserAccountResponseValidationError is the validation error returned by
// CreateUserAccountResponse.Validate if the designated constraints aren't met.
type CreateUserAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserAccountResponseValidationError) ErrorName() string {
	return "CreateUserAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserAccountResponseValidationError{}

// Validate checks the field values on UpdateUserAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateUserAccountRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UpdateUserAccountRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for PaymentMethod

	// no validation rules for BirthDate

	if len(errors) > 0 {
		return UpdateUserAccountRequestMultiError(errors)
	}
	return nil
}

// UpdateUserAccountRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserAccountRequest.Validate(true) if the
// designated constraints aren't met.
type UpdateUserAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserAccountRequestMultiError) AllErrors() []error { return m }

// UpdateUserAccountRequestValidationError is the validation error returned by
// UpdateUserAccountRequest.Validate if the designated constraints aren't met.
type UpdateUserAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAccountRequestValidationError) ErrorName() string {
	return "UpdateUserAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAccountRequestValidationError{}

// Validate checks the field values on UpdateUserAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateUserAccountResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateUserAccountResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserAccountResponseMultiError(errors)
	}
	return nil
}

// UpdateUserAccountResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserAccountResponse.Validate(true) if the
// designated constraints aren't met.
type UpdateUserAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserAccountResponseMultiError) AllErrors() []error { return m }

// UpdateUserAccountResponseValidationError is the validation error returned by
// UpdateUserAccountResponse.Validate if the designated constraints aren't met.
type UpdateUserAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAccountResponseValidationError) ErrorName() string {
	return "UpdateUserAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAccountResponseValidationError{}

// Validate checks the field values on UpdateUserPhoneNumberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateUserPhoneNumberRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateUserPhoneNumberRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetNewAccessToken()) < 1 {
		err := UpdateUserPhoneNumberRequestValidationError{
			field:  "NewAccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserPhoneNumberRequestMultiError(errors)
	}
	return nil
}

// UpdateUserPhoneNumberRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPhoneNumberRequest.Validate(true)
// if the designated constraints aren't met.
type UpdateUserPhoneNumberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPhoneNumberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPhoneNumberRequestMultiError) AllErrors() []error { return m }

// UpdateUserPhoneNumberRequestValidationError is the validation error returned
// by UpdateUserPhoneNumberRequest.Validate if the designated constraints
// aren't met.
type UpdateUserPhoneNumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPhoneNumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPhoneNumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPhoneNumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPhoneNumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPhoneNumberRequestValidationError) ErrorName() string {
	return "UpdateUserPhoneNumberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPhoneNumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPhoneNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPhoneNumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPhoneNumberRequestValidationError{}

// Validate checks the field values on UpdateUserPhoneNumberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateUserPhoneNumberResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateUserPhoneNumberResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserPhoneNumberResponseMultiError(errors)
	}
	return nil
}

// UpdateUserPhoneNumberResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPhoneNumberResponse.Validate(true)
// if the designated constraints aren't met.
type UpdateUserPhoneNumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPhoneNumberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPhoneNumberResponseMultiError) AllErrors() []error { return m }

// UpdateUserPhoneNumberResponseValidationError is the validation error
// returned by UpdateUserPhoneNumberResponse.Validate if the designated
// constraints aren't met.
type UpdateUserPhoneNumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPhoneNumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPhoneNumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPhoneNumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPhoneNumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPhoneNumberResponseValidationError) ErrorName() string {
	return "UpdateUserPhoneNumberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPhoneNumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPhoneNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPhoneNumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPhoneNumberResponseValidationError{}

// Validate checks the field values on GetUserAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetUserAccountRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetUserAccountRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return GetUserAccountRequestMultiError(errors)
	}
	return nil
}

// GetUserAccountRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserAccountRequest.Validate(true) if the designated
// constraints aren't met.
type GetUserAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAccountRequestMultiError) AllErrors() []error { return m }

// GetUserAccountRequestValidationError is the validation error returned by
// GetUserAccountRequest.Validate if the designated constraints aren't met.
type GetUserAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAccountRequestValidationError) ErrorName() string {
	return "GetUserAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAccountRequestValidationError{}

// Validate checks the field values on GetUserAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetUserAccountResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetUserAccountResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetUserAccountResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetUserAccountResponseMultiError(errors)
	}
	return nil
}

// GetUserAccountResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserAccountResponse.Validate(true) if the designated
// constraints aren't met.
type GetUserAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAccountResponseMultiError) AllErrors() []error { return m }

// GetUserAccountResponseValidationError is the validation error returned by
// GetUserAccountResponse.Validate if the designated constraints aren't met.
type GetUserAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAccountResponseValidationError) ErrorName() string {
	return "GetUserAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAccountResponseValidationError{}

// Validate checks the field values on FindUserAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in FindUserAccountsRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *FindUserAccountsRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	switch m.Filter.(type) {

	case *FindUserAccountsRequest_UserId:
		// no validation rules for UserId

	case *FindUserAccountsRequest_PhoneNumber:
		// no validation rules for PhoneNumber

	case *FindUserAccountsRequest_Email:
		// no validation rules for Email

	case *FindUserAccountsRequest_Name:
		// no validation rules for Name

	default:
		err := FindUserAccountsRequestValidationError{
			field:  "Filter",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return FindUserAccountsRequestMultiError(errors)
	}
	return nil
}

// FindUserAccountsRequestMultiError is an error wrapping multiple validation
// errors returned by FindUserAccountsRequest.Validate(true) if the designated
// constraints aren't met.
type FindUserAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserAccountsRequestMultiError) AllErrors() []error { return m }

// FindUserAccountsRequestValidationError is the validation error returned by
// FindUserAccountsRequest.Validate if the designated constraints aren't met.
type FindUserAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserAccountsRequestValidationError) ErrorName() string {
	return "FindUserAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserAccountsRequestValidationError{}

// Validate checks the field values on FindUserAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in FindUserAccountsResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *FindUserAccountsResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = FindUserAccountsResponseValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return FindUserAccountsResponseMultiError(errors)
	}
	return nil
}

// FindUserAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by FindUserAccountsResponse.Validate(true) if the
// designated constraints aren't met.
type FindUserAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserAccountsResponseMultiError) AllErrors() []error { return m }

// FindUserAccountsResponseValidationError is the validation error returned by
// FindUserAccountsResponse.Validate if the designated constraints aren't met.
type FindUserAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserAccountsResponseValidationError) ErrorName() string {
	return "FindUserAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserAccountsResponseValidationError{}

// Validate checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// UserProfileMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *UserProfile) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for PhoneNumber

	// no validation rules for Email

	// no validation rules for PaymentMethod

	// no validation rules for BirthDate

	// no validation rules for Code

	for idx, item := range m.GetAuthorizedClaims() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = UserProfileValidationError{
					field:  fmt.Sprintf("AuthorizedClaims[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return UserProfileMultiError(errors)
	}
	return nil
}

// UserProfileMultiError is an error wrapping multiple validation errors
// returned by UserProfile.Validate(true) if the designated constraints aren't met.
type UserProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileMultiError) AllErrors() []error { return m }

// UserProfileValidationError is the validation error returned by
// UserProfile.Validate if the designated constraints aren't met.
type UserProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileValidationError) ErrorName() string { return "UserProfileValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileValidationError{}

// Validate checks the field values on UpdateUserCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateUserCardRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UpdateUserCardRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetCardNumber()) < 1 {
		err := UpdateUserCardRequestValidationError{
			field:  "CardNumber",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIssueDate()) < 1 {
		err := UpdateUserCardRequestValidationError{
			field:  "IssueDate",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCvv()) < 1 {
		err := UpdateUserCardRequestValidationError{
			field:  "Cvv",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetZipCode()) < 1 {
		err := UpdateUserCardRequestValidationError{
			field:  "ZipCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCountry()) < 1 {
		err := UpdateUserCardRequestValidationError{
			field:  "Country",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserCardRequestMultiError(errors)
	}
	return nil
}

// UpdateUserCardRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserCardRequest.Validate(true) if the designated
// constraints aren't met.
type UpdateUserCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserCardRequestMultiError) AllErrors() []error { return m }

// UpdateUserCardRequestValidationError is the validation error returned by
// UpdateUserCardRequest.Validate if the designated constraints aren't met.
type UpdateUserCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserCardRequestValidationError) ErrorName() string {
	return "UpdateUserCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserCardRequestValidationError{}

// Validate checks the field values on UpdateUserCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateUserCardResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UpdateUserCardResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserCardResponseMultiError(errors)
	}
	return nil
}

// UpdateUserCardResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserCardResponse.Validate(true) if the designated
// constraints aren't met.
type UpdateUserCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserCardResponseMultiError) AllErrors() []error { return m }

// UpdateUserCardResponseValidationError is the validation error returned by
// UpdateUserCardResponse.Validate if the designated constraints aren't met.
type UpdateUserCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserCardResponseValidationError) ErrorName() string {
	return "UpdateUserCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserCardResponseValidationError{}

// Validate checks the field values on GetUserCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetUserCardRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetUserCardRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return GetUserCardRequestMultiError(errors)
	}
	return nil
}

// GetUserCardRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserCardRequest.Validate(true) if the designated constraints
// aren't met.
type GetUserCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCardRequestMultiError) AllErrors() []error { return m }

// GetUserCardRequestValidationError is the validation error returned by
// GetUserCardRequest.Validate if the designated constraints aren't met.
type GetUserCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCardRequestValidationError) ErrorName() string {
	return "GetUserCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCardRequestValidationError{}

// Validate checks the field values on GetUserCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetUserCardResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetUserCardResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCards() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetUserCardResponseValidationError{
					field:  fmt.Sprintf("Cards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetUserCardResponseMultiError(errors)
	}
	return nil
}

// GetUserCardResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserCardResponse.Validate(true) if the designated
// constraints aren't met.
type GetUserCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCardResponseMultiError) AllErrors() []error { return m }

// GetUserCardResponseValidationError is the validation error returned by
// GetUserCardResponse.Validate if the designated constraints aren't met.
type GetUserCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCardResponseValidationError) ErrorName() string {
	return "GetUserCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCardResponseValidationError{}

// Validate checks the field values on DeleteUserCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in DeleteUserCardRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *DeleteUserCardRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetCardNumber()) < 1 {
		err := DeleteUserCardRequestValidationError{
			field:  "CardNumber",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserCardRequestMultiError(errors)
	}
	return nil
}

// DeleteUserCardRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserCardRequest.Validate(true) if the designated
// constraints aren't met.
type DeleteUserCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserCardRequestMultiError) AllErrors() []error { return m }

// DeleteUserCardRequestValidationError is the validation error returned by
// DeleteUserCardRequest.Validate if the designated constraints aren't met.
type DeleteUserCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserCardRequestValidationError) ErrorName() string {
	return "DeleteUserCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserCardRequestValidationError{}

// Validate checks the field values on DeleteUserCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in DeleteUserCardResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *DeleteUserCardResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserCardResponseMultiError(errors)
	}
	return nil
}

// DeleteUserCardResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserCardResponse.Validate(true) if the designated
// constraints aren't met.
type DeleteUserCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserCardResponseMultiError) AllErrors() []error { return m }

// DeleteUserCardResponseValidationError is the validation error returned by
// DeleteUserCardResponse.Validate if the designated constraints aren't met.
type DeleteUserCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserCardResponseValidationError) ErrorName() string {
	return "DeleteUserCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserCardResponseValidationError{}

// Validate checks the field values on UserCard with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// UserCardMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *UserCard) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CardNumber

	// no validation rules for IssueDate

	// no validation rules for Cvv

	// no validation rules for ZipCode

	// no validation rules for Country

	if len(errors) > 0 {
		return UserCardMultiError(errors)
	}
	return nil
}

// UserCardMultiError is an error wrapping multiple validation errors returned
// by UserCard.Validate(true) if the designated constraints aren't met.
type UserCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCardMultiError) AllErrors() []error { return m }

// UserCardValidationError is the validation error returned by
// UserCard.Validate if the designated constraints aren't met.
type UserCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCardValidationError) ErrorName() string { return "UserCardValidationError" }

// Error satisfies the builtin error interface
func (e UserCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCardValidationError{}

// Validate checks the field values on GetCourierUserStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetCourierUserStatusRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetCourierUserStatusRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetCourierUserStatusRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCourierUserStatusRequestMultiError(errors)
	}
	return nil
}

// GetCourierUserStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetCourierUserStatusRequest.Validate(true) if
// the designated constraints aren't met.
type GetCourierUserStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierUserStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierUserStatusRequestMultiError) AllErrors() []error { return m }

// GetCourierUserStatusRequestValidationError is the validation error returned
// by GetCourierUserStatusRequest.Validate if the designated constraints
// aren't met.
type GetCourierUserStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierUserStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierUserStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierUserStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierUserStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierUserStatusRequestValidationError) ErrorName() string {
	return "GetCourierUserStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierUserStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierUserStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierUserStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierUserStatusRequestValidationError{}

// Validate checks the field values on GetCourierUserStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetCourierUserStatusResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetCourierUserStatusResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GetCourierUserStatusResponseMultiError(errors)
	}
	return nil
}

// GetCourierUserStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetCourierUserStatusResponse.Validate(true)
// if the designated constraints aren't met.
type GetCourierUserStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierUserStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierUserStatusResponseMultiError) AllErrors() []error { return m }

// GetCourierUserStatusResponseValidationError is the validation error returned
// by GetCourierUserStatusResponse.Validate if the designated constraints
// aren't met.
type GetCourierUserStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierUserStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierUserStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierUserStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierUserStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierUserStatusResponseValidationError) ErrorName() string {
	return "GetCourierUserStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierUserStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierUserStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierUserStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierUserStatusResponseValidationError{}

// Validate checks the field values on UpdateCourierUserStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateCourierUserStatusRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateCourierUserStatusRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := UpdateCourierUserStatusRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UserStatus_name[int32(m.GetStatus())]; !ok {
		err := UpdateCourierUserStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCourierUserStatusRequestMultiError(errors)
	}
	return nil
}

// UpdateCourierUserStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCourierUserStatusRequest.Validate(true)
// if the designated constraints aren't met.
type UpdateCourierUserStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourierUserStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourierUserStatusRequestMultiError) AllErrors() []error { return m }

// UpdateCourierUserStatusRequestValidationError is the validation error
// returned by UpdateCourierUserStatusRequest.Validate if the designated
// constraints aren't met.
type UpdateCourierUserStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourierUserStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourierUserStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourierUserStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourierUserStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourierUserStatusRequestValidationError) ErrorName() string {
	return "UpdateCourierUserStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourierUserStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourierUserStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourierUserStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourierUserStatusRequestValidationError{}

// Validate checks the field values on UpdateCourierUserStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateCourierUserStatusResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateCourierUserStatusResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCourierUserStatusResponseMultiError(errors)
	}
	return nil
}

// UpdateCourierUserStatusResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCourierUserStatusResponse.Validate(true) if the designated
// constraints aren't met.
type UpdateCourierUserStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourierUserStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourierUserStatusResponseMultiError) AllErrors() []error { return m }

// UpdateCourierUserStatusResponseValidationError is the validation error
// returned by UpdateCourierUserStatusResponse.Validate if the designated
// constraints aren't met.
type UpdateCourierUserStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourierUserStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourierUserStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourierUserStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourierUserStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourierUserStatusResponseValidationError) ErrorName() string {
	return "UpdateCourierUserStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourierUserStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourierUserStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourierUserStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourierUserStatusResponseValidationError{}

// Validate checks the field values on GetClientUserStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetClientUserStatusRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetClientUserStatusRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetClientUserStatusRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetClientUserStatusRequestMultiError(errors)
	}
	return nil
}

// GetClientUserStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetClientUserStatusRequest.Validate(true) if
// the designated constraints aren't met.
type GetClientUserStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientUserStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientUserStatusRequestMultiError) AllErrors() []error { return m }

// GetClientUserStatusRequestValidationError is the validation error returned
// by GetClientUserStatusRequest.Validate if the designated constraints aren't met.
type GetClientUserStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientUserStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientUserStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientUserStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientUserStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientUserStatusRequestValidationError) ErrorName() string {
	return "GetClientUserStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientUserStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientUserStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientUserStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientUserStatusRequestValidationError{}

// Validate checks the field values on GetClientUserStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetClientUserStatusResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetClientUserStatusResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GetClientUserStatusResponseMultiError(errors)
	}
	return nil
}

// GetClientUserStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetClientUserStatusResponse.Validate(true) if
// the designated constraints aren't met.
type GetClientUserStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientUserStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientUserStatusResponseMultiError) AllErrors() []error { return m }

// GetClientUserStatusResponseValidationError is the validation error returned
// by GetClientUserStatusResponse.Validate if the designated constraints
// aren't met.
type GetClientUserStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientUserStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientUserStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientUserStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientUserStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientUserStatusResponseValidationError) ErrorName() string {
	return "GetClientUserStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientUserStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientUserStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientUserStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientUserStatusResponseValidationError{}

// Validate checks the field values on UpdateClientUserStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateClientUserStatusRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateClientUserStatusRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := UpdateClientUserStatusRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UserStatus_name[int32(m.GetStatus())]; !ok {
		err := UpdateClientUserStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateClientUserStatusRequestMultiError(errors)
	}
	return nil
}

// UpdateClientUserStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateClientUserStatusRequest.Validate(true)
// if the designated constraints aren't met.
type UpdateClientUserStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClientUserStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClientUserStatusRequestMultiError) AllErrors() []error { return m }

// UpdateClientUserStatusRequestValidationError is the validation error
// returned by UpdateClientUserStatusRequest.Validate if the designated
// constraints aren't met.
type UpdateClientUserStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClientUserStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClientUserStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClientUserStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClientUserStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClientUserStatusRequestValidationError) ErrorName() string {
	return "UpdateClientUserStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClientUserStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClientUserStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClientUserStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClientUserStatusRequestValidationError{}

// Validate checks the field values on UpdateClientUserStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateClientUserStatusResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *UpdateClientUserStatusResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateClientUserStatusResponseMultiError(errors)
	}
	return nil
}

// UpdateClientUserStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateClientUserStatusResponse.Validate(true)
// if the designated constraints aren't met.
type UpdateClientUserStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClientUserStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClientUserStatusResponseMultiError) AllErrors() []error { return m }

// UpdateClientUserStatusResponseValidationError is the validation error
// returned by UpdateClientUserStatusResponse.Validate if the designated
// constraints aren't met.
type UpdateClientUserStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClientUserStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClientUserStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClientUserStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClientUserStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClientUserStatusResponseValidationError) ErrorName() string {
	return "UpdateClientUserStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClientUserStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClientUserStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClientUserStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClientUserStatusResponseValidationError{}

// Validate checks the field values on GetCourierUserStatusByTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in GetCourierUserStatusByTokenRequestMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *GetCourierUserStatusByTokenRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return GetCourierUserStatusByTokenRequestMultiError(errors)
	}
	return nil
}

// GetCourierUserStatusByTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetCourierUserStatusByTokenRequest.Validate(true) if the designated
// constraints aren't met.
type GetCourierUserStatusByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierUserStatusByTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierUserStatusByTokenRequestMultiError) AllErrors() []error { return m }

// GetCourierUserStatusByTokenRequestValidationError is the validation error
// returned by GetCourierUserStatusByTokenRequest.Validate if the designated
// constraints aren't met.
type GetCourierUserStatusByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierUserStatusByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierUserStatusByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierUserStatusByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierUserStatusByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierUserStatusByTokenRequestValidationError) ErrorName() string {
	return "GetCourierUserStatusByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierUserStatusByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierUserStatusByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierUserStatusByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierUserStatusByTokenRequestValidationError{}

// Validate checks the field values on UpdateCourierUserStatusByTokenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in
// UpdateCourierUserStatusByTokenRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UpdateCourierUserStatusByTokenRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if _, ok := UserStatus_name[int32(m.GetStatus())]; !ok {
		err := UpdateCourierUserStatusByTokenRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCourierUserStatusByTokenRequestMultiError(errors)
	}
	return nil
}

// UpdateCourierUserStatusByTokenRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateCourierUserStatusByTokenRequest.Validate(true) if the designated
// constraints aren't met.
type UpdateCourierUserStatusByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourierUserStatusByTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourierUserStatusByTokenRequestMultiError) AllErrors() []error { return m }

// UpdateCourierUserStatusByTokenRequestValidationError is the validation error
// returned by UpdateCourierUserStatusByTokenRequest.Validate if the
// designated constraints aren't met.
type UpdateCourierUserStatusByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourierUserStatusByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourierUserStatusByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourierUserStatusByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourierUserStatusByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourierUserStatusByTokenRequestValidationError) ErrorName() string {
	return "UpdateCourierUserStatusByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourierUserStatusByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourierUserStatusByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourierUserStatusByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourierUserStatusByTokenRequestValidationError{}

// Validate checks the field values on GetClientUserStatusByTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in GetClientUserStatusByTokenRequestMultiError, or
// nil if none found. Otherwise, only the first error is returned, if any.
func (m *GetClientUserStatusByTokenRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return GetClientUserStatusByTokenRequestMultiError(errors)
	}
	return nil
}

// GetClientUserStatusByTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetClientUserStatusByTokenRequest.Validate(true) if the designated
// constraints aren't met.
type GetClientUserStatusByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientUserStatusByTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientUserStatusByTokenRequestMultiError) AllErrors() []error { return m }

// GetClientUserStatusByTokenRequestValidationError is the validation error
// returned by GetClientUserStatusByTokenRequest.Validate if the designated
// constraints aren't met.
type GetClientUserStatusByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientUserStatusByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientUserStatusByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientUserStatusByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientUserStatusByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientUserStatusByTokenRequestValidationError) ErrorName() string {
	return "GetClientUserStatusByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientUserStatusByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientUserStatusByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientUserStatusByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientUserStatusByTokenRequestValidationError{}

// Validate checks the field values on UpdateClientUserStatusByTokenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in UpdateClientUserStatusByTokenRequestMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *UpdateClientUserStatusByTokenRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if _, ok := UserStatus_name[int32(m.GetStatus())]; !ok {
		err := UpdateClientUserStatusByTokenRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateClientUserStatusByTokenRequestMultiError(errors)
	}
	return nil
}

// UpdateClientUserStatusByTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateClientUserStatusByTokenRequest.Validate(true) if the designated
// constraints aren't met.
type UpdateClientUserStatusByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClientUserStatusByTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClientUserStatusByTokenRequestMultiError) AllErrors() []error { return m }

// UpdateClientUserStatusByTokenRequestValidationError is the validation error
// returned by UpdateClientUserStatusByTokenRequest.Validate if the designated
// constraints aren't met.
type UpdateClientUserStatusByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClientUserStatusByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClientUserStatusByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClientUserStatusByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClientUserStatusByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClientUserStatusByTokenRequestValidationError) ErrorName() string {
	return "UpdateClientUserStatusByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClientUserStatusByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClientUserStatusByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClientUserStatusByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClientUserStatusByTokenRequestValidationError{}

// Validate checks the field values on ServiceGetCourierRegistrationStatRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in
// ServiceGetCourierRegistrationStatRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ServiceGetCourierRegistrationStatRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetDateFrom()) < 1 {
		err := ServiceGetCourierRegistrationStatRequestValidationError{
			field:  "DateFrom",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDateTo()) < 1 {
		err := ServiceGetCourierRegistrationStatRequestValidationError{
			field:  "DateTo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServiceGetCourierRegistrationStatRequestMultiError(errors)
	}
	return nil
}

// ServiceGetCourierRegistrationStatRequestMultiError is an error wrapping
// multiple validation errors returned by
// ServiceGetCourierRegistrationStatRequest.Validate(true) if the designated
// constraints aren't met.
type ServiceGetCourierRegistrationStatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceGetCourierRegistrationStatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceGetCourierRegistrationStatRequestMultiError) AllErrors() []error { return m }

// ServiceGetCourierRegistrationStatRequestValidationError is the validation
// error returned by ServiceGetCourierRegistrationStatRequest.Validate if the
// designated constraints aren't met.
type ServiceGetCourierRegistrationStatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceGetCourierRegistrationStatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceGetCourierRegistrationStatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceGetCourierRegistrationStatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceGetCourierRegistrationStatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceGetCourierRegistrationStatRequestValidationError) ErrorName() string {
	return "ServiceGetCourierRegistrationStatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceGetCourierRegistrationStatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceGetCourierRegistrationStatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceGetCourierRegistrationStatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceGetCourierRegistrationStatRequestValidationError{}

// Validate checks the field values on ServiceGetClientRegistrationStatRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in
// ServiceGetClientRegistrationStatRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ServiceGetClientRegistrationStatRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetDateFrom()) < 1 {
		err := ServiceGetClientRegistrationStatRequestValidationError{
			field:  "DateFrom",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDateTo()) < 1 {
		err := ServiceGetClientRegistrationStatRequestValidationError{
			field:  "DateTo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServiceGetClientRegistrationStatRequestMultiError(errors)
	}
	return nil
}

// ServiceGetClientRegistrationStatRequestMultiError is an error wrapping
// multiple validation errors returned by
// ServiceGetClientRegistrationStatRequest.Validate(true) if the designated
// constraints aren't met.
type ServiceGetClientRegistrationStatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceGetClientRegistrationStatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceGetClientRegistrationStatRequestMultiError) AllErrors() []error { return m }

// ServiceGetClientRegistrationStatRequestValidationError is the validation
// error returned by ServiceGetClientRegistrationStatRequest.Validate if the
// designated constraints aren't met.
type ServiceGetClientRegistrationStatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceGetClientRegistrationStatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceGetClientRegistrationStatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceGetClientRegistrationStatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceGetClientRegistrationStatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceGetClientRegistrationStatRequestValidationError) ErrorName() string {
	return "ServiceGetClientRegistrationStatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceGetClientRegistrationStatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceGetClientRegistrationStatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceGetClientRegistrationStatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceGetClientRegistrationStatRequestValidationError{}

// Validate checks the field values on GetRegistrationStatResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetRegistrationStatResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetRegistrationStatResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetRegistrationStatResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetRegistrationStatResponseMultiError(errors)
	}
	return nil
}

// GetRegistrationStatResponseMultiError is an error wrapping multiple
// validation errors returned by GetRegistrationStatResponse.Validate(true) if
// the designated constraints aren't met.
type GetRegistrationStatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegistrationStatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegistrationStatResponseMultiError) AllErrors() []error { return m }

// GetRegistrationStatResponseValidationError is the validation error returned
// by GetRegistrationStatResponse.Validate if the designated constraints
// aren't met.
type GetRegistrationStatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegistrationStatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegistrationStatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegistrationStatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegistrationStatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegistrationStatResponseValidationError) ErrorName() string {
	return "GetRegistrationStatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegistrationStatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegistrationStatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegistrationStatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegistrationStatResponseValidationError{}

// Validate checks the field values on GetRegistrationStatItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetRegistrationStatItemMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetRegistrationStatItem) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for Count

	if len(errors) > 0 {
		return GetRegistrationStatItemMultiError(errors)
	}
	return nil
}

// GetRegistrationStatItemMultiError is an error wrapping multiple validation
// errors returned by GetRegistrationStatItem.Validate(true) if the designated
// constraints aren't met.
type GetRegistrationStatItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegistrationStatItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegistrationStatItemMultiError) AllErrors() []error { return m }

// GetRegistrationStatItemValidationError is the validation error returned by
// GetRegistrationStatItem.Validate if the designated constraints aren't met.
type GetRegistrationStatItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegistrationStatItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegistrationStatItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegistrationStatItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegistrationStatItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegistrationStatItemValidationError) ErrorName() string {
	return "GetRegistrationStatItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegistrationStatItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegistrationStatItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegistrationStatItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegistrationStatItemValidationError{}

// Validate checks the field values on ServiceGetCourierRegistrationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in ServiceGetCourierRegistrationRequestMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *ServiceGetCourierRegistrationRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ServiceGetCourierRegistrationRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	switch m.Filter.(type) {

	case *ServiceGetCourierRegistrationRequest_UserId:
		// no validation rules for UserId

	case *ServiceGetCourierRegistrationRequest_PhoneNumber:
		// no validation rules for PhoneNumber

	case *ServiceGetCourierRegistrationRequest_Email:
		// no validation rules for Email

	case *ServiceGetCourierRegistrationRequest_Name:
		// no validation rules for Name

	}

	if len(errors) > 0 {
		return ServiceGetCourierRegistrationRequestMultiError(errors)
	}
	return nil
}

// ServiceGetCourierRegistrationRequestMultiError is an error wrapping multiple
// validation errors returned by
// ServiceGetCourierRegistrationRequest.Validate(true) if the designated
// constraints aren't met.
type ServiceGetCourierRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceGetCourierRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceGetCourierRegistrationRequestMultiError) AllErrors() []error { return m }

// ServiceGetCourierRegistrationRequestValidationError is the validation error
// returned by ServiceGetCourierRegistrationRequest.Validate if the designated
// constraints aren't met.
type ServiceGetCourierRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceGetCourierRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceGetCourierRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceGetCourierRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceGetCourierRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceGetCourierRegistrationRequestValidationError) ErrorName() string {
	return "ServiceGetCourierRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceGetCourierRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceGetCourierRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceGetCourierRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceGetCourierRegistrationRequestValidationError{}

// Validate checks the field values on GetCourierRegistrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetCourierRegistrationResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetCourierRegistrationResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetCourierRegistrationResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetCourierRegistrationResponseMultiError(errors)
	}
	return nil
}

// GetCourierRegistrationResponseMultiError is an error wrapping multiple
// validation errors returned by GetCourierRegistrationResponse.Validate(true)
// if the designated constraints aren't met.
type GetCourierRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierRegistrationResponseMultiError) AllErrors() []error { return m }

// GetCourierRegistrationResponseValidationError is the validation error
// returned by GetCourierRegistrationResponse.Validate if the designated
// constraints aren't met.
type GetCourierRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRegistrationResponseValidationError) ErrorName() string {
	return "GetCourierRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRegistrationResponseValidationError{}

// Validate checks the field values on ServiceGetClientRegistrationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in ServiceGetClientRegistrationRequestMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *ServiceGetClientRegistrationRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ServiceGetClientRegistrationRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	switch m.Filter.(type) {

	case *ServiceGetClientRegistrationRequest_UserId:
		// no validation rules for UserId

	case *ServiceGetClientRegistrationRequest_PhoneNumber:
		// no validation rules for PhoneNumber

	case *ServiceGetClientRegistrationRequest_Email:
		// no validation rules for Email

	case *ServiceGetClientRegistrationRequest_Name:
		// no validation rules for Name

	}

	if len(errors) > 0 {
		return ServiceGetClientRegistrationRequestMultiError(errors)
	}
	return nil
}

// ServiceGetClientRegistrationRequestMultiError is an error wrapping multiple
// validation errors returned by
// ServiceGetClientRegistrationRequest.Validate(true) if the designated
// constraints aren't met.
type ServiceGetClientRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceGetClientRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceGetClientRegistrationRequestMultiError) AllErrors() []error { return m }

// ServiceGetClientRegistrationRequestValidationError is the validation error
// returned by ServiceGetClientRegistrationRequest.Validate if the designated
// constraints aren't met.
type ServiceGetClientRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceGetClientRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceGetClientRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceGetClientRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceGetClientRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceGetClientRegistrationRequestValidationError) ErrorName() string {
	return "ServiceGetClientRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceGetClientRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceGetClientRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceGetClientRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceGetClientRegistrationRequestValidationError{}

// Validate checks the field values on GetClientRegistrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetClientRegistrationResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetClientRegistrationResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetClientRegistrationResponseValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetClientRegistrationResponseMultiError(errors)
	}
	return nil
}

// GetClientRegistrationResponseMultiError is an error wrapping multiple
// validation errors returned by GetClientRegistrationResponse.Validate(true)
// if the designated constraints aren't met.
type GetClientRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientRegistrationResponseMultiError) AllErrors() []error { return m }

// GetClientRegistrationResponseValidationError is the validation error
// returned by GetClientRegistrationResponse.Validate if the designated
// constraints aren't met.
type GetClientRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientRegistrationResponseValidationError) ErrorName() string {
	return "GetClientRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientRegistrationResponseValidationError{}

// Validate checks the field values on ServiceGetDocumentsOfUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in ServiceGetDocumentsOfUserRequestMultiError, or
// nil if none found. Otherwise, only the first error is returned, if any.
func (m *ServiceGetDocumentsOfUserRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ServiceGetDocumentsOfUserRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DocumentInfoType_name[int32(m.GetType())]; !ok {
		err := ServiceGetDocumentsOfUserRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServiceGetDocumentsOfUserRequestMultiError(errors)
	}
	return nil
}

// ServiceGetDocumentsOfUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// ServiceGetDocumentsOfUserRequest.Validate(true) if the designated
// constraints aren't met.
type ServiceGetDocumentsOfUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceGetDocumentsOfUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceGetDocumentsOfUserRequestMultiError) AllErrors() []error { return m }

// ServiceGetDocumentsOfUserRequestValidationError is the validation error
// returned by ServiceGetDocumentsOfUserRequest.Validate if the designated
// constraints aren't met.
type ServiceGetDocumentsOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceGetDocumentsOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceGetDocumentsOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceGetDocumentsOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceGetDocumentsOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceGetDocumentsOfUserRequestValidationError) ErrorName() string {
	return "ServiceGetDocumentsOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceGetDocumentsOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceGetDocumentsOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceGetDocumentsOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceGetDocumentsOfUserRequestValidationError{}

// Validate checks the field values on ServiceGetProfileAdditionalInfoRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in
// ServiceGetProfileAdditionalInfoRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ServiceGetProfileAdditionalInfoRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ServiceGetProfileAdditionalInfoRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := AdditionalInfoType_name[int32(m.GetType())]; !ok {
		err := ServiceGetProfileAdditionalInfoRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServiceGetProfileAdditionalInfoRequestMultiError(errors)
	}
	return nil
}

// ServiceGetProfileAdditionalInfoRequestMultiError is an error wrapping
// multiple validation errors returned by
// ServiceGetProfileAdditionalInfoRequest.Validate(true) if the designated
// constraints aren't met.
type ServiceGetProfileAdditionalInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceGetProfileAdditionalInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceGetProfileAdditionalInfoRequestMultiError) AllErrors() []error { return m }

// ServiceGetProfileAdditionalInfoRequestValidationError is the validation
// error returned by ServiceGetProfileAdditionalInfoRequest.Validate if the
// designated constraints aren't met.
type ServiceGetProfileAdditionalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceGetProfileAdditionalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceGetProfileAdditionalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceGetProfileAdditionalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceGetProfileAdditionalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceGetProfileAdditionalInfoRequestValidationError) ErrorName() string {
	return "ServiceGetProfileAdditionalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceGetProfileAdditionalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceGetProfileAdditionalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceGetProfileAdditionalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceGetProfileAdditionalInfoRequestValidationError{}

// Validate checks the field values on ServiceUpdateProfileStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in ServiceUpdateProfileStatusRequestMultiError, or
// nil if none found. Otherwise, only the first error is returned, if any.
func (m *ServiceUpdateProfileStatusRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ServiceUpdateProfileStatusRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserStatus

	for idx, item := range m.GetStatusItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = ServiceUpdateProfileStatusRequestValidationError{
					field:  fmt.Sprintf("StatusItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return ServiceUpdateProfileStatusRequestMultiError(errors)
	}
	return nil
}

// ServiceUpdateProfileStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// ServiceUpdateProfileStatusRequest.Validate(true) if the designated
// constraints aren't met.
type ServiceUpdateProfileStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceUpdateProfileStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceUpdateProfileStatusRequestMultiError) AllErrors() []error { return m }

// ServiceUpdateProfileStatusRequestValidationError is the validation error
// returned by ServiceUpdateProfileStatusRequest.Validate if the designated
// constraints aren't met.
type ServiceUpdateProfileStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceUpdateProfileStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceUpdateProfileStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceUpdateProfileStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceUpdateProfileStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceUpdateProfileStatusRequestValidationError) ErrorName() string {
	return "ServiceUpdateProfileStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceUpdateProfileStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceUpdateProfileStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceUpdateProfileStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceUpdateProfileStatusRequestValidationError{}

// Validate checks the field values on CourierProfileAndStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CourierProfileAndStatusMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *CourierProfileAndStatus) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = CourierProfileAndStatusValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	// no validation rules for UserStatus

	for idx, item := range m.GetStatusItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = CourierProfileAndStatusValidationError{
					field:  fmt.Sprintf("StatusItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return CourierProfileAndStatusMultiError(errors)
	}
	return nil
}

// CourierProfileAndStatusMultiError is an error wrapping multiple validation
// errors returned by CourierProfileAndStatus.Validate(true) if the designated
// constraints aren't met.
type CourierProfileAndStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourierProfileAndStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourierProfileAndStatusMultiError) AllErrors() []error { return m }

// CourierProfileAndStatusValidationError is the validation error returned by
// CourierProfileAndStatus.Validate if the designated constraints aren't met.
type CourierProfileAndStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourierProfileAndStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourierProfileAndStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourierProfileAndStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourierProfileAndStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourierProfileAndStatusValidationError) ErrorName() string {
	return "CourierProfileAndStatusValidationError"
}

// Error satisfies the builtin error interface
func (e CourierProfileAndStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourierProfileAndStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourierProfileAndStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourierProfileAndStatusValidationError{}

// Validate checks the field values on ProfileAdditionalInfoStatusItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ProfileAdditionalInfoStatusItemMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *ProfileAdditionalInfoStatusItem) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Message

	if len(errors) > 0 {
		return ProfileAdditionalInfoStatusItemMultiError(errors)
	}
	return nil
}

// ProfileAdditionalInfoStatusItemMultiError is an error wrapping multiple
// validation errors returned by
// ProfileAdditionalInfoStatusItem.Validate(true) if the designated
// constraints aren't met.
type ProfileAdditionalInfoStatusItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileAdditionalInfoStatusItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileAdditionalInfoStatusItemMultiError) AllErrors() []error { return m }

// ProfileAdditionalInfoStatusItemValidationError is the validation error
// returned by ProfileAdditionalInfoStatusItem.Validate if the designated
// constraints aren't met.
type ProfileAdditionalInfoStatusItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileAdditionalInfoStatusItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileAdditionalInfoStatusItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileAdditionalInfoStatusItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileAdditionalInfoStatusItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileAdditionalInfoStatusItemValidationError) ErrorName() string {
	return "ProfileAdditionalInfoStatusItemValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileAdditionalInfoStatusItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileAdditionalInfoStatusItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileAdditionalInfoStatusItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileAdditionalInfoStatusItemValidationError{}

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// PaginationMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *Pagination) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	// no validation rules for SortType

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}
	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.Validate(true) if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}

// Validate checks the field values on FindAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in FindAccountRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *FindAccountRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	switch m.Filter.(type) {

	case *FindAccountRequest_UserId:
		// no validation rules for UserId

	case *FindAccountRequest_PhoneNumber:
		// no validation rules for PhoneNumber

	case *FindAccountRequest_Email:
		// no validation rules for Email

	case *FindAccountRequest_FacebookId:
		// no validation rules for FacebookId

	case *FindAccountRequest_GoogleId:
		// no validation rules for GoogleId

	case *FindAccountRequest_Username:
		// no validation rules for Username

	}

	if len(errors) > 0 {
		return FindAccountRequestMultiError(errors)
	}
	return nil
}

// FindAccountRequestMultiError is an error wrapping multiple validation errors
// returned by FindAccountRequest.Validate(true) if the designated constraints
// aren't met.
type FindAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAccountRequestMultiError) AllErrors() []error { return m }

// FindAccountRequestValidationError is the validation error returned by
// FindAccountRequest.Validate if the designated constraints aren't met.
type FindAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAccountRequestValidationError) ErrorName() string {
	return "FindAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAccountRequestValidationError{}

// Validate checks the field values on FindAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in FindAccountResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *FindAccountResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = FindAccountResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return FindAccountResponseMultiError(errors)
	}
	return nil
}

// FindAccountResponseMultiError is an error wrapping multiple validation
// errors returned by FindAccountResponse.Validate(true) if the designated
// constraints aren't met.
type FindAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAccountResponseMultiError) AllErrors() []error { return m }

// FindAccountResponseValidationError is the validation error returned by
// FindAccountResponse.Validate if the designated constraints aren't met.
type FindAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAccountResponseValidationError) ErrorName() string {
	return "FindAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAccountResponseValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// AccountMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *Account) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PhoneNumber

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for BirthDate

	// no validation rules for TransportationType

	// no validation rules for Type

	for idx, item := range m.GetClaims() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = AccountValidationError{
					field:  fmt.Sprintf("Claims[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}
	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.Validate(true) if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on RegisterClaimRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in RegisterClaimRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *RegisterClaimRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Claim

	// no validation rules for Identifier

	if len(errors) > 0 {
		return RegisterClaimRequestMultiError(errors)
	}
	return nil
}

// RegisterClaimRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterClaimRequest.Validate(true) if the designated
// constraints aren't met.
type RegisterClaimRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterClaimRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterClaimRequestMultiError) AllErrors() []error { return m }

// RegisterClaimRequestValidationError is the validation error returned by
// RegisterClaimRequest.Validate if the designated constraints aren't met.
type RegisterClaimRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterClaimRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterClaimRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterClaimRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterClaimRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterClaimRequestValidationError) ErrorName() string {
	return "RegisterClaimRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterClaimRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterClaimRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterClaimRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterClaimRequestValidationError{}

// Validate checks the field values on RegisterClaimResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in RegisterClaimResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *RegisterClaimResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterClaimResponseMultiError(errors)
	}
	return nil
}

// RegisterClaimResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterClaimResponse.Validate(true) if the designated
// constraints aren't met.
type RegisterClaimResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterClaimResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterClaimResponseMultiError) AllErrors() []error { return m }

// RegisterClaimResponseValidationError is the validation error returned by
// RegisterClaimResponse.Validate if the designated constraints aren't met.
type RegisterClaimResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterClaimResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterClaimResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterClaimResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterClaimResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterClaimResponseValidationError) ErrorName() string {
	return "RegisterClaimResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterClaimResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterClaimResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterClaimResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterClaimResponseValidationError{}

// Validate checks the field values on Claim with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// ClaimMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *Claim) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClaimType

	// no validation rules for Identifier

	if len(errors) > 0 {
		return ClaimMultiError(errors)
	}
	return nil
}

// ClaimMultiError is an error wrapping multiple validation errors returned by
// Claim.Validate(true) if the designated constraints aren't met.
type ClaimMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClaimMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClaimMultiError) AllErrors() []error { return m }

// ClaimValidationError is the validation error returned by Claim.Validate if
// the designated constraints aren't met.
type ClaimValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClaimValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimValidationError) ErrorName() string { return "ClaimValidationError" }

// Error satisfies the builtin error interface
func (e ClaimValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaim.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimValidationError{}

// Validate checks the field values on
// InterServiceGetProfileAdditionalInfoRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// InterServiceGetProfileAdditionalInfoRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *InterServiceGetProfileAdditionalInfoRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := InterServiceGetProfileAdditionalInfoRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := AdditionalInfoType_name[int32(m.GetType())]; !ok {
		err := InterServiceGetProfileAdditionalInfoRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InterServiceGetProfileAdditionalInfoRequestMultiError(errors)
	}
	return nil
}

// InterServiceGetProfileAdditionalInfoRequestMultiError is an error wrapping
// multiple validation errors returned by
// InterServiceGetProfileAdditionalInfoRequest.Validate(true) if the
// designated constraints aren't met.
type InterServiceGetProfileAdditionalInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterServiceGetProfileAdditionalInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterServiceGetProfileAdditionalInfoRequestMultiError) AllErrors() []error { return m }

// InterServiceGetProfileAdditionalInfoRequestValidationError is the validation
// error returned by InterServiceGetProfileAdditionalInfoRequest.Validate if
// the designated constraints aren't met.
type InterServiceGetProfileAdditionalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterServiceGetProfileAdditionalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterServiceGetProfileAdditionalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterServiceGetProfileAdditionalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterServiceGetProfileAdditionalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterServiceGetProfileAdditionalInfoRequestValidationError) ErrorName() string {
	return "InterServiceGetProfileAdditionalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InterServiceGetProfileAdditionalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterServiceGetProfileAdditionalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterServiceGetProfileAdditionalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterServiceGetProfileAdditionalInfoRequestValidationError{}

// Validate checks the field values on
// InterServiceUpdateProfileAdditionalInfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// InterServiceUpdateProfileAdditionalInfoRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *InterServiceUpdateProfileAdditionalInfoRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := InterServiceUpdateProfileAdditionalInfoRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch m.Info.(type) {

	case *InterServiceUpdateProfileAdditionalInfoRequest_IdCard:

		if v, ok := interface{}(m.GetIdCard()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = InterServiceUpdateProfileAdditionalInfoRequestValidationError{
					field:  "IdCard",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *InterServiceUpdateProfileAdditionalInfoRequest_DrivingLicense:

		if v, ok := interface{}(m.GetDrivingLicense()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = InterServiceUpdateProfileAdditionalInfoRequestValidationError{
					field:  "DrivingLicense",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *InterServiceUpdateProfileAdditionalInfoRequest_DriverBackground:

		if v, ok := interface{}(m.GetDriverBackground()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = InterServiceUpdateProfileAdditionalInfoRequestValidationError{
					field:  "DriverBackground",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *InterServiceUpdateProfileAdditionalInfoRequest_ResidenceCard:

		if v, ok := interface{}(m.GetResidenceCard()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = InterServiceUpdateProfileAdditionalInfoRequestValidationError{
					field:  "ResidenceCard",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *InterServiceUpdateProfileAdditionalInfoRequest_BankAccount:

		if v, ok := interface{}(m.GetBankAccount()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = InterServiceUpdateProfileAdditionalInfoRequestValidationError{
					field:  "BankAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *InterServiceUpdateProfileAdditionalInfoRequest_Address:

		if v, ok := interface{}(m.GetAddress()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = InterServiceUpdateProfileAdditionalInfoRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *InterServiceUpdateProfileAdditionalInfoRequest_Mot:

		if v, ok := interface{}(m.GetMot()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = InterServiceUpdateProfileAdditionalInfoRequestValidationError{
					field:  "Mot",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	default:
		err := InterServiceUpdateProfileAdditionalInfoRequestValidationError{
			field:  "Info",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return InterServiceUpdateProfileAdditionalInfoRequestMultiError(errors)
	}
	return nil
}

// InterServiceUpdateProfileAdditionalInfoRequestMultiError is an error
// wrapping multiple validation errors returned by
// InterServiceUpdateProfileAdditionalInfoRequest.Validate(true) if the
// designated constraints aren't met.
type InterServiceUpdateProfileAdditionalInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterServiceUpdateProfileAdditionalInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterServiceUpdateProfileAdditionalInfoRequestMultiError) AllErrors() []error { return m }

// InterServiceUpdateProfileAdditionalInfoRequestValidationError is the
// validation error returned by
// InterServiceUpdateProfileAdditionalInfoRequest.Validate if the designated
// constraints aren't met.
type InterServiceUpdateProfileAdditionalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterServiceUpdateProfileAdditionalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterServiceUpdateProfileAdditionalInfoRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e InterServiceUpdateProfileAdditionalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterServiceUpdateProfileAdditionalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterServiceUpdateProfileAdditionalInfoRequestValidationError) ErrorName() string {
	return "InterServiceUpdateProfileAdditionalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InterServiceUpdateProfileAdditionalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterServiceUpdateProfileAdditionalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterServiceUpdateProfileAdditionalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterServiceUpdateProfileAdditionalInfoRequestValidationError{}

// Validate checks the field values on InterServiceFindCourierAccountsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in
// InterServiceFindCourierAccountsRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *InterServiceFindCourierAccountsRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Filter.(type) {

	case *InterServiceFindCourierAccountsRequest_UserId:
		// no validation rules for UserId

	case *InterServiceFindCourierAccountsRequest_PhoneNumber:
		// no validation rules for PhoneNumber

	case *InterServiceFindCourierAccountsRequest_Email:
		// no validation rules for Email

	case *InterServiceFindCourierAccountsRequest_Name:
		// no validation rules for Name

	default:
		err := InterServiceFindCourierAccountsRequestValidationError{
			field:  "Filter",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return InterServiceFindCourierAccountsRequestMultiError(errors)
	}
	return nil
}

// InterServiceFindCourierAccountsRequestMultiError is an error wrapping
// multiple validation errors returned by
// InterServiceFindCourierAccountsRequest.Validate(true) if the designated
// constraints aren't met.
type InterServiceFindCourierAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterServiceFindCourierAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterServiceFindCourierAccountsRequestMultiError) AllErrors() []error { return m }

// InterServiceFindCourierAccountsRequestValidationError is the validation
// error returned by InterServiceFindCourierAccountsRequest.Validate if the
// designated constraints aren't met.
type InterServiceFindCourierAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterServiceFindCourierAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterServiceFindCourierAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterServiceFindCourierAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterServiceFindCourierAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterServiceFindCourierAccountsRequestValidationError) ErrorName() string {
	return "InterServiceFindCourierAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InterServiceFindCourierAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterServiceFindCourierAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterServiceFindCourierAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterServiceFindCourierAccountsRequestValidationError{}

// Validate checks the field values on InterServiceGetDocumentsOfUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in
// InterServiceGetDocumentsOfUserRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *InterServiceGetDocumentsOfUserRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := InterServiceGetDocumentsOfUserRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for DataType

	if len(errors) > 0 {
		return InterServiceGetDocumentsOfUserRequestMultiError(errors)
	}
	return nil
}

// InterServiceGetDocumentsOfUserRequestMultiError is an error wrapping
// multiple validation errors returned by
// InterServiceGetDocumentsOfUserRequest.Validate(true) if the designated
// constraints aren't met.
type InterServiceGetDocumentsOfUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterServiceGetDocumentsOfUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterServiceGetDocumentsOfUserRequestMultiError) AllErrors() []error { return m }

// InterServiceGetDocumentsOfUserRequestValidationError is the validation error
// returned by InterServiceGetDocumentsOfUserRequest.Validate if the
// designated constraints aren't met.
type InterServiceGetDocumentsOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterServiceGetDocumentsOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterServiceGetDocumentsOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterServiceGetDocumentsOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterServiceGetDocumentsOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterServiceGetDocumentsOfUserRequestValidationError) ErrorName() string {
	return "InterServiceGetDocumentsOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InterServiceGetDocumentsOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterServiceGetDocumentsOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterServiceGetDocumentsOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterServiceGetDocumentsOfUserRequestValidationError{}

// Validate checks the field values on OpenGetCourierAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in OpenGetCourierAccountRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *OpenGetCourierAccountRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := OpenGetCourierAccountRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OpenGetCourierAccountRequestMultiError(errors)
	}
	return nil
}

// OpenGetCourierAccountRequestMultiError is an error wrapping multiple
// validation errors returned by OpenGetCourierAccountRequest.Validate(true)
// if the designated constraints aren't met.
type OpenGetCourierAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenGetCourierAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenGetCourierAccountRequestMultiError) AllErrors() []error { return m }

// OpenGetCourierAccountRequestValidationError is the validation error returned
// by OpenGetCourierAccountRequest.Validate if the designated constraints
// aren't met.
type OpenGetCourierAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenGetCourierAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenGetCourierAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenGetCourierAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenGetCourierAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenGetCourierAccountRequestValidationError) ErrorName() string {
	return "OpenGetCourierAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpenGetCourierAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenGetCourierAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenGetCourierAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenGetCourierAccountRequestValidationError{}

// Validate checks the field values on OpenGetProfileAdditionalInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in OpenGetProfileAdditionalInfoRequestMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *OpenGetProfileAdditionalInfoRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := OpenGetProfileAdditionalInfoRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := AdditionalInfoType_name[int32(m.GetType())]; !ok {
		err := OpenGetProfileAdditionalInfoRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OpenGetProfileAdditionalInfoRequestMultiError(errors)
	}
	return nil
}

// OpenGetProfileAdditionalInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// OpenGetProfileAdditionalInfoRequest.Validate(true) if the designated
// constraints aren't met.
type OpenGetProfileAdditionalInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenGetProfileAdditionalInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenGetProfileAdditionalInfoRequestMultiError) AllErrors() []error { return m }

// OpenGetProfileAdditionalInfoRequestValidationError is the validation error
// returned by OpenGetProfileAdditionalInfoRequest.Validate if the designated
// constraints aren't met.
type OpenGetProfileAdditionalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenGetProfileAdditionalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenGetProfileAdditionalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenGetProfileAdditionalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenGetProfileAdditionalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenGetProfileAdditionalInfoRequestValidationError) ErrorName() string {
	return "OpenGetProfileAdditionalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpenGetProfileAdditionalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenGetProfileAdditionalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenGetProfileAdditionalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenGetProfileAdditionalInfoRequestValidationError{}

// Validate checks the field values on OpenGetDocumentsOfUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in OpenGetDocumentsOfUserRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *OpenGetDocumentsOfUserRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := OpenGetDocumentsOfUserRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for DataType

	if len(errors) > 0 {
		return OpenGetDocumentsOfUserRequestMultiError(errors)
	}
	return nil
}

// OpenGetDocumentsOfUserRequestMultiError is an error wrapping multiple
// validation errors returned by OpenGetDocumentsOfUserRequest.Validate(true)
// if the designated constraints aren't met.
type OpenGetDocumentsOfUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenGetDocumentsOfUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenGetDocumentsOfUserRequestMultiError) AllErrors() []error { return m }

// OpenGetDocumentsOfUserRequestValidationError is the validation error
// returned by OpenGetDocumentsOfUserRequest.Validate if the designated
// constraints aren't met.
type OpenGetDocumentsOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenGetDocumentsOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenGetDocumentsOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenGetDocumentsOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenGetDocumentsOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenGetDocumentsOfUserRequestValidationError) ErrorName() string {
	return "OpenGetDocumentsOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpenGetDocumentsOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenGetDocumentsOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenGetDocumentsOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenGetDocumentsOfUserRequestValidationError{}

// Validate checks the field values on OpenGetUserAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in OpenGetUserAccountRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *OpenGetUserAccountRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := OpenGetUserAccountRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OpenGetUserAccountRequestMultiError(errors)
	}
	return nil
}

// OpenGetUserAccountRequestMultiError is an error wrapping multiple validation
// errors returned by OpenGetUserAccountRequest.Validate(true) if the
// designated constraints aren't met.
type OpenGetUserAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenGetUserAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenGetUserAccountRequestMultiError) AllErrors() []error { return m }

// OpenGetUserAccountRequestValidationError is the validation error returned by
// OpenGetUserAccountRequest.Validate if the designated constraints aren't met.
type OpenGetUserAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenGetUserAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenGetUserAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenGetUserAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenGetUserAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenGetUserAccountRequestValidationError) ErrorName() string {
	return "OpenGetUserAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpenGetUserAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenGetUserAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenGetUserAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenGetUserAccountRequestValidationError{}

// Validate checks the field values on OpenGetCourierPublicInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in OpenGetCourierPublicInfoRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *OpenGetCourierPublicInfoRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCourierId()) < 1 {
		err := OpenGetCourierPublicInfoRequestValidationError{
			field:  "CourierId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OpenGetCourierPublicInfoRequestMultiError(errors)
	}
	return nil
}

// OpenGetCourierPublicInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// OpenGetCourierPublicInfoRequest.Validate(true) if the designated
// constraints aren't met.
type OpenGetCourierPublicInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenGetCourierPublicInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenGetCourierPublicInfoRequestMultiError) AllErrors() []error { return m }

// OpenGetCourierPublicInfoRequestValidationError is the validation error
// returned by OpenGetCourierPublicInfoRequest.Validate if the designated
// constraints aren't met.
type OpenGetCourierPublicInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenGetCourierPublicInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenGetCourierPublicInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenGetCourierPublicInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenGetCourierPublicInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenGetCourierPublicInfoRequestValidationError) ErrorName() string {
	return "OpenGetCourierPublicInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpenGetCourierPublicInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenGetCourierPublicInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenGetCourierPublicInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenGetCourierPublicInfoRequestValidationError{}

// Validate checks the field values on OpenGetCourierPublicInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in OpenGetCourierPublicInfoResponseMultiError, or
// nil if none found. Otherwise, only the first error is returned, if any.
func (m *OpenGetCourierPublicInfoResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = OpenGetCourierPublicInfoResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	// no validation rules for RegistrationNumber

	if v, ok := interface{}(m.GetProfilePicture()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = OpenGetCourierPublicInfoResponseValidationError{
				field:  "ProfilePicture",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return OpenGetCourierPublicInfoResponseMultiError(errors)
	}
	return nil
}

// OpenGetCourierPublicInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// OpenGetCourierPublicInfoResponse.Validate(true) if the designated
// constraints aren't met.
type OpenGetCourierPublicInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenGetCourierPublicInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenGetCourierPublicInfoResponseMultiError) AllErrors() []error { return m }

// OpenGetCourierPublicInfoResponseValidationError is the validation error
// returned by OpenGetCourierPublicInfoResponse.Validate if the designated
// constraints aren't met.
type OpenGetCourierPublicInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenGetCourierPublicInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenGetCourierPublicInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenGetCourierPublicInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenGetCourierPublicInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenGetCourierPublicInfoResponseValidationError) ErrorName() string {
	return "OpenGetCourierPublicInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OpenGetCourierPublicInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenGetCourierPublicInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenGetCourierPublicInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenGetCourierPublicInfoResponseValidationError{}
