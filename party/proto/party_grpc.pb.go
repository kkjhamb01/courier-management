// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourierAccountServiceClient is the client API for CourierAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourierAccountServiceClient interface {
	// creates profile for a new courier user
	// returns error if the courier user already exists
	CreateCourierAccount(ctx context.Context, in *CreateCourierAccountRequest, opts ...grpc.CallOption) (*CreateCourierAccountResponse, error)
	// get profile of user by his token
	GetCourierAccount(ctx context.Context, in *GetCourierAccountRequest, opts ...grpc.CallOption) (*GetCourierAccountResponse, error)
	// find profiles of users
	FindCourierAccounts(ctx context.Context, in *FindCourierAccountsRequest, opts ...grpc.CallOption) (*FindCourierAccountsResponse, error)
	// updates general information of courier, or transportation type
	// all fields are optional, only available fields in the request are getting updated
	UpdateCourierAccount(ctx context.Context, in *UpdateCourierAccountRequest, opts ...grpc.CallOption) (*UpdateCourierAccountResponse, error)
	// update passport, address, driver's license, ... of a courier user
	UpdateProfileAdditionalInfo(ctx context.Context, in *UpdateProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*UpdateProfileAdditionalInfoResponse, error)
	// delete passport, address, driver's license, ... of a courier user
	DeleteProfileAdditionalInfo(ctx context.Context, in *DeleteProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*DeleteProfileAdditionalInfoResponse, error)
	// get passport, or driver's license, or address, ... of a courier user by their token
	GetProfileAdditionalInfo(ctx context.Context, in *GetProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*GetProfileAdditionalInfoResponse, error)
	// get status of passport, or driver's license, or address, ... of a courier user by their token
	GetProfileAdditionalInfoStatus(ctx context.Context, in *GetProfileAdditionalInfoStatusRequest, opts ...grpc.CallOption) (*GetProfileAdditionalInfoStatusResponse, error)
	// reject or accespt status of passport, or driver's license, or address, ... of a courier user by their token
	UpdateProfileAdditionalInfoStatus(ctx context.Context, in *UpdateProfileAdditionalInfoStatusRequest, opts ...grpc.CallOption) (*UpdateProfileAdditionalInfoStatusResponse, error)
	// get status of profile
	GetProfileStatus(ctx context.Context, in *GetProfileStatusRequest, opts ...grpc.CallOption) (*GetProfileStatusResponse, error)
	// search mot by registration number
	SearchMot(ctx context.Context, in *SearchMotRequest, opts ...grpc.CallOption) (*SearchMotResponse, error)
	// update phone number
	UpdateCourierPhoneNumber(ctx context.Context, in *UpdateCourierPhoneNumberRequest, opts ...grpc.CallOption) (*UpdateCourierPhoneNumberResponse, error)
}

type courierAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierAccountServiceClient(cc grpc.ClientConnInterface) CourierAccountServiceClient {
	return &courierAccountServiceClient{cc}
}

func (c *courierAccountServiceClient) CreateCourierAccount(ctx context.Context, in *CreateCourierAccountRequest, opts ...grpc.CallOption) (*CreateCourierAccountResponse, error) {
	out := new(CreateCourierAccountResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/CreateCourierAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) GetCourierAccount(ctx context.Context, in *GetCourierAccountRequest, opts ...grpc.CallOption) (*GetCourierAccountResponse, error) {
	out := new(GetCourierAccountResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/GetCourierAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) FindCourierAccounts(ctx context.Context, in *FindCourierAccountsRequest, opts ...grpc.CallOption) (*FindCourierAccountsResponse, error) {
	out := new(FindCourierAccountsResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/FindCourierAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) UpdateCourierAccount(ctx context.Context, in *UpdateCourierAccountRequest, opts ...grpc.CallOption) (*UpdateCourierAccountResponse, error) {
	out := new(UpdateCourierAccountResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/UpdateCourierAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) UpdateProfileAdditionalInfo(ctx context.Context, in *UpdateProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*UpdateProfileAdditionalInfoResponse, error) {
	out := new(UpdateProfileAdditionalInfoResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/UpdateProfileAdditionalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) DeleteProfileAdditionalInfo(ctx context.Context, in *DeleteProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*DeleteProfileAdditionalInfoResponse, error) {
	out := new(DeleteProfileAdditionalInfoResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/DeleteProfileAdditionalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) GetProfileAdditionalInfo(ctx context.Context, in *GetProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*GetProfileAdditionalInfoResponse, error) {
	out := new(GetProfileAdditionalInfoResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/GetProfileAdditionalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) GetProfileAdditionalInfoStatus(ctx context.Context, in *GetProfileAdditionalInfoStatusRequest, opts ...grpc.CallOption) (*GetProfileAdditionalInfoStatusResponse, error) {
	out := new(GetProfileAdditionalInfoStatusResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/GetProfileAdditionalInfoStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) UpdateProfileAdditionalInfoStatus(ctx context.Context, in *UpdateProfileAdditionalInfoStatusRequest, opts ...grpc.CallOption) (*UpdateProfileAdditionalInfoStatusResponse, error) {
	out := new(UpdateProfileAdditionalInfoStatusResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/UpdateProfileAdditionalInfoStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) GetProfileStatus(ctx context.Context, in *GetProfileStatusRequest, opts ...grpc.CallOption) (*GetProfileStatusResponse, error) {
	out := new(GetProfileStatusResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/GetProfileStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) SearchMot(ctx context.Context, in *SearchMotRequest, opts ...grpc.CallOption) (*SearchMotResponse, error) {
	out := new(SearchMotResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/SearchMot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierAccountServiceClient) UpdateCourierPhoneNumber(ctx context.Context, in *UpdateCourierPhoneNumberRequest, opts ...grpc.CallOption) (*UpdateCourierPhoneNumberResponse, error) {
	out := new(UpdateCourierPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/party.CourierAccountService/UpdateCourierPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourierAccountServiceServer is the server API for CourierAccountService service.
// All implementations must embed UnimplementedCourierAccountServiceServer
// for forward compatibility
type CourierAccountServiceServer interface {
	// creates profile for a new courier user
	// returns error if the courier user already exists
	CreateCourierAccount(context.Context, *CreateCourierAccountRequest) (*CreateCourierAccountResponse, error)
	// get profile of user by his token
	GetCourierAccount(context.Context, *GetCourierAccountRequest) (*GetCourierAccountResponse, error)
	// find profiles of users
	FindCourierAccounts(context.Context, *FindCourierAccountsRequest) (*FindCourierAccountsResponse, error)
	// updates general information of courier, or transportation type
	// all fields are optional, only available fields in the request are getting updated
	UpdateCourierAccount(context.Context, *UpdateCourierAccountRequest) (*UpdateCourierAccountResponse, error)
	// update passport, address, driver's license, ... of a courier user
	UpdateProfileAdditionalInfo(context.Context, *UpdateProfileAdditionalInfoRequest) (*UpdateProfileAdditionalInfoResponse, error)
	// delete passport, address, driver's license, ... of a courier user
	DeleteProfileAdditionalInfo(context.Context, *DeleteProfileAdditionalInfoRequest) (*DeleteProfileAdditionalInfoResponse, error)
	// get passport, or driver's license, or address, ... of a courier user by their token
	GetProfileAdditionalInfo(context.Context, *GetProfileAdditionalInfoRequest) (*GetProfileAdditionalInfoResponse, error)
	// get status of passport, or driver's license, or address, ... of a courier user by their token
	GetProfileAdditionalInfoStatus(context.Context, *GetProfileAdditionalInfoStatusRequest) (*GetProfileAdditionalInfoStatusResponse, error)
	// reject or accespt status of passport, or driver's license, or address, ... of a courier user by their token
	UpdateProfileAdditionalInfoStatus(context.Context, *UpdateProfileAdditionalInfoStatusRequest) (*UpdateProfileAdditionalInfoStatusResponse, error)
	// get status of profile
	GetProfileStatus(context.Context, *GetProfileStatusRequest) (*GetProfileStatusResponse, error)
	// search mot by registration number
	SearchMot(context.Context, *SearchMotRequest) (*SearchMotResponse, error)
	// update phone number
	UpdateCourierPhoneNumber(context.Context, *UpdateCourierPhoneNumberRequest) (*UpdateCourierPhoneNumberResponse, error)
	mustEmbedUnimplementedCourierAccountServiceServer()
}

// UnimplementedCourierAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourierAccountServiceServer struct {
}

func (UnimplementedCourierAccountServiceServer) CreateCourierAccount(context.Context, *CreateCourierAccountRequest) (*CreateCourierAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourierAccount not implemented")
}
func (UnimplementedCourierAccountServiceServer) GetCourierAccount(context.Context, *GetCourierAccountRequest) (*GetCourierAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierAccount not implemented")
}
func (UnimplementedCourierAccountServiceServer) FindCourierAccounts(context.Context, *FindCourierAccountsRequest) (*FindCourierAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCourierAccounts not implemented")
}
func (UnimplementedCourierAccountServiceServer) UpdateCourierAccount(context.Context, *UpdateCourierAccountRequest) (*UpdateCourierAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourierAccount not implemented")
}
func (UnimplementedCourierAccountServiceServer) UpdateProfileAdditionalInfo(context.Context, *UpdateProfileAdditionalInfoRequest) (*UpdateProfileAdditionalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfileAdditionalInfo not implemented")
}
func (UnimplementedCourierAccountServiceServer) DeleteProfileAdditionalInfo(context.Context, *DeleteProfileAdditionalInfoRequest) (*DeleteProfileAdditionalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfileAdditionalInfo not implemented")
}
func (UnimplementedCourierAccountServiceServer) GetProfileAdditionalInfo(context.Context, *GetProfileAdditionalInfoRequest) (*GetProfileAdditionalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileAdditionalInfo not implemented")
}
func (UnimplementedCourierAccountServiceServer) GetProfileAdditionalInfoStatus(context.Context, *GetProfileAdditionalInfoStatusRequest) (*GetProfileAdditionalInfoStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileAdditionalInfoStatus not implemented")
}
func (UnimplementedCourierAccountServiceServer) UpdateProfileAdditionalInfoStatus(context.Context, *UpdateProfileAdditionalInfoStatusRequest) (*UpdateProfileAdditionalInfoStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfileAdditionalInfoStatus not implemented")
}
func (UnimplementedCourierAccountServiceServer) GetProfileStatus(context.Context, *GetProfileStatusRequest) (*GetProfileStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileStatus not implemented")
}
func (UnimplementedCourierAccountServiceServer) SearchMot(context.Context, *SearchMotRequest) (*SearchMotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMot not implemented")
}
func (UnimplementedCourierAccountServiceServer) UpdateCourierPhoneNumber(context.Context, *UpdateCourierPhoneNumberRequest) (*UpdateCourierPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourierPhoneNumber not implemented")
}
func (UnimplementedCourierAccountServiceServer) mustEmbedUnimplementedCourierAccountServiceServer() {}

// UnsafeCourierAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierAccountServiceServer will
// result in compilation errors.
type UnsafeCourierAccountServiceServer interface {
	mustEmbedUnimplementedCourierAccountServiceServer()
}

func RegisterCourierAccountServiceServer(s grpc.ServiceRegistrar, srv CourierAccountServiceServer) {
	s.RegisterService(&CourierAccountService_ServiceDesc, srv)
}

func _CourierAccountService_CreateCourierAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourierAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).CreateCourierAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/CreateCourierAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).CreateCourierAccount(ctx, req.(*CreateCourierAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_GetCourierAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).GetCourierAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/GetCourierAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).GetCourierAccount(ctx, req.(*GetCourierAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_FindCourierAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCourierAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).FindCourierAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/FindCourierAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).FindCourierAccounts(ctx, req.(*FindCourierAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_UpdateCourierAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourierAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).UpdateCourierAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/UpdateCourierAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).UpdateCourierAccount(ctx, req.(*UpdateCourierAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_UpdateProfileAdditionalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileAdditionalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).UpdateProfileAdditionalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/UpdateProfileAdditionalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).UpdateProfileAdditionalInfo(ctx, req.(*UpdateProfileAdditionalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_DeleteProfileAdditionalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileAdditionalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).DeleteProfileAdditionalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/DeleteProfileAdditionalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).DeleteProfileAdditionalInfo(ctx, req.(*DeleteProfileAdditionalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_GetProfileAdditionalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileAdditionalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).GetProfileAdditionalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/GetProfileAdditionalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).GetProfileAdditionalInfo(ctx, req.(*GetProfileAdditionalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_GetProfileAdditionalInfoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileAdditionalInfoStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).GetProfileAdditionalInfoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/GetProfileAdditionalInfoStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).GetProfileAdditionalInfoStatus(ctx, req.(*GetProfileAdditionalInfoStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_UpdateProfileAdditionalInfoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileAdditionalInfoStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).UpdateProfileAdditionalInfoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/UpdateProfileAdditionalInfoStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).UpdateProfileAdditionalInfoStatus(ctx, req.(*UpdateProfileAdditionalInfoStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_GetProfileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).GetProfileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/GetProfileStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).GetProfileStatus(ctx, req.(*GetProfileStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_SearchMot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).SearchMot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/SearchMot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).SearchMot(ctx, req.(*SearchMotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierAccountService_UpdateCourierPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourierPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierAccountServiceServer).UpdateCourierPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.CourierAccountService/UpdateCourierPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierAccountServiceServer).UpdateCourierPhoneNumber(ctx, req.(*UpdateCourierPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourierAccountService_ServiceDesc is the grpc.ServiceDesc for CourierAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourierAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.CourierAccountService",
	HandlerType: (*CourierAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourierAccount",
			Handler:    _CourierAccountService_CreateCourierAccount_Handler,
		},
		{
			MethodName: "GetCourierAccount",
			Handler:    _CourierAccountService_GetCourierAccount_Handler,
		},
		{
			MethodName: "FindCourierAccounts",
			Handler:    _CourierAccountService_FindCourierAccounts_Handler,
		},
		{
			MethodName: "UpdateCourierAccount",
			Handler:    _CourierAccountService_UpdateCourierAccount_Handler,
		},
		{
			MethodName: "UpdateProfileAdditionalInfo",
			Handler:    _CourierAccountService_UpdateProfileAdditionalInfo_Handler,
		},
		{
			MethodName: "DeleteProfileAdditionalInfo",
			Handler:    _CourierAccountService_DeleteProfileAdditionalInfo_Handler,
		},
		{
			MethodName: "GetProfileAdditionalInfo",
			Handler:    _CourierAccountService_GetProfileAdditionalInfo_Handler,
		},
		{
			MethodName: "GetProfileAdditionalInfoStatus",
			Handler:    _CourierAccountService_GetProfileAdditionalInfoStatus_Handler,
		},
		{
			MethodName: "UpdateProfileAdditionalInfoStatus",
			Handler:    _CourierAccountService_UpdateProfileAdditionalInfoStatus_Handler,
		},
		{
			MethodName: "GetProfileStatus",
			Handler:    _CourierAccountService_GetProfileStatus_Handler,
		},
		{
			MethodName: "SearchMot",
			Handler:    _CourierAccountService_SearchMot_Handler,
		},
		{
			MethodName: "UpdateCourierPhoneNumber",
			Handler:    _CourierAccountService_UpdateCourierPhoneNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party.proto",
}

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentServiceClient interface {
	// upload a new document for a courier user, or update an existing one
	Upload(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error)
	// get all documents of a user. each document contains a expirable link to download file.
	GetDocumentsOfUser(ctx context.Context, in *GetDocumentsOfUserRequest, opts ...grpc.CallOption) (*GetDocumentsOfUserResponse, error)
	// get a document by its id. response contains expirable link to download file.
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	//download file by link generated in GetDocument requests
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	//download without generated link
	DirectDownload(ctx context.Context, in *DirectDownloadRequest, opts ...grpc.CallOption) (*DirectDownloadResponse, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) Upload(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error) {
	out := new(UploadDocumentResponse)
	err := c.cc.Invoke(ctx, "/party.DocumentService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocumentsOfUser(ctx context.Context, in *GetDocumentsOfUserRequest, opts ...grpc.CallOption) (*GetDocumentsOfUserResponse, error) {
	out := new(GetDocumentsOfUserResponse)
	err := c.cc.Invoke(ctx, "/party.DocumentService/GetDocumentsOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/party.DocumentService/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, "/party.DocumentService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) DirectDownload(ctx context.Context, in *DirectDownloadRequest, opts ...grpc.CallOption) (*DirectDownloadResponse, error) {
	out := new(DirectDownloadResponse)
	err := c.cc.Invoke(ctx, "/party.DocumentService/DirectDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServiceServer is the server API for DocumentService service.
// All implementations must embed UnimplementedDocumentServiceServer
// for forward compatibility
type DocumentServiceServer interface {
	// upload a new document for a courier user, or update an existing one
	Upload(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error)
	// get all documents of a user. each document contains a expirable link to download file.
	GetDocumentsOfUser(context.Context, *GetDocumentsOfUserRequest) (*GetDocumentsOfUserResponse, error)
	// get a document by its id. response contains expirable link to download file.
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	//download file by link generated in GetDocument requests
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	//download without generated link
	DirectDownload(context.Context, *DirectDownloadRequest) (*DirectDownloadResponse, error)
	mustEmbedUnimplementedDocumentServiceServer()
}

// UnimplementedDocumentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentServiceServer struct {
}

func (UnimplementedDocumentServiceServer) Upload(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocumentsOfUser(context.Context, *GetDocumentsOfUserRequest) (*GetDocumentsOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentsOfUser not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocumentServiceServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedDocumentServiceServer) DirectDownload(context.Context, *DirectDownloadRequest) (*DirectDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectDownload not implemented")
}
func (UnimplementedDocumentServiceServer) mustEmbedUnimplementedDocumentServiceServer() {}

// UnsafeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServiceServer will
// result in compilation errors.
type UnsafeDocumentServiceServer interface {
	mustEmbedUnimplementedDocumentServiceServer()
}

func RegisterDocumentServiceServer(s grpc.ServiceRegistrar, srv DocumentServiceServer) {
	s.RegisterService(&DocumentService_ServiceDesc, srv)
}

func _DocumentService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.DocumentService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).Upload(ctx, req.(*UploadDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocumentsOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentsOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocumentsOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.DocumentService/GetDocumentsOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocumentsOfUser(ctx, req.(*GetDocumentsOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.DocumentService/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.DocumentService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_DirectDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DirectDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.DocumentService/DirectDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DirectDownload(ctx, req.(*DirectDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentService_ServiceDesc is the grpc.ServiceDesc for DocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _DocumentService_Upload_Handler,
		},
		{
			MethodName: "GetDocumentsOfUser",
			Handler:    _DocumentService_GetDocumentsOfUser_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DocumentService_GetDocument_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _DocumentService_Download_Handler,
		},
		{
			MethodName: "DirectDownload",
			Handler:    _DocumentService_DirectDownload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party.proto",
}

// UserAccountServiceClient is the client API for UserAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAccountServiceClient interface {
	// creates profile for a new passenger user
	// returns error if the passenger user already exists
	CreateUserAccount(ctx context.Context, in *CreateUserAccountRequest, opts ...grpc.CallOption) (*CreateUserAccountResponse, error)
	// get profile of passenger user by his token
	GetUserAccount(ctx context.Context, in *GetUserAccountRequest, opts ...grpc.CallOption) (*GetUserAccountResponse, error)
	// find profiles of users
	FindUserAccounts(ctx context.Context, in *FindUserAccountsRequest, opts ...grpc.CallOption) (*FindUserAccountsResponse, error)
	// updates general information of passenger, or transportation type
	// all fields are optional, only available fields in the request are getting updated
	UpdateUserAccount(ctx context.Context, in *UpdateUserAccountRequest, opts ...grpc.CallOption) (*UpdateUserAccountResponse, error)
	// update card of a passenger user
	UpdateUserCard(ctx context.Context, in *UpdateUserCardRequest, opts ...grpc.CallOption) (*UpdateUserCardResponse, error)
	// delete card of a passenger user
	DeleteUserCard(ctx context.Context, in *DeleteUserCardRequest, opts ...grpc.CallOption) (*DeleteUserCardResponse, error)
	// get card of a passenger user by their token
	GetUserCard(ctx context.Context, in *GetUserCardRequest, opts ...grpc.CallOption) (*GetUserCardResponse, error)
	// update phone number
	UpdateUserPhoneNumber(ctx context.Context, in *UpdateUserPhoneNumberRequest, opts ...grpc.CallOption) (*UpdateUserPhoneNumberResponse, error)
	GetUserAddress(ctx context.Context, in *GetUserAddressRequest, opts ...grpc.CallOption) (*GetUserAddressResponse, error)
	UpdateUserAddress(ctx context.Context, in *UpdateUserAddressRequest, opts ...grpc.CallOption) (*UpdateUserAddressResponse, error)
}

type userAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAccountServiceClient(cc grpc.ClientConnInterface) UserAccountServiceClient {
	return &userAccountServiceClient{cc}
}

func (c *userAccountServiceClient) CreateUserAccount(ctx context.Context, in *CreateUserAccountRequest, opts ...grpc.CallOption) (*CreateUserAccountResponse, error) {
	out := new(CreateUserAccountResponse)
	err := c.cc.Invoke(ctx, "/party.UserAccountService/CreateUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) GetUserAccount(ctx context.Context, in *GetUserAccountRequest, opts ...grpc.CallOption) (*GetUserAccountResponse, error) {
	out := new(GetUserAccountResponse)
	err := c.cc.Invoke(ctx, "/party.UserAccountService/GetUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) FindUserAccounts(ctx context.Context, in *FindUserAccountsRequest, opts ...grpc.CallOption) (*FindUserAccountsResponse, error) {
	out := new(FindUserAccountsResponse)
	err := c.cc.Invoke(ctx, "/party.UserAccountService/FindUserAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UpdateUserAccount(ctx context.Context, in *UpdateUserAccountRequest, opts ...grpc.CallOption) (*UpdateUserAccountResponse, error) {
	out := new(UpdateUserAccountResponse)
	err := c.cc.Invoke(ctx, "/party.UserAccountService/UpdateUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UpdateUserCard(ctx context.Context, in *UpdateUserCardRequest, opts ...grpc.CallOption) (*UpdateUserCardResponse, error) {
	out := new(UpdateUserCardResponse)
	err := c.cc.Invoke(ctx, "/party.UserAccountService/UpdateUserCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) DeleteUserCard(ctx context.Context, in *DeleteUserCardRequest, opts ...grpc.CallOption) (*DeleteUserCardResponse, error) {
	out := new(DeleteUserCardResponse)
	err := c.cc.Invoke(ctx, "/party.UserAccountService/DeleteUserCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) GetUserCard(ctx context.Context, in *GetUserCardRequest, opts ...grpc.CallOption) (*GetUserCardResponse, error) {
	out := new(GetUserCardResponse)
	err := c.cc.Invoke(ctx, "/party.UserAccountService/GetUserCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UpdateUserPhoneNumber(ctx context.Context, in *UpdateUserPhoneNumberRequest, opts ...grpc.CallOption) (*UpdateUserPhoneNumberResponse, error) {
	out := new(UpdateUserPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/party.UserAccountService/UpdateUserPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) GetUserAddress(ctx context.Context, in *GetUserAddressRequest, opts ...grpc.CallOption) (*GetUserAddressResponse, error) {
	out := new(GetUserAddressResponse)
	err := c.cc.Invoke(ctx, "/party.UserAccountService/GetUserAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UpdateUserAddress(ctx context.Context, in *UpdateUserAddressRequest, opts ...grpc.CallOption) (*UpdateUserAddressResponse, error) {
	out := new(UpdateUserAddressResponse)
	err := c.cc.Invoke(ctx, "/party.UserAccountService/UpdateUserAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccountServiceServer is the server API for UserAccountService service.
// All implementations must embed UnimplementedUserAccountServiceServer
// for forward compatibility
type UserAccountServiceServer interface {
	// creates profile for a new passenger user
	// returns error if the passenger user already exists
	CreateUserAccount(context.Context, *CreateUserAccountRequest) (*CreateUserAccountResponse, error)
	// get profile of passenger user by his token
	GetUserAccount(context.Context, *GetUserAccountRequest) (*GetUserAccountResponse, error)
	// find profiles of users
	FindUserAccounts(context.Context, *FindUserAccountsRequest) (*FindUserAccountsResponse, error)
	// updates general information of passenger, or transportation type
	// all fields are optional, only available fields in the request are getting updated
	UpdateUserAccount(context.Context, *UpdateUserAccountRequest) (*UpdateUserAccountResponse, error)
	// update card of a passenger user
	UpdateUserCard(context.Context, *UpdateUserCardRequest) (*UpdateUserCardResponse, error)
	// delete card of a passenger user
	DeleteUserCard(context.Context, *DeleteUserCardRequest) (*DeleteUserCardResponse, error)
	// get card of a passenger user by their token
	GetUserCard(context.Context, *GetUserCardRequest) (*GetUserCardResponse, error)
	// update phone number
	UpdateUserPhoneNumber(context.Context, *UpdateUserPhoneNumberRequest) (*UpdateUserPhoneNumberResponse, error)
	GetUserAddress(context.Context, *GetUserAddressRequest) (*GetUserAddressResponse, error)
	UpdateUserAddress(context.Context, *UpdateUserAddressRequest) (*UpdateUserAddressResponse, error)
	mustEmbedUnimplementedUserAccountServiceServer()
}

// UnimplementedUserAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAccountServiceServer struct {
}

func (UnimplementedUserAccountServiceServer) CreateUserAccount(context.Context, *CreateUserAccountRequest) (*CreateUserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAccount not implemented")
}
func (UnimplementedUserAccountServiceServer) GetUserAccount(context.Context, *GetUserAccountRequest) (*GetUserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccount not implemented")
}
func (UnimplementedUserAccountServiceServer) FindUserAccounts(context.Context, *FindUserAccountsRequest) (*FindUserAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserAccounts not implemented")
}
func (UnimplementedUserAccountServiceServer) UpdateUserAccount(context.Context, *UpdateUserAccountRequest) (*UpdateUserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAccount not implemented")
}
func (UnimplementedUserAccountServiceServer) UpdateUserCard(context.Context, *UpdateUserCardRequest) (*UpdateUserCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCard not implemented")
}
func (UnimplementedUserAccountServiceServer) DeleteUserCard(context.Context, *DeleteUserCardRequest) (*DeleteUserCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserCard not implemented")
}
func (UnimplementedUserAccountServiceServer) GetUserCard(context.Context, *GetUserCardRequest) (*GetUserCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCard not implemented")
}
func (UnimplementedUserAccountServiceServer) UpdateUserPhoneNumber(context.Context, *UpdateUserPhoneNumberRequest) (*UpdateUserPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPhoneNumber not implemented")
}
func (UnimplementedUserAccountServiceServer) GetUserAddress(context.Context, *GetUserAddressRequest) (*GetUserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAddress not implemented")
}
func (UnimplementedUserAccountServiceServer) UpdateUserAddress(context.Context, *UpdateUserAddressRequest) (*UpdateUserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAddress not implemented")
}
func (UnimplementedUserAccountServiceServer) mustEmbedUnimplementedUserAccountServiceServer() {}

// UnsafeUserAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAccountServiceServer will
// result in compilation errors.
type UnsafeUserAccountServiceServer interface {
	mustEmbedUnimplementedUserAccountServiceServer()
}

func RegisterUserAccountServiceServer(s grpc.ServiceRegistrar, srv UserAccountServiceServer) {
	s.RegisterService(&UserAccountService_ServiceDesc, srv)
}

func _UserAccountService_CreateUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).CreateUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserAccountService/CreateUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).CreateUserAccount(ctx, req.(*CreateUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_GetUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).GetUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserAccountService/GetUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).GetUserAccount(ctx, req.(*GetUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_FindUserAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).FindUserAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserAccountService/FindUserAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).FindUserAccounts(ctx, req.(*FindUserAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UpdateUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UpdateUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserAccountService/UpdateUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UpdateUserAccount(ctx, req.(*UpdateUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UpdateUserCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UpdateUserCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserAccountService/UpdateUserCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UpdateUserCard(ctx, req.(*UpdateUserCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_DeleteUserCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).DeleteUserCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserAccountService/DeleteUserCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).DeleteUserCard(ctx, req.(*DeleteUserCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_GetUserCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).GetUserCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserAccountService/GetUserCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).GetUserCard(ctx, req.(*GetUserCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UpdateUserPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UpdateUserPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserAccountService/UpdateUserPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UpdateUserPhoneNumber(ctx, req.(*UpdateUserPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_GetUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).GetUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserAccountService/GetUserAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).GetUserAddress(ctx, req.(*GetUserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UpdateUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UpdateUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserAccountService/UpdateUserAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UpdateUserAddress(ctx, req.(*UpdateUserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAccountService_ServiceDesc is the grpc.ServiceDesc for UserAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.UserAccountService",
	HandlerType: (*UserAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserAccount",
			Handler:    _UserAccountService_CreateUserAccount_Handler,
		},
		{
			MethodName: "GetUserAccount",
			Handler:    _UserAccountService_GetUserAccount_Handler,
		},
		{
			MethodName: "FindUserAccounts",
			Handler:    _UserAccountService_FindUserAccounts_Handler,
		},
		{
			MethodName: "UpdateUserAccount",
			Handler:    _UserAccountService_UpdateUserAccount_Handler,
		},
		{
			MethodName: "UpdateUserCard",
			Handler:    _UserAccountService_UpdateUserCard_Handler,
		},
		{
			MethodName: "DeleteUserCard",
			Handler:    _UserAccountService_DeleteUserCard_Handler,
		},
		{
			MethodName: "GetUserCard",
			Handler:    _UserAccountService_GetUserCard_Handler,
		},
		{
			MethodName: "UpdateUserPhoneNumber",
			Handler:    _UserAccountService_UpdateUserPhoneNumber_Handler,
		},
		{
			MethodName: "GetUserAddress",
			Handler:    _UserAccountService_GetUserAddress_Handler,
		},
		{
			MethodName: "UpdateUserAddress",
			Handler:    _UserAccountService_UpdateUserAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party.proto",
}

// UserStatusServiceClient is the client API for UserStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStatusServiceClient interface {
	// get user status of courier
	GetCourierUserStatus(ctx context.Context, in *GetCourierUserStatusRequest, opts ...grpc.CallOption) (*GetCourierUserStatusResponse, error)
	// update user status of courier
	UpdateCourierUserStatus(ctx context.Context, in *UpdateCourierUserStatusRequest, opts ...grpc.CallOption) (*UpdateCourierUserStatusResponse, error)
	// get user status of courier
	GetClientUserStatus(ctx context.Context, in *GetClientUserStatusRequest, opts ...grpc.CallOption) (*GetClientUserStatusResponse, error)
	// update user status of courier
	UpdateClientUserStatus(ctx context.Context, in *UpdateClientUserStatusRequest, opts ...grpc.CallOption) (*UpdateClientUserStatusResponse, error)
}

type userStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStatusServiceClient(cc grpc.ClientConnInterface) UserStatusServiceClient {
	return &userStatusServiceClient{cc}
}

func (c *userStatusServiceClient) GetCourierUserStatus(ctx context.Context, in *GetCourierUserStatusRequest, opts ...grpc.CallOption) (*GetCourierUserStatusResponse, error) {
	out := new(GetCourierUserStatusResponse)
	err := c.cc.Invoke(ctx, "/party.UserStatusService/GetCourierUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) UpdateCourierUserStatus(ctx context.Context, in *UpdateCourierUserStatusRequest, opts ...grpc.CallOption) (*UpdateCourierUserStatusResponse, error) {
	out := new(UpdateCourierUserStatusResponse)
	err := c.cc.Invoke(ctx, "/party.UserStatusService/UpdateCourierUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) GetClientUserStatus(ctx context.Context, in *GetClientUserStatusRequest, opts ...grpc.CallOption) (*GetClientUserStatusResponse, error) {
	out := new(GetClientUserStatusResponse)
	err := c.cc.Invoke(ctx, "/party.UserStatusService/GetClientUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) UpdateClientUserStatus(ctx context.Context, in *UpdateClientUserStatusRequest, opts ...grpc.CallOption) (*UpdateClientUserStatusResponse, error) {
	out := new(UpdateClientUserStatusResponse)
	err := c.cc.Invoke(ctx, "/party.UserStatusService/UpdateClientUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserStatusServiceServer is the server API for UserStatusService service.
// All implementations must embed UnimplementedUserStatusServiceServer
// for forward compatibility
type UserStatusServiceServer interface {
	// get user status of courier
	GetCourierUserStatus(context.Context, *GetCourierUserStatusRequest) (*GetCourierUserStatusResponse, error)
	// update user status of courier
	UpdateCourierUserStatus(context.Context, *UpdateCourierUserStatusRequest) (*UpdateCourierUserStatusResponse, error)
	// get user status of courier
	GetClientUserStatus(context.Context, *GetClientUserStatusRequest) (*GetClientUserStatusResponse, error)
	// update user status of courier
	UpdateClientUserStatus(context.Context, *UpdateClientUserStatusRequest) (*UpdateClientUserStatusResponse, error)
	mustEmbedUnimplementedUserStatusServiceServer()
}

// UnimplementedUserStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserStatusServiceServer struct {
}

func (UnimplementedUserStatusServiceServer) GetCourierUserStatus(context.Context, *GetCourierUserStatusRequest) (*GetCourierUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierUserStatus not implemented")
}
func (UnimplementedUserStatusServiceServer) UpdateCourierUserStatus(context.Context, *UpdateCourierUserStatusRequest) (*UpdateCourierUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourierUserStatus not implemented")
}
func (UnimplementedUserStatusServiceServer) GetClientUserStatus(context.Context, *GetClientUserStatusRequest) (*GetClientUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientUserStatus not implemented")
}
func (UnimplementedUserStatusServiceServer) UpdateClientUserStatus(context.Context, *UpdateClientUserStatusRequest) (*UpdateClientUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientUserStatus not implemented")
}
func (UnimplementedUserStatusServiceServer) mustEmbedUnimplementedUserStatusServiceServer() {}

// UnsafeUserStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStatusServiceServer will
// result in compilation errors.
type UnsafeUserStatusServiceServer interface {
	mustEmbedUnimplementedUserStatusServiceServer()
}

func RegisterUserStatusServiceServer(s grpc.ServiceRegistrar, srv UserStatusServiceServer) {
	s.RegisterService(&UserStatusService_ServiceDesc, srv)
}

func _UserStatusService_GetCourierUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).GetCourierUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserStatusService/GetCourierUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).GetCourierUserStatus(ctx, req.(*GetCourierUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_UpdateCourierUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourierUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).UpdateCourierUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserStatusService/UpdateCourierUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).UpdateCourierUserStatus(ctx, req.(*UpdateCourierUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_GetClientUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).GetClientUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserStatusService/GetClientUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).GetClientUserStatus(ctx, req.(*GetClientUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_UpdateClientUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).UpdateClientUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserStatusService/UpdateClientUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).UpdateClientUserStatus(ctx, req.(*UpdateClientUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserStatusService_ServiceDesc is the grpc.ServiceDesc for UserStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.UserStatusService",
	HandlerType: (*UserStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourierUserStatus",
			Handler:    _UserStatusService_GetCourierUserStatus_Handler,
		},
		{
			MethodName: "UpdateCourierUserStatus",
			Handler:    _UserStatusService_UpdateCourierUserStatus_Handler,
		},
		{
			MethodName: "GetClientUserStatus",
			Handler:    _UserStatusService_GetClientUserStatus_Handler,
		},
		{
			MethodName: "UpdateClientUserStatus",
			Handler:    _UserStatusService_UpdateClientUserStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party.proto",
}

// UserStatusByTokenServiceClient is the client API for UserStatusByTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStatusByTokenServiceClient interface {
	// get user status of courier
	GetCourierUserStatusByToken(ctx context.Context, in *GetCourierUserStatusByTokenRequest, opts ...grpc.CallOption) (*GetCourierUserStatusResponse, error)
	// update user status of courier
	UpdateCourierUserStatusByToken(ctx context.Context, in *UpdateCourierUserStatusByTokenRequest, opts ...grpc.CallOption) (*UpdateCourierUserStatusResponse, error)
	// get user status of courier
	GetClientUserStatusByToken(ctx context.Context, in *GetClientUserStatusByTokenRequest, opts ...grpc.CallOption) (*GetClientUserStatusResponse, error)
	// update user status of courier
	UpdateClientUserStatusByToken(ctx context.Context, in *UpdateClientUserStatusByTokenRequest, opts ...grpc.CallOption) (*UpdateClientUserStatusResponse, error)
}

type userStatusByTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStatusByTokenServiceClient(cc grpc.ClientConnInterface) UserStatusByTokenServiceClient {
	return &userStatusByTokenServiceClient{cc}
}

func (c *userStatusByTokenServiceClient) GetCourierUserStatusByToken(ctx context.Context, in *GetCourierUserStatusByTokenRequest, opts ...grpc.CallOption) (*GetCourierUserStatusResponse, error) {
	out := new(GetCourierUserStatusResponse)
	err := c.cc.Invoke(ctx, "/party.UserStatusByTokenService/GetCourierUserStatusByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusByTokenServiceClient) UpdateCourierUserStatusByToken(ctx context.Context, in *UpdateCourierUserStatusByTokenRequest, opts ...grpc.CallOption) (*UpdateCourierUserStatusResponse, error) {
	out := new(UpdateCourierUserStatusResponse)
	err := c.cc.Invoke(ctx, "/party.UserStatusByTokenService/UpdateCourierUserStatusByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusByTokenServiceClient) GetClientUserStatusByToken(ctx context.Context, in *GetClientUserStatusByTokenRequest, opts ...grpc.CallOption) (*GetClientUserStatusResponse, error) {
	out := new(GetClientUserStatusResponse)
	err := c.cc.Invoke(ctx, "/party.UserStatusByTokenService/GetClientUserStatusByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusByTokenServiceClient) UpdateClientUserStatusByToken(ctx context.Context, in *UpdateClientUserStatusByTokenRequest, opts ...grpc.CallOption) (*UpdateClientUserStatusResponse, error) {
	out := new(UpdateClientUserStatusResponse)
	err := c.cc.Invoke(ctx, "/party.UserStatusByTokenService/UpdateClientUserStatusByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserStatusByTokenServiceServer is the server API for UserStatusByTokenService service.
// All implementations must embed UnimplementedUserStatusByTokenServiceServer
// for forward compatibility
type UserStatusByTokenServiceServer interface {
	// get user status of courier
	GetCourierUserStatusByToken(context.Context, *GetCourierUserStatusByTokenRequest) (*GetCourierUserStatusResponse, error)
	// update user status of courier
	UpdateCourierUserStatusByToken(context.Context, *UpdateCourierUserStatusByTokenRequest) (*UpdateCourierUserStatusResponse, error)
	// get user status of courier
	GetClientUserStatusByToken(context.Context, *GetClientUserStatusByTokenRequest) (*GetClientUserStatusResponse, error)
	// update user status of courier
	UpdateClientUserStatusByToken(context.Context, *UpdateClientUserStatusByTokenRequest) (*UpdateClientUserStatusResponse, error)
	mustEmbedUnimplementedUserStatusByTokenServiceServer()
}

// UnimplementedUserStatusByTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserStatusByTokenServiceServer struct {
}

func (UnimplementedUserStatusByTokenServiceServer) GetCourierUserStatusByToken(context.Context, *GetCourierUserStatusByTokenRequest) (*GetCourierUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierUserStatusByToken not implemented")
}
func (UnimplementedUserStatusByTokenServiceServer) UpdateCourierUserStatusByToken(context.Context, *UpdateCourierUserStatusByTokenRequest) (*UpdateCourierUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourierUserStatusByToken not implemented")
}
func (UnimplementedUserStatusByTokenServiceServer) GetClientUserStatusByToken(context.Context, *GetClientUserStatusByTokenRequest) (*GetClientUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientUserStatusByToken not implemented")
}
func (UnimplementedUserStatusByTokenServiceServer) UpdateClientUserStatusByToken(context.Context, *UpdateClientUserStatusByTokenRequest) (*UpdateClientUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientUserStatusByToken not implemented")
}
func (UnimplementedUserStatusByTokenServiceServer) mustEmbedUnimplementedUserStatusByTokenServiceServer() {
}

// UnsafeUserStatusByTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStatusByTokenServiceServer will
// result in compilation errors.
type UnsafeUserStatusByTokenServiceServer interface {
	mustEmbedUnimplementedUserStatusByTokenServiceServer()
}

func RegisterUserStatusByTokenServiceServer(s grpc.ServiceRegistrar, srv UserStatusByTokenServiceServer) {
	s.RegisterService(&UserStatusByTokenService_ServiceDesc, srv)
}

func _UserStatusByTokenService_GetCourierUserStatusByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierUserStatusByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusByTokenServiceServer).GetCourierUserStatusByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserStatusByTokenService/GetCourierUserStatusByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusByTokenServiceServer).GetCourierUserStatusByToken(ctx, req.(*GetCourierUserStatusByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusByTokenService_UpdateCourierUserStatusByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourierUserStatusByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusByTokenServiceServer).UpdateCourierUserStatusByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserStatusByTokenService/UpdateCourierUserStatusByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusByTokenServiceServer).UpdateCourierUserStatusByToken(ctx, req.(*UpdateCourierUserStatusByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusByTokenService_GetClientUserStatusByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientUserStatusByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusByTokenServiceServer).GetClientUserStatusByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserStatusByTokenService/GetClientUserStatusByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusByTokenServiceServer).GetClientUserStatusByToken(ctx, req.(*GetClientUserStatusByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusByTokenService_UpdateClientUserStatusByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientUserStatusByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusByTokenServiceServer).UpdateClientUserStatusByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UserStatusByTokenService/UpdateClientUserStatusByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusByTokenServiceServer).UpdateClientUserStatusByToken(ctx, req.(*UpdateClientUserStatusByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserStatusByTokenService_ServiceDesc is the grpc.ServiceDesc for UserStatusByTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStatusByTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.UserStatusByTokenService",
	HandlerType: (*UserStatusByTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourierUserStatusByToken",
			Handler:    _UserStatusByTokenService_GetCourierUserStatusByToken_Handler,
		},
		{
			MethodName: "UpdateCourierUserStatusByToken",
			Handler:    _UserStatusByTokenService_UpdateCourierUserStatusByToken_Handler,
		},
		{
			MethodName: "GetClientUserStatusByToken",
			Handler:    _UserStatusByTokenService_GetClientUserStatusByToken_Handler,
		},
		{
			MethodName: "UpdateClientUserStatusByToken",
			Handler:    _UserStatusByTokenService_UpdateClientUserStatusByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party.proto",
}

// PartyAdminServiceClient is the client API for PartyAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartyAdminServiceClient interface {
	ServiceGetCourierRegistrationStat(ctx context.Context, in *ServiceGetCourierRegistrationStatRequest, opts ...grpc.CallOption) (*GetRegistrationStatResponse, error)
	ServiceGetClientRegistrationStat(ctx context.Context, in *ServiceGetClientRegistrationStatRequest, opts ...grpc.CallOption) (*GetRegistrationStatResponse, error)
	ServiceGetCourierRegistration(ctx context.Context, in *ServiceGetCourierRegistrationRequest, opts ...grpc.CallOption) (*GetCourierRegistrationResponse, error)
	ServiceGetClientRegistration(ctx context.Context, in *ServiceGetClientRegistrationRequest, opts ...grpc.CallOption) (*GetClientRegistrationResponse, error)
	ServiceGetDocumentsOfUser(ctx context.Context, in *ServiceGetDocumentsOfUserRequest, opts ...grpc.CallOption) (*GetDocumentsOfUserResponse, error)
	ServiceGetProfileAdditionalInfo(ctx context.Context, in *ServiceGetProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*GetProfileAdditionalInfoResponse, error)
	ServiceUpdateProfileStatus(ctx context.Context, in *ServiceUpdateProfileStatusRequest, opts ...grpc.CallOption) (*UpdateProfileAdditionalInfoStatusResponse, error)
}

type partyAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartyAdminServiceClient(cc grpc.ClientConnInterface) PartyAdminServiceClient {
	return &partyAdminServiceClient{cc}
}

func (c *partyAdminServiceClient) ServiceGetCourierRegistrationStat(ctx context.Context, in *ServiceGetCourierRegistrationStatRequest, opts ...grpc.CallOption) (*GetRegistrationStatResponse, error) {
	out := new(GetRegistrationStatResponse)
	err := c.cc.Invoke(ctx, "/party.PartyAdminService/ServiceGetCourierRegistrationStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAdminServiceClient) ServiceGetClientRegistrationStat(ctx context.Context, in *ServiceGetClientRegistrationStatRequest, opts ...grpc.CallOption) (*GetRegistrationStatResponse, error) {
	out := new(GetRegistrationStatResponse)
	err := c.cc.Invoke(ctx, "/party.PartyAdminService/ServiceGetClientRegistrationStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAdminServiceClient) ServiceGetCourierRegistration(ctx context.Context, in *ServiceGetCourierRegistrationRequest, opts ...grpc.CallOption) (*GetCourierRegistrationResponse, error) {
	out := new(GetCourierRegistrationResponse)
	err := c.cc.Invoke(ctx, "/party.PartyAdminService/ServiceGetCourierRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAdminServiceClient) ServiceGetClientRegistration(ctx context.Context, in *ServiceGetClientRegistrationRequest, opts ...grpc.CallOption) (*GetClientRegistrationResponse, error) {
	out := new(GetClientRegistrationResponse)
	err := c.cc.Invoke(ctx, "/party.PartyAdminService/ServiceGetClientRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAdminServiceClient) ServiceGetDocumentsOfUser(ctx context.Context, in *ServiceGetDocumentsOfUserRequest, opts ...grpc.CallOption) (*GetDocumentsOfUserResponse, error) {
	out := new(GetDocumentsOfUserResponse)
	err := c.cc.Invoke(ctx, "/party.PartyAdminService/ServiceGetDocumentsOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAdminServiceClient) ServiceGetProfileAdditionalInfo(ctx context.Context, in *ServiceGetProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*GetProfileAdditionalInfoResponse, error) {
	out := new(GetProfileAdditionalInfoResponse)
	err := c.cc.Invoke(ctx, "/party.PartyAdminService/ServiceGetProfileAdditionalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAdminServiceClient) ServiceUpdateProfileStatus(ctx context.Context, in *ServiceUpdateProfileStatusRequest, opts ...grpc.CallOption) (*UpdateProfileAdditionalInfoStatusResponse, error) {
	out := new(UpdateProfileAdditionalInfoStatusResponse)
	err := c.cc.Invoke(ctx, "/party.PartyAdminService/ServiceUpdateProfileStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartyAdminServiceServer is the server API for PartyAdminService service.
// All implementations must embed UnimplementedPartyAdminServiceServer
// for forward compatibility
type PartyAdminServiceServer interface {
	ServiceGetCourierRegistrationStat(context.Context, *ServiceGetCourierRegistrationStatRequest) (*GetRegistrationStatResponse, error)
	ServiceGetClientRegistrationStat(context.Context, *ServiceGetClientRegistrationStatRequest) (*GetRegistrationStatResponse, error)
	ServiceGetCourierRegistration(context.Context, *ServiceGetCourierRegistrationRequest) (*GetCourierRegistrationResponse, error)
	ServiceGetClientRegistration(context.Context, *ServiceGetClientRegistrationRequest) (*GetClientRegistrationResponse, error)
	ServiceGetDocumentsOfUser(context.Context, *ServiceGetDocumentsOfUserRequest) (*GetDocumentsOfUserResponse, error)
	ServiceGetProfileAdditionalInfo(context.Context, *ServiceGetProfileAdditionalInfoRequest) (*GetProfileAdditionalInfoResponse, error)
	ServiceUpdateProfileStatus(context.Context, *ServiceUpdateProfileStatusRequest) (*UpdateProfileAdditionalInfoStatusResponse, error)
	mustEmbedUnimplementedPartyAdminServiceServer()
}

// UnimplementedPartyAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartyAdminServiceServer struct {
}

func (UnimplementedPartyAdminServiceServer) ServiceGetCourierRegistrationStat(context.Context, *ServiceGetCourierRegistrationStatRequest) (*GetRegistrationStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceGetCourierRegistrationStat not implemented")
}
func (UnimplementedPartyAdminServiceServer) ServiceGetClientRegistrationStat(context.Context, *ServiceGetClientRegistrationStatRequest) (*GetRegistrationStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceGetClientRegistrationStat not implemented")
}
func (UnimplementedPartyAdminServiceServer) ServiceGetCourierRegistration(context.Context, *ServiceGetCourierRegistrationRequest) (*GetCourierRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceGetCourierRegistration not implemented")
}
func (UnimplementedPartyAdminServiceServer) ServiceGetClientRegistration(context.Context, *ServiceGetClientRegistrationRequest) (*GetClientRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceGetClientRegistration not implemented")
}
func (UnimplementedPartyAdminServiceServer) ServiceGetDocumentsOfUser(context.Context, *ServiceGetDocumentsOfUserRequest) (*GetDocumentsOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceGetDocumentsOfUser not implemented")
}
func (UnimplementedPartyAdminServiceServer) ServiceGetProfileAdditionalInfo(context.Context, *ServiceGetProfileAdditionalInfoRequest) (*GetProfileAdditionalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceGetProfileAdditionalInfo not implemented")
}
func (UnimplementedPartyAdminServiceServer) ServiceUpdateProfileStatus(context.Context, *ServiceUpdateProfileStatusRequest) (*UpdateProfileAdditionalInfoStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceUpdateProfileStatus not implemented")
}
func (UnimplementedPartyAdminServiceServer) mustEmbedUnimplementedPartyAdminServiceServer() {}

// UnsafePartyAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartyAdminServiceServer will
// result in compilation errors.
type UnsafePartyAdminServiceServer interface {
	mustEmbedUnimplementedPartyAdminServiceServer()
}

func RegisterPartyAdminServiceServer(s grpc.ServiceRegistrar, srv PartyAdminServiceServer) {
	s.RegisterService(&PartyAdminService_ServiceDesc, srv)
}

func _PartyAdminService_ServiceGetCourierRegistrationStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGetCourierRegistrationStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAdminServiceServer).ServiceGetCourierRegistrationStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.PartyAdminService/ServiceGetCourierRegistrationStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAdminServiceServer).ServiceGetCourierRegistrationStat(ctx, req.(*ServiceGetCourierRegistrationStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAdminService_ServiceGetClientRegistrationStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGetClientRegistrationStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAdminServiceServer).ServiceGetClientRegistrationStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.PartyAdminService/ServiceGetClientRegistrationStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAdminServiceServer).ServiceGetClientRegistrationStat(ctx, req.(*ServiceGetClientRegistrationStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAdminService_ServiceGetCourierRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGetCourierRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAdminServiceServer).ServiceGetCourierRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.PartyAdminService/ServiceGetCourierRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAdminServiceServer).ServiceGetCourierRegistration(ctx, req.(*ServiceGetCourierRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAdminService_ServiceGetClientRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGetClientRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAdminServiceServer).ServiceGetClientRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.PartyAdminService/ServiceGetClientRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAdminServiceServer).ServiceGetClientRegistration(ctx, req.(*ServiceGetClientRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAdminService_ServiceGetDocumentsOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGetDocumentsOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAdminServiceServer).ServiceGetDocumentsOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.PartyAdminService/ServiceGetDocumentsOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAdminServiceServer).ServiceGetDocumentsOfUser(ctx, req.(*ServiceGetDocumentsOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAdminService_ServiceGetProfileAdditionalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGetProfileAdditionalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAdminServiceServer).ServiceGetProfileAdditionalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.PartyAdminService/ServiceGetProfileAdditionalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAdminServiceServer).ServiceGetProfileAdditionalInfo(ctx, req.(*ServiceGetProfileAdditionalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAdminService_ServiceUpdateProfileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceUpdateProfileStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAdminServiceServer).ServiceUpdateProfileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.PartyAdminService/ServiceUpdateProfileStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAdminServiceServer).ServiceUpdateProfileStatus(ctx, req.(*ServiceUpdateProfileStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartyAdminService_ServiceDesc is the grpc.ServiceDesc for PartyAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartyAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.PartyAdminService",
	HandlerType: (*PartyAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceGetCourierRegistrationStat",
			Handler:    _PartyAdminService_ServiceGetCourierRegistrationStat_Handler,
		},
		{
			MethodName: "ServiceGetClientRegistrationStat",
			Handler:    _PartyAdminService_ServiceGetClientRegistrationStat_Handler,
		},
		{
			MethodName: "ServiceGetCourierRegistration",
			Handler:    _PartyAdminService_ServiceGetCourierRegistration_Handler,
		},
		{
			MethodName: "ServiceGetClientRegistration",
			Handler:    _PartyAdminService_ServiceGetClientRegistration_Handler,
		},
		{
			MethodName: "ServiceGetDocumentsOfUser",
			Handler:    _PartyAdminService_ServiceGetDocumentsOfUser_Handler,
		},
		{
			MethodName: "ServiceGetProfileAdditionalInfo",
			Handler:    _PartyAdminService_ServiceGetProfileAdditionalInfo_Handler,
		},
		{
			MethodName: "ServiceUpdateProfileStatus",
			Handler:    _PartyAdminService_ServiceUpdateProfileStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party.proto",
}

// UaaServiceClient is the client API for UaaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UaaServiceClient interface {
	FindAccount(ctx context.Context, in *FindAccountRequest, opts ...grpc.CallOption) (*FindAccountResponse, error)
	RegisterClaim(ctx context.Context, in *RegisterClaimRequest, opts ...grpc.CallOption) (*RegisterClaimResponse, error)
}

type uaaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUaaServiceClient(cc grpc.ClientConnInterface) UaaServiceClient {
	return &uaaServiceClient{cc}
}

func (c *uaaServiceClient) FindAccount(ctx context.Context, in *FindAccountRequest, opts ...grpc.CallOption) (*FindAccountResponse, error) {
	out := new(FindAccountResponse)
	err := c.cc.Invoke(ctx, "/party.UaaService/FindAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uaaServiceClient) RegisterClaim(ctx context.Context, in *RegisterClaimRequest, opts ...grpc.CallOption) (*RegisterClaimResponse, error) {
	out := new(RegisterClaimResponse)
	err := c.cc.Invoke(ctx, "/party.UaaService/RegisterClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UaaServiceServer is the server API for UaaService service.
// All implementations must embed UnimplementedUaaServiceServer
// for forward compatibility
type UaaServiceServer interface {
	FindAccount(context.Context, *FindAccountRequest) (*FindAccountResponse, error)
	RegisterClaim(context.Context, *RegisterClaimRequest) (*RegisterClaimResponse, error)
	mustEmbedUnimplementedUaaServiceServer()
}

// UnimplementedUaaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUaaServiceServer struct {
}

func (UnimplementedUaaServiceServer) FindAccount(context.Context, *FindAccountRequest) (*FindAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccount not implemented")
}
func (UnimplementedUaaServiceServer) RegisterClaim(context.Context, *RegisterClaimRequest) (*RegisterClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClaim not implemented")
}
func (UnimplementedUaaServiceServer) mustEmbedUnimplementedUaaServiceServer() {}

// UnsafeUaaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UaaServiceServer will
// result in compilation errors.
type UnsafeUaaServiceServer interface {
	mustEmbedUnimplementedUaaServiceServer()
}

func RegisterUaaServiceServer(s grpc.ServiceRegistrar, srv UaaServiceServer) {
	s.RegisterService(&UaaService_ServiceDesc, srv)
}

func _UaaService_FindAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UaaServiceServer).FindAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UaaService/FindAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UaaServiceServer).FindAccount(ctx, req.(*FindAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UaaService_RegisterClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UaaServiceServer).RegisterClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.UaaService/RegisterClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UaaServiceServer).RegisterClaim(ctx, req.(*RegisterClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UaaService_ServiceDesc is the grpc.ServiceDesc for UaaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UaaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.UaaService",
	HandlerType: (*UaaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAccount",
			Handler:    _UaaService_FindAccount_Handler,
		},
		{
			MethodName: "RegisterClaim",
			Handler:    _UaaService_RegisterClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party.proto",
}

// InterServiceClient is the client API for InterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterServiceClient interface {
	InterServiceGetProfileAdditionalInfo(ctx context.Context, in *InterServiceGetProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*GetProfileAdditionalInfoResponse, error)
	InterServiceUpdateProfileAdditionalInfo(ctx context.Context, in *InterServiceUpdateProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*UpdateProfileAdditionalInfoResponse, error)
	InterServiceFindCourierAccounts(ctx context.Context, in *InterServiceFindCourierAccountsRequest, opts ...grpc.CallOption) (*FindCourierAccountsResponse, error)
	InterServiceGetDocumentsOfUser(ctx context.Context, in *InterServiceGetDocumentsOfUserRequest, opts ...grpc.CallOption) (*GetDocumentsOfUserResponse, error)
	OpenGetCourierAccount(ctx context.Context, in *OpenGetCourierAccountRequest, opts ...grpc.CallOption) (*GetCourierAccountResponse, error)
	OpenGetProfileAdditionalInfo(ctx context.Context, in *OpenGetProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*GetProfileAdditionalInfoResponse, error)
	OpenGetDocumentsOfUser(ctx context.Context, in *OpenGetDocumentsOfUserRequest, opts ...grpc.CallOption) (*GetDocumentsOfUserResponse, error)
	OpenGetUserAccount(ctx context.Context, in *OpenGetUserAccountRequest, opts ...grpc.CallOption) (*GetUserAccountResponse, error)
	OpenGetCourierPublicInfo(ctx context.Context, in *OpenGetCourierPublicInfoRequest, opts ...grpc.CallOption) (*OpenGetCourierPublicInfoResponse, error)
}

type interServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterServiceClient(cc grpc.ClientConnInterface) InterServiceClient {
	return &interServiceClient{cc}
}

func (c *interServiceClient) InterServiceGetProfileAdditionalInfo(ctx context.Context, in *InterServiceGetProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*GetProfileAdditionalInfoResponse, error) {
	out := new(GetProfileAdditionalInfoResponse)
	err := c.cc.Invoke(ctx, "/party.InterService/InterServiceGetProfileAdditionalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) InterServiceUpdateProfileAdditionalInfo(ctx context.Context, in *InterServiceUpdateProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*UpdateProfileAdditionalInfoResponse, error) {
	out := new(UpdateProfileAdditionalInfoResponse)
	err := c.cc.Invoke(ctx, "/party.InterService/InterServiceUpdateProfileAdditionalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) InterServiceFindCourierAccounts(ctx context.Context, in *InterServiceFindCourierAccountsRequest, opts ...grpc.CallOption) (*FindCourierAccountsResponse, error) {
	out := new(FindCourierAccountsResponse)
	err := c.cc.Invoke(ctx, "/party.InterService/InterServiceFindCourierAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) InterServiceGetDocumentsOfUser(ctx context.Context, in *InterServiceGetDocumentsOfUserRequest, opts ...grpc.CallOption) (*GetDocumentsOfUserResponse, error) {
	out := new(GetDocumentsOfUserResponse)
	err := c.cc.Invoke(ctx, "/party.InterService/InterServiceGetDocumentsOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) OpenGetCourierAccount(ctx context.Context, in *OpenGetCourierAccountRequest, opts ...grpc.CallOption) (*GetCourierAccountResponse, error) {
	out := new(GetCourierAccountResponse)
	err := c.cc.Invoke(ctx, "/party.InterService/OpenGetCourierAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) OpenGetProfileAdditionalInfo(ctx context.Context, in *OpenGetProfileAdditionalInfoRequest, opts ...grpc.CallOption) (*GetProfileAdditionalInfoResponse, error) {
	out := new(GetProfileAdditionalInfoResponse)
	err := c.cc.Invoke(ctx, "/party.InterService/OpenGetProfileAdditionalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) OpenGetDocumentsOfUser(ctx context.Context, in *OpenGetDocumentsOfUserRequest, opts ...grpc.CallOption) (*GetDocumentsOfUserResponse, error) {
	out := new(GetDocumentsOfUserResponse)
	err := c.cc.Invoke(ctx, "/party.InterService/OpenGetDocumentsOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) OpenGetUserAccount(ctx context.Context, in *OpenGetUserAccountRequest, opts ...grpc.CallOption) (*GetUserAccountResponse, error) {
	out := new(GetUserAccountResponse)
	err := c.cc.Invoke(ctx, "/party.InterService/OpenGetUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) OpenGetCourierPublicInfo(ctx context.Context, in *OpenGetCourierPublicInfoRequest, opts ...grpc.CallOption) (*OpenGetCourierPublicInfoResponse, error) {
	out := new(OpenGetCourierPublicInfoResponse)
	err := c.cc.Invoke(ctx, "/party.InterService/OpenGetCourierPublicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterServiceServer is the server API for InterService service.
// All implementations must embed UnimplementedInterServiceServer
// for forward compatibility
type InterServiceServer interface {
	InterServiceGetProfileAdditionalInfo(context.Context, *InterServiceGetProfileAdditionalInfoRequest) (*GetProfileAdditionalInfoResponse, error)
	InterServiceUpdateProfileAdditionalInfo(context.Context, *InterServiceUpdateProfileAdditionalInfoRequest) (*UpdateProfileAdditionalInfoResponse, error)
	InterServiceFindCourierAccounts(context.Context, *InterServiceFindCourierAccountsRequest) (*FindCourierAccountsResponse, error)
	InterServiceGetDocumentsOfUser(context.Context, *InterServiceGetDocumentsOfUserRequest) (*GetDocumentsOfUserResponse, error)
	OpenGetCourierAccount(context.Context, *OpenGetCourierAccountRequest) (*GetCourierAccountResponse, error)
	OpenGetProfileAdditionalInfo(context.Context, *OpenGetProfileAdditionalInfoRequest) (*GetProfileAdditionalInfoResponse, error)
	OpenGetDocumentsOfUser(context.Context, *OpenGetDocumentsOfUserRequest) (*GetDocumentsOfUserResponse, error)
	OpenGetUserAccount(context.Context, *OpenGetUserAccountRequest) (*GetUserAccountResponse, error)
	OpenGetCourierPublicInfo(context.Context, *OpenGetCourierPublicInfoRequest) (*OpenGetCourierPublicInfoResponse, error)
	mustEmbedUnimplementedInterServiceServer()
}

// UnimplementedInterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterServiceServer struct {
}

func (UnimplementedInterServiceServer) InterServiceGetProfileAdditionalInfo(context.Context, *InterServiceGetProfileAdditionalInfoRequest) (*GetProfileAdditionalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterServiceGetProfileAdditionalInfo not implemented")
}
func (UnimplementedInterServiceServer) InterServiceUpdateProfileAdditionalInfo(context.Context, *InterServiceUpdateProfileAdditionalInfoRequest) (*UpdateProfileAdditionalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterServiceUpdateProfileAdditionalInfo not implemented")
}
func (UnimplementedInterServiceServer) InterServiceFindCourierAccounts(context.Context, *InterServiceFindCourierAccountsRequest) (*FindCourierAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterServiceFindCourierAccounts not implemented")
}
func (UnimplementedInterServiceServer) InterServiceGetDocumentsOfUser(context.Context, *InterServiceGetDocumentsOfUserRequest) (*GetDocumentsOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterServiceGetDocumentsOfUser not implemented")
}
func (UnimplementedInterServiceServer) OpenGetCourierAccount(context.Context, *OpenGetCourierAccountRequest) (*GetCourierAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGetCourierAccount not implemented")
}
func (UnimplementedInterServiceServer) OpenGetProfileAdditionalInfo(context.Context, *OpenGetProfileAdditionalInfoRequest) (*GetProfileAdditionalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGetProfileAdditionalInfo not implemented")
}
func (UnimplementedInterServiceServer) OpenGetDocumentsOfUser(context.Context, *OpenGetDocumentsOfUserRequest) (*GetDocumentsOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGetDocumentsOfUser not implemented")
}
func (UnimplementedInterServiceServer) OpenGetUserAccount(context.Context, *OpenGetUserAccountRequest) (*GetUserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGetUserAccount not implemented")
}
func (UnimplementedInterServiceServer) OpenGetCourierPublicInfo(context.Context, *OpenGetCourierPublicInfoRequest) (*OpenGetCourierPublicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGetCourierPublicInfo not implemented")
}
func (UnimplementedInterServiceServer) mustEmbedUnimplementedInterServiceServer() {}

// UnsafeInterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterServiceServer will
// result in compilation errors.
type UnsafeInterServiceServer interface {
	mustEmbedUnimplementedInterServiceServer()
}

func RegisterInterServiceServer(s grpc.ServiceRegistrar, srv InterServiceServer) {
	s.RegisterService(&InterService_ServiceDesc, srv)
}

func _InterService_InterServiceGetProfileAdditionalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterServiceGetProfileAdditionalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).InterServiceGetProfileAdditionalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.InterService/InterServiceGetProfileAdditionalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).InterServiceGetProfileAdditionalInfo(ctx, req.(*InterServiceGetProfileAdditionalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_InterServiceUpdateProfileAdditionalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterServiceUpdateProfileAdditionalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).InterServiceUpdateProfileAdditionalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.InterService/InterServiceUpdateProfileAdditionalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).InterServiceUpdateProfileAdditionalInfo(ctx, req.(*InterServiceUpdateProfileAdditionalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_InterServiceFindCourierAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterServiceFindCourierAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).InterServiceFindCourierAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.InterService/InterServiceFindCourierAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).InterServiceFindCourierAccounts(ctx, req.(*InterServiceFindCourierAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_InterServiceGetDocumentsOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterServiceGetDocumentsOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).InterServiceGetDocumentsOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.InterService/InterServiceGetDocumentsOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).InterServiceGetDocumentsOfUser(ctx, req.(*InterServiceGetDocumentsOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_OpenGetCourierAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenGetCourierAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).OpenGetCourierAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.InterService/OpenGetCourierAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).OpenGetCourierAccount(ctx, req.(*OpenGetCourierAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_OpenGetProfileAdditionalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenGetProfileAdditionalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).OpenGetProfileAdditionalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.InterService/OpenGetProfileAdditionalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).OpenGetProfileAdditionalInfo(ctx, req.(*OpenGetProfileAdditionalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_OpenGetDocumentsOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenGetDocumentsOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).OpenGetDocumentsOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.InterService/OpenGetDocumentsOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).OpenGetDocumentsOfUser(ctx, req.(*OpenGetDocumentsOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_OpenGetUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenGetUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).OpenGetUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.InterService/OpenGetUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).OpenGetUserAccount(ctx, req.(*OpenGetUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_OpenGetCourierPublicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenGetCourierPublicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).OpenGetCourierPublicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.InterService/OpenGetCourierPublicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).OpenGetCourierPublicInfo(ctx, req.(*OpenGetCourierPublicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterService_ServiceDesc is the grpc.ServiceDesc for InterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.InterService",
	HandlerType: (*InterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InterServiceGetProfileAdditionalInfo",
			Handler:    _InterService_InterServiceGetProfileAdditionalInfo_Handler,
		},
		{
			MethodName: "InterServiceUpdateProfileAdditionalInfo",
			Handler:    _InterService_InterServiceUpdateProfileAdditionalInfo_Handler,
		},
		{
			MethodName: "InterServiceFindCourierAccounts",
			Handler:    _InterService_InterServiceFindCourierAccounts_Handler,
		},
		{
			MethodName: "InterServiceGetDocumentsOfUser",
			Handler:    _InterService_InterServiceGetDocumentsOfUser_Handler,
		},
		{
			MethodName: "OpenGetCourierAccount",
			Handler:    _InterService_OpenGetCourierAccount_Handler,
		},
		{
			MethodName: "OpenGetProfileAdditionalInfo",
			Handler:    _InterService_OpenGetProfileAdditionalInfo_Handler,
		},
		{
			MethodName: "OpenGetDocumentsOfUser",
			Handler:    _InterService_OpenGetDocumentsOfUser_Handler,
		},
		{
			MethodName: "OpenGetUserAccount",
			Handler:    _InterService_OpenGetUserAccount_Handler,
		},
		{
			MethodName: "OpenGetCourierPublicInfo",
			Handler:    _InterService_OpenGetCourierPublicInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party.proto",
}
