// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: announcement.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateAnnouncementRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateAnnouncementRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *CreateAnnouncementRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := CreateAnnouncementRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreateAnnouncementRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := AnnouncementType_name[int32(m.GetType())]; !ok {
		err := CreateAnnouncementRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := AnnouncementMessageType_name[int32(m.GetMessageType())]; !ok {
		err := CreateAnnouncementRequestValidationError{
			field:  "MessageType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetText()) < 1 {
		err := CreateAnnouncementRequestValidationError{
			field:  "Text",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAnnouncementRequestMultiError(errors)
	}
	return nil
}

// CreateAnnouncementRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAnnouncementRequest.Validate(true) if the
// designated constraints aren't met.
type CreateAnnouncementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAnnouncementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAnnouncementRequestMultiError) AllErrors() []error { return m }

// CreateAnnouncementRequestValidationError is the validation error returned by
// CreateAnnouncementRequest.Validate if the designated constraints aren't met.
type CreateAnnouncementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAnnouncementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAnnouncementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAnnouncementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAnnouncementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAnnouncementRequestValidationError) ErrorName() string {
	return "CreateAnnouncementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAnnouncementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAnnouncementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAnnouncementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAnnouncementRequestValidationError{}

// Validate checks the field values on CreateAnnouncementResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateAnnouncementResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *CreateAnnouncementResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AnnouncementId

	if len(errors) > 0 {
		return CreateAnnouncementResponseMultiError(errors)
	}
	return nil
}

// CreateAnnouncementResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAnnouncementResponse.Validate(true) if
// the designated constraints aren't met.
type CreateAnnouncementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAnnouncementResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAnnouncementResponseMultiError) AllErrors() []error { return m }

// CreateAnnouncementResponseValidationError is the validation error returned
// by CreateAnnouncementResponse.Validate if the designated constraints aren't met.
type CreateAnnouncementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAnnouncementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAnnouncementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAnnouncementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAnnouncementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAnnouncementResponseValidationError) ErrorName() string {
	return "CreateAnnouncementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAnnouncementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAnnouncementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAnnouncementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAnnouncementResponseValidationError{}

// Validate checks the field values on AssignAnnouncementToUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in AssignAnnouncementToUserRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *AssignAnnouncementToUserRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := AssignAnnouncementToUserRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAnnouncementId() <= 0 {
		err := AssignAnnouncementToUserRequestValidationError{
			field:  "AnnouncementId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignAnnouncementToUserRequestMultiError(errors)
	}
	return nil
}

// AssignAnnouncementToUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// AssignAnnouncementToUserRequest.Validate(true) if the designated
// constraints aren't met.
type AssignAnnouncementToUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignAnnouncementToUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignAnnouncementToUserRequestMultiError) AllErrors() []error { return m }

// AssignAnnouncementToUserRequestValidationError is the validation error
// returned by AssignAnnouncementToUserRequest.Validate if the designated
// constraints aren't met.
type AssignAnnouncementToUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignAnnouncementToUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignAnnouncementToUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignAnnouncementToUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignAnnouncementToUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignAnnouncementToUserRequestValidationError) ErrorName() string {
	return "AssignAnnouncementToUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignAnnouncementToUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignAnnouncementToUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignAnnouncementToUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignAnnouncementToUserRequestValidationError{}

// Validate checks the field values on AssignAnnouncementToUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in AssignAnnouncementToUserResponseMultiError, or
// nil if none found. Otherwise, only the first error is returned, if any.
func (m *AssignAnnouncementToUserResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AssignAnnouncementToUserResponseMultiError(errors)
	}
	return nil
}

// AssignAnnouncementToUserResponseMultiError is an error wrapping multiple
// validation errors returned by
// AssignAnnouncementToUserResponse.Validate(true) if the designated
// constraints aren't met.
type AssignAnnouncementToUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignAnnouncementToUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignAnnouncementToUserResponseMultiError) AllErrors() []error { return m }

// AssignAnnouncementToUserResponseValidationError is the validation error
// returned by AssignAnnouncementToUserResponse.Validate if the designated
// constraints aren't met.
type AssignAnnouncementToUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignAnnouncementToUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignAnnouncementToUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignAnnouncementToUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignAnnouncementToUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignAnnouncementToUserResponseValidationError) ErrorName() string {
	return "AssignAnnouncementToUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignAnnouncementToUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignAnnouncementToUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignAnnouncementToUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignAnnouncementToUserResponseValidationError{}

// Validate checks the field values on GetAnnouncementsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetAnnouncementsRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetAnnouncementsRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := GetAnnouncementsRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetAnnouncementsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetAnnouncementsRequestMultiError(errors)
	}
	return nil
}

// GetAnnouncementsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAnnouncementsRequest.Validate(true) if the designated
// constraints aren't met.
type GetAnnouncementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAnnouncementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAnnouncementsRequestMultiError) AllErrors() []error { return m }

// GetAnnouncementsRequestValidationError is the validation error returned by
// GetAnnouncementsRequest.Validate if the designated constraints aren't met.
type GetAnnouncementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnnouncementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnnouncementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnnouncementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnnouncementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnnouncementsRequestValidationError) ErrorName() string {
	return "GetAnnouncementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnnouncementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnnouncementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnnouncementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnnouncementsRequestValidationError{}

// Validate checks the field values on GetAnnouncementsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetAnnouncementsResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetAnnouncementsResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAnnouncements() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetAnnouncementsResponseValidationError{
					field:  fmt.Sprintf("Announcements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetAnnouncementsResponseMultiError(errors)
	}
	return nil
}

// GetAnnouncementsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAnnouncementsResponse.Validate(true) if the
// designated constraints aren't met.
type GetAnnouncementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAnnouncementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAnnouncementsResponseMultiError) AllErrors() []error { return m }

// GetAnnouncementsResponseValidationError is the validation error returned by
// GetAnnouncementsResponse.Validate if the designated constraints aren't met.
type GetAnnouncementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnnouncementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnnouncementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnnouncementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnnouncementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnnouncementsResponseValidationError) ErrorName() string {
	return "GetAnnouncementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnnouncementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnnouncementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnnouncementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnnouncementsResponseValidationError{}

// Validate checks the field values on GetUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in GetUsersRequestMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *GetUsersRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := GetUsersRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch m.Filter.(type) {

	case *GetUsersRequest_AnnouncementId:
		// no validation rules for AnnouncementId

	case *GetUsersRequest_UserId:
		// no validation rules for UserId

	}

	if len(errors) > 0 {
		return GetUsersRequestMultiError(errors)
	}
	return nil
}

// GetUsersRequestMultiError is an error wrapping multiple validation errors
// returned by GetUsersRequest.Validate(true) if the designated constraints
// aren't met.
type GetUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersRequestMultiError) AllErrors() []error { return m }

// GetUsersRequestValidationError is the validation error returned by
// GetUsersRequest.Validate if the designated constraints aren't met.
type GetUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersRequestValidationError) ErrorName() string { return "GetUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersRequestValidationError{}

// Validate checks the field values on GetUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in GetUsersResponseMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *GetUsersResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersResponseMultiError(errors)
	}
	return nil
}

// GetUsersResponseMultiError is an error wrapping multiple validation errors
// returned by GetUsersResponse.Validate(true) if the designated constraints
// aren't met.
type GetUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersResponseMultiError) AllErrors() []error { return m }

// GetUsersResponseValidationError is the validation error returned by
// GetUsersResponse.Validate if the designated constraints aren't met.
type GetUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersResponseValidationError) ErrorName() string { return "GetUsersResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersResponseValidationError{}

// Validate checks the field values on GetAnnouncementsOfUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetAnnouncementsOfUserRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetAnnouncementsOfUserRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := GetAnnouncementsOfUserRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAnnouncementsOfUserRequestMultiError(errors)
	}
	return nil
}

// GetAnnouncementsOfUserRequestMultiError is an error wrapping multiple
// validation errors returned by GetAnnouncementsOfUserRequest.Validate(true)
// if the designated constraints aren't met.
type GetAnnouncementsOfUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAnnouncementsOfUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAnnouncementsOfUserRequestMultiError) AllErrors() []error { return m }

// GetAnnouncementsOfUserRequestValidationError is the validation error
// returned by GetAnnouncementsOfUserRequest.Validate if the designated
// constraints aren't met.
type GetAnnouncementsOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnnouncementsOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnnouncementsOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnnouncementsOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnnouncementsOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnnouncementsOfUserRequestValidationError) ErrorName() string {
	return "GetAnnouncementsOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnnouncementsOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnnouncementsOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnnouncementsOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnnouncementsOfUserRequestValidationError{}

// Validate checks the field values on GetAnnouncementsOfUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetAnnouncementsOfUserResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetAnnouncementsOfUserResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAnnouncements() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetAnnouncementsOfUserResponseValidationError{
					field:  fmt.Sprintf("Announcements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetAnnouncementsOfUserResponseMultiError(errors)
	}
	return nil
}

// GetAnnouncementsOfUserResponseMultiError is an error wrapping multiple
// validation errors returned by GetAnnouncementsOfUserResponse.Validate(true)
// if the designated constraints aren't met.
type GetAnnouncementsOfUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAnnouncementsOfUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAnnouncementsOfUserResponseMultiError) AllErrors() []error { return m }

// GetAnnouncementsOfUserResponseValidationError is the validation error
// returned by GetAnnouncementsOfUserResponse.Validate if the designated
// constraints aren't met.
type GetAnnouncementsOfUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnnouncementsOfUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnnouncementsOfUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnnouncementsOfUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnnouncementsOfUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnnouncementsOfUserResponseValidationError) ErrorName() string {
	return "GetAnnouncementsOfUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnnouncementsOfUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnnouncementsOfUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnnouncementsOfUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnnouncementsOfUserResponseValidationError{}

// Validate checks the field values on Announcement with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// AnnouncementMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *Announcement) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Type

	// no validation rules for MessageType

	// no validation rules for Text

	// no validation rules for Time

	if len(errors) > 0 {
		return AnnouncementMultiError(errors)
	}
	return nil
}

// AnnouncementMultiError is an error wrapping multiple validation errors
// returned by Announcement.Validate(true) if the designated constraints
// aren't met.
type AnnouncementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnouncementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnouncementMultiError) AllErrors() []error { return m }

// AnnouncementValidationError is the validation error returned by
// Announcement.Validate if the designated constraints aren't met.
type AnnouncementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnouncementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnouncementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnouncementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnouncementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnouncementValidationError) ErrorName() string { return "AnnouncementValidationError" }

// Error satisfies the builtin error interface
func (e AnnouncementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnouncement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnouncementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnouncementValidationError{}

// Validate checks the field values on AnnouncementUser with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in AnnouncementUserMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *AnnouncementUser) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetAnnouncement()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = AnnouncementUserValidationError{
				field:  "Announcement",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return AnnouncementUserMultiError(errors)
	}
	return nil
}

// AnnouncementUserMultiError is an error wrapping multiple validation errors
// returned by AnnouncementUser.Validate(true) if the designated constraints
// aren't met.
type AnnouncementUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnouncementUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnouncementUserMultiError) AllErrors() []error { return m }

// AnnouncementUserValidationError is the validation error returned by
// AnnouncementUser.Validate if the designated constraints aren't met.
type AnnouncementUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnouncementUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnouncementUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnouncementUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnouncementUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnouncementUserValidationError) ErrorName() string { return "AnnouncementUserValidationError" }

// Error satisfies the builtin error interface
func (e AnnouncementUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnouncementUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnouncementUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnouncementUserValidationError{}

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// PaginationMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *Pagination) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	// no validation rules for SortType

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}
	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.Validate(true) if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}
