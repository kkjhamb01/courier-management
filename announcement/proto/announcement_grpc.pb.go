// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnnouncementAdminServiceClient is the client API for AnnouncementAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnouncementAdminServiceClient interface {
	CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*CreateAnnouncementResponse, error)
	AssignAnnouncementToUser(ctx context.Context, in *AssignAnnouncementToUserRequest, opts ...grpc.CallOption) (*AssignAnnouncementToUserResponse, error)
	GetAnnouncements(ctx context.Context, in *GetAnnouncementsRequest, opts ...grpc.CallOption) (*GetAnnouncementsResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
}

type announcementAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncementAdminServiceClient(cc grpc.ClientConnInterface) AnnouncementAdminServiceClient {
	return &announcementAdminServiceClient{cc}
}

func (c *announcementAdminServiceClient) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*CreateAnnouncementResponse, error) {
	out := new(CreateAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/announcement.AnnouncementAdminService/CreateAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementAdminServiceClient) AssignAnnouncementToUser(ctx context.Context, in *AssignAnnouncementToUserRequest, opts ...grpc.CallOption) (*AssignAnnouncementToUserResponse, error) {
	out := new(AssignAnnouncementToUserResponse)
	err := c.cc.Invoke(ctx, "/announcement.AnnouncementAdminService/AssignAnnouncementToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementAdminServiceClient) GetAnnouncements(ctx context.Context, in *GetAnnouncementsRequest, opts ...grpc.CallOption) (*GetAnnouncementsResponse, error) {
	out := new(GetAnnouncementsResponse)
	err := c.cc.Invoke(ctx, "/announcement.AnnouncementAdminService/GetAnnouncements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementAdminServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/announcement.AnnouncementAdminService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnouncementAdminServiceServer is the server API for AnnouncementAdminService service.
// All implementations must embed UnimplementedAnnouncementAdminServiceServer
// for forward compatibility
type AnnouncementAdminServiceServer interface {
	CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*CreateAnnouncementResponse, error)
	AssignAnnouncementToUser(context.Context, *AssignAnnouncementToUserRequest) (*AssignAnnouncementToUserResponse, error)
	GetAnnouncements(context.Context, *GetAnnouncementsRequest) (*GetAnnouncementsResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	mustEmbedUnimplementedAnnouncementAdminServiceServer()
}

// UnimplementedAnnouncementAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnnouncementAdminServiceServer struct {
}

func (UnimplementedAnnouncementAdminServiceServer) CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*CreateAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncement not implemented")
}
func (UnimplementedAnnouncementAdminServiceServer) AssignAnnouncementToUser(context.Context, *AssignAnnouncementToUserRequest) (*AssignAnnouncementToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAnnouncementToUser not implemented")
}
func (UnimplementedAnnouncementAdminServiceServer) GetAnnouncements(context.Context, *GetAnnouncementsRequest) (*GetAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncements not implemented")
}
func (UnimplementedAnnouncementAdminServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAnnouncementAdminServiceServer) mustEmbedUnimplementedAnnouncementAdminServiceServer() {
}

// UnsafeAnnouncementAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncementAdminServiceServer will
// result in compilation errors.
type UnsafeAnnouncementAdminServiceServer interface {
	mustEmbedUnimplementedAnnouncementAdminServiceServer()
}

func RegisterAnnouncementAdminServiceServer(s grpc.ServiceRegistrar, srv AnnouncementAdminServiceServer) {
	s.RegisterService(&AnnouncementAdminService_ServiceDesc, srv)
}

func _AnnouncementAdminService_CreateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementAdminServiceServer).CreateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/announcement.AnnouncementAdminService/CreateAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementAdminServiceServer).CreateAnnouncement(ctx, req.(*CreateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementAdminService_AssignAnnouncementToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAnnouncementToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementAdminServiceServer).AssignAnnouncementToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/announcement.AnnouncementAdminService/AssignAnnouncementToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementAdminServiceServer).AssignAnnouncementToUser(ctx, req.(*AssignAnnouncementToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementAdminService_GetAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementAdminServiceServer).GetAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/announcement.AnnouncementAdminService/GetAnnouncements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementAdminServiceServer).GetAnnouncements(ctx, req.(*GetAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementAdminService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementAdminServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/announcement.AnnouncementAdminService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementAdminServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnouncementAdminService_ServiceDesc is the grpc.ServiceDesc for AnnouncementAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnouncementAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "announcement.AnnouncementAdminService",
	HandlerType: (*AnnouncementAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnnouncement",
			Handler:    _AnnouncementAdminService_CreateAnnouncement_Handler,
		},
		{
			MethodName: "AssignAnnouncementToUser",
			Handler:    _AnnouncementAdminService_AssignAnnouncementToUser_Handler,
		},
		{
			MethodName: "GetAnnouncements",
			Handler:    _AnnouncementAdminService_GetAnnouncements_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _AnnouncementAdminService_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "announcement.proto",
}

// AnnouncementUserServiceClient is the client API for AnnouncementUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnouncementUserServiceClient interface {
	GetAnnouncementsOfUser(ctx context.Context, in *GetAnnouncementsOfUserRequest, opts ...grpc.CallOption) (*GetAnnouncementsOfUserResponse, error)
}

type announcementUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncementUserServiceClient(cc grpc.ClientConnInterface) AnnouncementUserServiceClient {
	return &announcementUserServiceClient{cc}
}

func (c *announcementUserServiceClient) GetAnnouncementsOfUser(ctx context.Context, in *GetAnnouncementsOfUserRequest, opts ...grpc.CallOption) (*GetAnnouncementsOfUserResponse, error) {
	out := new(GetAnnouncementsOfUserResponse)
	err := c.cc.Invoke(ctx, "/announcement.AnnouncementUserService/GetAnnouncementsOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnouncementUserServiceServer is the server API for AnnouncementUserService service.
// All implementations must embed UnimplementedAnnouncementUserServiceServer
// for forward compatibility
type AnnouncementUserServiceServer interface {
	GetAnnouncementsOfUser(context.Context, *GetAnnouncementsOfUserRequest) (*GetAnnouncementsOfUserResponse, error)
	mustEmbedUnimplementedAnnouncementUserServiceServer()
}

// UnimplementedAnnouncementUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnnouncementUserServiceServer struct {
}

func (UnimplementedAnnouncementUserServiceServer) GetAnnouncementsOfUser(context.Context, *GetAnnouncementsOfUserRequest) (*GetAnnouncementsOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncementsOfUser not implemented")
}
func (UnimplementedAnnouncementUserServiceServer) mustEmbedUnimplementedAnnouncementUserServiceServer() {
}

// UnsafeAnnouncementUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncementUserServiceServer will
// result in compilation errors.
type UnsafeAnnouncementUserServiceServer interface {
	mustEmbedUnimplementedAnnouncementUserServiceServer()
}

func RegisterAnnouncementUserServiceServer(s grpc.ServiceRegistrar, srv AnnouncementUserServiceServer) {
	s.RegisterService(&AnnouncementUserService_ServiceDesc, srv)
}

func _AnnouncementUserService_GetAnnouncementsOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementsOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementUserServiceServer).GetAnnouncementsOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/announcement.AnnouncementUserService/GetAnnouncementsOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementUserServiceServer).GetAnnouncementsOfUser(ctx, req.(*GetAnnouncementsOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnouncementUserService_ServiceDesc is the grpc.ServiceDesc for AnnouncementUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnouncementUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "announcement.AnnouncementUserService",
	HandlerType: (*AnnouncementUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnnouncementsOfUser",
			Handler:    _AnnouncementUserService_GetAnnouncementsOfUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "announcement.proto",
}
