// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rating.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateCourierRatingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateCourierRatingRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *CreateCourierRatingRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := CreateCourierRatingRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRideId()) < 1 {
		err := CreateCourierRatingRequestValidationError{
			field:  "RideId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRating() == nil {
		err := CreateCourierRatingRequestValidationError{
			field:  "Rating",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetRating()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = CreateCourierRatingRequestValidationError{
				field:  "Rating",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return CreateCourierRatingRequestMultiError(errors)
	}
	return nil
}

// CreateCourierRatingRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCourierRatingRequest.Validate(true) if
// the designated constraints aren't met.
type CreateCourierRatingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCourierRatingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCourierRatingRequestMultiError) AllErrors() []error { return m }

// CreateCourierRatingRequestValidationError is the validation error returned
// by CreateCourierRatingRequest.Validate if the designated constraints aren't met.
type CreateCourierRatingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourierRatingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourierRatingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourierRatingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourierRatingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourierRatingRequestValidationError) ErrorName() string {
	return "CreateCourierRatingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourierRatingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourierRatingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourierRatingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourierRatingRequestValidationError{}

// Validate checks the field values on CreateCourierRatingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateCourierRatingResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *CreateCourierRatingResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCourierRatingResponseMultiError(errors)
	}
	return nil
}

// CreateCourierRatingResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCourierRatingResponse.Validate(true) if
// the designated constraints aren't met.
type CreateCourierRatingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCourierRatingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCourierRatingResponseMultiError) AllErrors() []error { return m }

// CreateCourierRatingResponseValidationError is the validation error returned
// by CreateCourierRatingResponse.Validate if the designated constraints
// aren't met.
type CreateCourierRatingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourierRatingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourierRatingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourierRatingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourierRatingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourierRatingResponseValidationError) ErrorName() string {
	return "CreateCourierRatingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourierRatingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourierRatingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourierRatingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourierRatingResponseValidationError{}

// Validate checks the field values on CourierRating with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// CourierRatingMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *CourierRating) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Message

	if len(errors) > 0 {
		return CourierRatingMultiError(errors)
	}
	return nil
}

// CourierRatingMultiError is an error wrapping multiple validation errors
// returned by CourierRating.Validate(true) if the designated constraints
// aren't met.
type CourierRatingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourierRatingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourierRatingMultiError) AllErrors() []error { return m }

// CourierRatingValidationError is the validation error returned by
// CourierRating.Validate if the designated constraints aren't met.
type CourierRatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourierRatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourierRatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourierRatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourierRatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourierRatingValidationError) ErrorName() string { return "CourierRatingValidationError" }

// Error satisfies the builtin error interface
func (e CourierRatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourierRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourierRatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourierRatingValidationError{}

// Validate checks the field values on CreateClientRatingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateClientRatingRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *CreateClientRatingRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := CreateClientRatingRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRideId()) < 1 {
		err := CreateClientRatingRequestValidationError{
			field:  "RideId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRating() == nil {
		err := CreateClientRatingRequestValidationError{
			field:  "Rating",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetRating()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = CreateClientRatingRequestValidationError{
				field:  "Rating",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return CreateClientRatingRequestMultiError(errors)
	}
	return nil
}

// CreateClientRatingRequestMultiError is an error wrapping multiple validation
// errors returned by CreateClientRatingRequest.Validate(true) if the
// designated constraints aren't met.
type CreateClientRatingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClientRatingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClientRatingRequestMultiError) AllErrors() []error { return m }

// CreateClientRatingRequestValidationError is the validation error returned by
// CreateClientRatingRequest.Validate if the designated constraints aren't met.
type CreateClientRatingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClientRatingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClientRatingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClientRatingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClientRatingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClientRatingRequestValidationError) ErrorName() string {
	return "CreateClientRatingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClientRatingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClientRatingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClientRatingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClientRatingRequestValidationError{}

// Validate checks the field values on CreateClientRatingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateClientRatingResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *CreateClientRatingResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateClientRatingResponseMultiError(errors)
	}
	return nil
}

// CreateClientRatingResponseMultiError is an error wrapping multiple
// validation errors returned by CreateClientRatingResponse.Validate(true) if
// the designated constraints aren't met.
type CreateClientRatingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClientRatingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClientRatingResponseMultiError) AllErrors() []error { return m }

// CreateClientRatingResponseValidationError is the validation error returned
// by CreateClientRatingResponse.Validate if the designated constraints aren't met.
type CreateClientRatingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClientRatingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClientRatingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClientRatingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClientRatingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClientRatingResponseValidationError) ErrorName() string {
	return "CreateClientRatingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClientRatingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClientRatingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClientRatingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClientRatingResponseValidationError{}

// Validate checks the field values on ClientRating with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// ClientRatingMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *ClientRating) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Message

	if len(errors) > 0 {
		return ClientRatingMultiError(errors)
	}
	return nil
}

// ClientRatingMultiError is an error wrapping multiple validation errors
// returned by ClientRating.Validate(true) if the designated constraints
// aren't met.
type ClientRatingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientRatingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientRatingMultiError) AllErrors() []error { return m }

// ClientRatingValidationError is the validation error returned by
// ClientRating.Validate if the designated constraints aren't met.
type ClientRatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientRatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientRatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientRatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientRatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientRatingValidationError) ErrorName() string { return "ClientRatingValidationError" }

// Error satisfies the builtin error interface
func (e ClientRatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientRatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientRatingValidationError{}

// Validate checks the field values on GetCourierRatingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetCourierRatingRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetCourierRatingRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := GetCourierRatingRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCourierId()) < 1 {
		err := GetCourierRatingRequestValidationError{
			field:  "CourierId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCourierRatingRequestMultiError(errors)
	}
	return nil
}

// GetCourierRatingRequestMultiError is an error wrapping multiple validation
// errors returned by GetCourierRatingRequest.Validate(true) if the designated
// constraints aren't met.
type GetCourierRatingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierRatingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierRatingRequestMultiError) AllErrors() []error { return m }

// GetCourierRatingRequestValidationError is the validation error returned by
// GetCourierRatingRequest.Validate if the designated constraints aren't met.
type GetCourierRatingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRatingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRatingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRatingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRatingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRatingRequestValidationError) ErrorName() string {
	return "GetCourierRatingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRatingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRatingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRatingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRatingRequestValidationError{}

// Validate checks the field values on GetCourierRatingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetCourierRatingResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetCourierRatingResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetCourierRatingResponseValidationError{
					field:  fmt.Sprintf("Rates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetCourierRatingResponseMultiError(errors)
	}
	return nil
}

// GetCourierRatingResponseMultiError is an error wrapping multiple validation
// errors returned by GetCourierRatingResponse.Validate(true) if the
// designated constraints aren't met.
type GetCourierRatingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierRatingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierRatingResponseMultiError) AllErrors() []error { return m }

// GetCourierRatingResponseValidationError is the validation error returned by
// GetCourierRatingResponse.Validate if the designated constraints aren't met.
type GetCourierRatingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRatingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRatingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRatingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRatingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRatingResponseValidationError) ErrorName() string {
	return "GetCourierRatingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRatingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRatingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRatingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRatingResponseValidationError{}

// Validate checks the field values on CourierRated with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// CourierRatedMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *CourierRated) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for Ride

	if v, ok := interface{}(m.GetRating()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = CourierRatedValidationError{
				field:  "Rating",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return CourierRatedMultiError(errors)
	}
	return nil
}

// CourierRatedMultiError is an error wrapping multiple validation errors
// returned by CourierRated.Validate(true) if the designated constraints
// aren't met.
type CourierRatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourierRatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourierRatedMultiError) AllErrors() []error { return m }

// CourierRatedValidationError is the validation error returned by
// CourierRated.Validate if the designated constraints aren't met.
type CourierRatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourierRatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourierRatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourierRatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourierRatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourierRatedValidationError) ErrorName() string { return "CourierRatedValidationError" }

// Error satisfies the builtin error interface
func (e CourierRatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourierRated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourierRatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourierRatedValidationError{}

// Validate checks the field values on GetClientRatingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetClientRatingRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetClientRatingRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := GetClientRatingRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := GetClientRatingRequestValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetClientRatingRequestMultiError(errors)
	}
	return nil
}

// GetClientRatingRequestMultiError is an error wrapping multiple validation
// errors returned by GetClientRatingRequest.Validate(true) if the designated
// constraints aren't met.
type GetClientRatingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientRatingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientRatingRequestMultiError) AllErrors() []error { return m }

// GetClientRatingRequestValidationError is the validation error returned by
// GetClientRatingRequest.Validate if the designated constraints aren't met.
type GetClientRatingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientRatingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientRatingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientRatingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientRatingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientRatingRequestValidationError) ErrorName() string {
	return "GetClientRatingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientRatingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientRatingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientRatingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientRatingRequestValidationError{}

// Validate checks the field values on GetClientRatingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetClientRatingResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetClientRatingResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = GetClientRatingResponseValidationError{
					field:  fmt.Sprintf("Rates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return GetClientRatingResponseMultiError(errors)
	}
	return nil
}

// GetClientRatingResponseMultiError is an error wrapping multiple validation
// errors returned by GetClientRatingResponse.Validate(true) if the designated
// constraints aren't met.
type GetClientRatingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientRatingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientRatingResponseMultiError) AllErrors() []error { return m }

// GetClientRatingResponseValidationError is the validation error returned by
// GetClientRatingResponse.Validate if the designated constraints aren't met.
type GetClientRatingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientRatingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientRatingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientRatingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientRatingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientRatingResponseValidationError) ErrorName() string {
	return "GetClientRatingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientRatingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientRatingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientRatingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientRatingResponseValidationError{}

// Validate checks the field values on ClientRated with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// ClientRatedMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *ClientRated) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourierId

	// no validation rules for Ride

	if v, ok := interface{}(m.GetRating()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ClientRatedValidationError{
				field:  "Rating",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return ClientRatedMultiError(errors)
	}
	return nil
}

// ClientRatedMultiError is an error wrapping multiple validation errors
// returned by ClientRated.Validate(true) if the designated constraints aren't met.
type ClientRatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientRatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientRatedMultiError) AllErrors() []error { return m }

// ClientRatedValidationError is the validation error returned by
// ClientRated.Validate if the designated constraints aren't met.
type ClientRatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientRatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientRatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientRatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientRatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientRatedValidationError) ErrorName() string { return "ClientRatedValidationError" }

// Error satisfies the builtin error interface
func (e ClientRatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientRated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientRatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientRatedValidationError{}

// Validate checks the field values on GetCourierRatingStatRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetCourierRatingStatRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetCourierRatingStatRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCourierId()) < 1 {
		err := GetCourierRatingStatRequestValidationError{
			field:  "CourierId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCourierRatingStatRequestMultiError(errors)
	}
	return nil
}

// GetCourierRatingStatRequestMultiError is an error wrapping multiple
// validation errors returned by GetCourierRatingStatRequest.Validate(true) if
// the designated constraints aren't met.
type GetCourierRatingStatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierRatingStatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierRatingStatRequestMultiError) AllErrors() []error { return m }

// GetCourierRatingStatRequestValidationError is the validation error returned
// by GetCourierRatingStatRequest.Validate if the designated constraints
// aren't met.
type GetCourierRatingStatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRatingStatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRatingStatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRatingStatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRatingStatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRatingStatRequestValidationError) ErrorName() string {
	return "GetCourierRatingStatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRatingStatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRatingStatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRatingStatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRatingStatRequestValidationError{}

// Validate checks the field values on GetCourierRatingStatResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetCourierRatingStatResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetCourierRatingStatResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetScore()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetCourierRatingStatResponseValidationError{
				field:  "Score",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetCourierRatingStatResponseMultiError(errors)
	}
	return nil
}

// GetCourierRatingStatResponseMultiError is an error wrapping multiple
// validation errors returned by GetCourierRatingStatResponse.Validate(true)
// if the designated constraints aren't met.
type GetCourierRatingStatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierRatingStatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierRatingStatResponseMultiError) AllErrors() []error { return m }

// GetCourierRatingStatResponseValidationError is the validation error returned
// by GetCourierRatingStatResponse.Validate if the designated constraints
// aren't met.
type GetCourierRatingStatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRatingStatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRatingStatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRatingStatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRatingStatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRatingStatResponseValidationError) ErrorName() string {
	return "GetCourierRatingStatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRatingStatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRatingStatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRatingStatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRatingStatResponseValidationError{}

// Validate checks the field values on GetClientRatingStatRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetClientRatingStatRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetClientRatingStatRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := GetClientRatingStatRequestValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetClientRatingStatRequestMultiError(errors)
	}
	return nil
}

// GetClientRatingStatRequestMultiError is an error wrapping multiple
// validation errors returned by GetClientRatingStatRequest.Validate(true) if
// the designated constraints aren't met.
type GetClientRatingStatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientRatingStatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientRatingStatRequestMultiError) AllErrors() []error { return m }

// GetClientRatingStatRequestValidationError is the validation error returned
// by GetClientRatingStatRequest.Validate if the designated constraints aren't met.
type GetClientRatingStatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientRatingStatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientRatingStatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientRatingStatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientRatingStatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientRatingStatRequestValidationError) ErrorName() string {
	return "GetClientRatingStatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientRatingStatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientRatingStatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientRatingStatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientRatingStatRequestValidationError{}

// Validate checks the field values on GetClientRatingStatResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetClientRatingStatResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *GetClientRatingStatResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetScore()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetClientRatingStatResponseValidationError{
				field:  "Score",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetClientRatingStatResponseMultiError(errors)
	}
	return nil
}

// GetClientRatingStatResponseMultiError is an error wrapping multiple
// validation errors returned by GetClientRatingStatResponse.Validate(true) if
// the designated constraints aren't met.
type GetClientRatingStatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientRatingStatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientRatingStatResponseMultiError) AllErrors() []error { return m }

// GetClientRatingStatResponseValidationError is the validation error returned
// by GetClientRatingStatResponse.Validate if the designated constraints
// aren't met.
type GetClientRatingStatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientRatingStatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientRatingStatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientRatingStatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientRatingStatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientRatingStatResponseValidationError) ErrorName() string {
	return "GetClientRatingStatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientRatingStatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientRatingStatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientRatingStatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientRatingStatResponseValidationError{}

// Validate checks the field values on GetCourierRatingStatByTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in GetCourierRatingStatByTokenRequestMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *GetCourierRatingStatByTokenRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := GetCourierRatingStatByTokenRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCourierRatingStatByTokenRequestMultiError(errors)
	}
	return nil
}

// GetCourierRatingStatByTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetCourierRatingStatByTokenRequest.Validate(true) if the designated
// constraints aren't met.
type GetCourierRatingStatByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierRatingStatByTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierRatingStatByTokenRequestMultiError) AllErrors() []error { return m }

// GetCourierRatingStatByTokenRequestValidationError is the validation error
// returned by GetCourierRatingStatByTokenRequest.Validate if the designated
// constraints aren't met.
type GetCourierRatingStatByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRatingStatByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRatingStatByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRatingStatByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRatingStatByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRatingStatByTokenRequestValidationError) ErrorName() string {
	return "GetCourierRatingStatByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRatingStatByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRatingStatByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRatingStatByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRatingStatByTokenRequestValidationError{}

// Validate checks the field values on GetCourierRatingStatByTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in GetCourierRatingStatByTokenResponseMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *GetCourierRatingStatByTokenResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourierId

	if v, ok := interface{}(m.GetScore()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetCourierRatingStatByTokenResponseValidationError{
				field:  "Score",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetCourierRatingStatByTokenResponseMultiError(errors)
	}
	return nil
}

// GetCourierRatingStatByTokenResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetCourierRatingStatByTokenResponse.Validate(true) if the designated
// constraints aren't met.
type GetCourierRatingStatByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourierRatingStatByTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourierRatingStatByTokenResponseMultiError) AllErrors() []error { return m }

// GetCourierRatingStatByTokenResponseValidationError is the validation error
// returned by GetCourierRatingStatByTokenResponse.Validate if the designated
// constraints aren't met.
type GetCourierRatingStatByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourierRatingStatByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourierRatingStatByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourierRatingStatByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourierRatingStatByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourierRatingStatByTokenResponseValidationError) ErrorName() string {
	return "GetCourierRatingStatByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourierRatingStatByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourierRatingStatByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourierRatingStatByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourierRatingStatByTokenResponseValidationError{}

// Validate checks the field values on GetClientRatingStatByTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in GetClientRatingStatByTokenRequestMultiError, or
// nil if none found. Otherwise, only the first error is returned, if any.
func (m *GetClientRatingStatByTokenRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := GetClientRatingStatByTokenRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetClientRatingStatByTokenRequestMultiError(errors)
	}
	return nil
}

// GetClientRatingStatByTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetClientRatingStatByTokenRequest.Validate(true) if the designated
// constraints aren't met.
type GetClientRatingStatByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientRatingStatByTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientRatingStatByTokenRequestMultiError) AllErrors() []error { return m }

// GetClientRatingStatByTokenRequestValidationError is the validation error
// returned by GetClientRatingStatByTokenRequest.Validate if the designated
// constraints aren't met.
type GetClientRatingStatByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientRatingStatByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientRatingStatByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientRatingStatByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientRatingStatByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientRatingStatByTokenRequestValidationError) ErrorName() string {
	return "GetClientRatingStatByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientRatingStatByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientRatingStatByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientRatingStatByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientRatingStatByTokenRequestValidationError{}

// Validate checks the field values on GetClientRatingStatByTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned. When asked to return all errors,
// validation continues after first violation, and the result is a list of
// violation errors wrapped in GetClientRatingStatByTokenResponseMultiError,
// or nil if none found. Otherwise, only the first error is returned, if any.
func (m *GetClientRatingStatByTokenResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	if v, ok := interface{}(m.GetScore()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetClientRatingStatByTokenResponseValidationError{
				field:  "Score",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetClientRatingStatByTokenResponseMultiError(errors)
	}
	return nil
}

// GetClientRatingStatByTokenResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetClientRatingStatByTokenResponse.Validate(true) if the designated
// constraints aren't met.
type GetClientRatingStatByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientRatingStatByTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientRatingStatByTokenResponseMultiError) AllErrors() []error { return m }

// GetClientRatingStatByTokenResponseValidationError is the validation error
// returned by GetClientRatingStatByTokenResponse.Validate if the designated
// constraints aren't met.
type GetClientRatingStatByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientRatingStatByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientRatingStatByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientRatingStatByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientRatingStatByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientRatingStatByTokenResponseValidationError) ErrorName() string {
	return "GetClientRatingStatByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientRatingStatByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientRatingStatByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientRatingStatByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientRatingStatByTokenResponseValidationError{}

// Validate checks the field values on RateScore with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// RateScoreMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *RateScore) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumberOfRates

	// no validation rules for ScoreAvg

	if len(errors) > 0 {
		return RateScoreMultiError(errors)
	}
	return nil
}

// RateScoreMultiError is an error wrapping multiple validation errors returned
// by RateScore.Validate(true) if the designated constraints aren't met.
type RateScoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RateScoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RateScoreMultiError) AllErrors() []error { return m }

// RateScoreValidationError is the validation error returned by
// RateScore.Validate if the designated constraints aren't met.
type RateScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateScoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateScoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateScoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateScoreValidationError) ErrorName() string { return "RateScoreValidationError" }

// Error satisfies the builtin error interface
func (e RateScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateScoreValidationError{}
