// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourierRegisterServiceClient is the client API for CourierRegisterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourierRegisterServiceClient interface {
	// registration request for a new courier user to send otp to the phone
	CourierOtpRegister(ctx context.Context, in *CourierOtpRegisterRequest, opts ...grpc.CallOption) (*CourierOtpRegisterResponse, error)
	// login request for an existing courier user to send otp to the phone
	CourierOtpLogin(ctx context.Context, in *CourierOtpLoginRequest, opts ...grpc.CallOption) (*CourierOtpLoginResponse, error)
	// login for courier user with otp, or with otp and password
	CourierOtpAuthenticate(ctx context.Context, in *CourierOtpAuthenticateRequest, opts ...grpc.CallOption) (*CourierOtpAuthenticateResponse, error)
	// resend otp to the phone of courier user
	CourierOtpRetry(ctx context.Context, in *CourierOtpRetryRequest, opts ...grpc.CallOption) (*CourierOtpRetryResponse, error)
	// add google or facebook account to a courier account
	CourierOauthRegister(ctx context.Context, in *CourierOauthRegisterRequest, opts ...grpc.CallOption) (*CourierOauthRegisterResponse, error)
	// verify code from facebook or google to register
	CourierOauthRegisterVerify(ctx context.Context, in *CourierOauthRegisterVerifyRequest, opts ...grpc.CallOption) (*CourierOauthRegisterVerifyResponse, error)
	// Login with google or facebook
	CourierOauthLogin(ctx context.Context, in *CourierOauthLoginRequest, opts ...grpc.CallOption) (*CourierOauthLoginResponse, error)
	// verify code from facebook or google to login
	CourierOauthLoginVerify(ctx context.Context, in *CourierOauthLoginVerifyRequest, opts ...grpc.CallOption) (*CourierOauthLoginVerifyResponse, error)
	// request to add / change phone-number
	CourierOtpReclaim(ctx context.Context, in *CourierOtpReclaimRequest, opts ...grpc.CallOption) (*CourierOtpReclaimResponse, error)
}

type courierRegisterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierRegisterServiceClient(cc grpc.ClientConnInterface) CourierRegisterServiceClient {
	return &courierRegisterServiceClient{cc}
}

func (c *courierRegisterServiceClient) CourierOtpRegister(ctx context.Context, in *CourierOtpRegisterRequest, opts ...grpc.CallOption) (*CourierOtpRegisterResponse, error) {
	out := new(CourierOtpRegisterResponse)
	err := c.cc.Invoke(ctx, "/uaa.CourierRegisterService/CourierOtpRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierRegisterServiceClient) CourierOtpLogin(ctx context.Context, in *CourierOtpLoginRequest, opts ...grpc.CallOption) (*CourierOtpLoginResponse, error) {
	out := new(CourierOtpLoginResponse)
	err := c.cc.Invoke(ctx, "/uaa.CourierRegisterService/CourierOtpLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierRegisterServiceClient) CourierOtpAuthenticate(ctx context.Context, in *CourierOtpAuthenticateRequest, opts ...grpc.CallOption) (*CourierOtpAuthenticateResponse, error) {
	out := new(CourierOtpAuthenticateResponse)
	err := c.cc.Invoke(ctx, "/uaa.CourierRegisterService/CourierOtpAuthenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierRegisterServiceClient) CourierOtpRetry(ctx context.Context, in *CourierOtpRetryRequest, opts ...grpc.CallOption) (*CourierOtpRetryResponse, error) {
	out := new(CourierOtpRetryResponse)
	err := c.cc.Invoke(ctx, "/uaa.CourierRegisterService/CourierOtpRetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierRegisterServiceClient) CourierOauthRegister(ctx context.Context, in *CourierOauthRegisterRequest, opts ...grpc.CallOption) (*CourierOauthRegisterResponse, error) {
	out := new(CourierOauthRegisterResponse)
	err := c.cc.Invoke(ctx, "/uaa.CourierRegisterService/CourierOauthRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierRegisterServiceClient) CourierOauthRegisterVerify(ctx context.Context, in *CourierOauthRegisterVerifyRequest, opts ...grpc.CallOption) (*CourierOauthRegisterVerifyResponse, error) {
	out := new(CourierOauthRegisterVerifyResponse)
	err := c.cc.Invoke(ctx, "/uaa.CourierRegisterService/CourierOauthRegisterVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierRegisterServiceClient) CourierOauthLogin(ctx context.Context, in *CourierOauthLoginRequest, opts ...grpc.CallOption) (*CourierOauthLoginResponse, error) {
	out := new(CourierOauthLoginResponse)
	err := c.cc.Invoke(ctx, "/uaa.CourierRegisterService/CourierOauthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierRegisterServiceClient) CourierOauthLoginVerify(ctx context.Context, in *CourierOauthLoginVerifyRequest, opts ...grpc.CallOption) (*CourierOauthLoginVerifyResponse, error) {
	out := new(CourierOauthLoginVerifyResponse)
	err := c.cc.Invoke(ctx, "/uaa.CourierRegisterService/CourierOauthLoginVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierRegisterServiceClient) CourierOtpReclaim(ctx context.Context, in *CourierOtpReclaimRequest, opts ...grpc.CallOption) (*CourierOtpReclaimResponse, error) {
	out := new(CourierOtpReclaimResponse)
	err := c.cc.Invoke(ctx, "/uaa.CourierRegisterService/CourierOtpReclaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourierRegisterServiceServer is the server API for CourierRegisterService service.
// All implementations must embed UnimplementedCourierRegisterServiceServer
// for forward compatibility
type CourierRegisterServiceServer interface {
	// registration request for a new courier user to send otp to the phone
	CourierOtpRegister(context.Context, *CourierOtpRegisterRequest) (*CourierOtpRegisterResponse, error)
	// login request for an existing courier user to send otp to the phone
	CourierOtpLogin(context.Context, *CourierOtpLoginRequest) (*CourierOtpLoginResponse, error)
	// login for courier user with otp, or with otp and password
	CourierOtpAuthenticate(context.Context, *CourierOtpAuthenticateRequest) (*CourierOtpAuthenticateResponse, error)
	// resend otp to the phone of courier user
	CourierOtpRetry(context.Context, *CourierOtpRetryRequest) (*CourierOtpRetryResponse, error)
	// add google or facebook account to a courier account
	CourierOauthRegister(context.Context, *CourierOauthRegisterRequest) (*CourierOauthRegisterResponse, error)
	// verify code from facebook or google to register
	CourierOauthRegisterVerify(context.Context, *CourierOauthRegisterVerifyRequest) (*CourierOauthRegisterVerifyResponse, error)
	// Login with google or facebook
	CourierOauthLogin(context.Context, *CourierOauthLoginRequest) (*CourierOauthLoginResponse, error)
	// verify code from facebook or google to login
	CourierOauthLoginVerify(context.Context, *CourierOauthLoginVerifyRequest) (*CourierOauthLoginVerifyResponse, error)
	// request to add / change phone-number
	CourierOtpReclaim(context.Context, *CourierOtpReclaimRequest) (*CourierOtpReclaimResponse, error)
	mustEmbedUnimplementedCourierRegisterServiceServer()
}

// UnimplementedCourierRegisterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourierRegisterServiceServer struct {
}

func (UnimplementedCourierRegisterServiceServer) CourierOtpRegister(context.Context, *CourierOtpRegisterRequest) (*CourierOtpRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourierOtpRegister not implemented")
}
func (UnimplementedCourierRegisterServiceServer) CourierOtpLogin(context.Context, *CourierOtpLoginRequest) (*CourierOtpLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourierOtpLogin not implemented")
}
func (UnimplementedCourierRegisterServiceServer) CourierOtpAuthenticate(context.Context, *CourierOtpAuthenticateRequest) (*CourierOtpAuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourierOtpAuthenticate not implemented")
}
func (UnimplementedCourierRegisterServiceServer) CourierOtpRetry(context.Context, *CourierOtpRetryRequest) (*CourierOtpRetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourierOtpRetry not implemented")
}
func (UnimplementedCourierRegisterServiceServer) CourierOauthRegister(context.Context, *CourierOauthRegisterRequest) (*CourierOauthRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourierOauthRegister not implemented")
}
func (UnimplementedCourierRegisterServiceServer) CourierOauthRegisterVerify(context.Context, *CourierOauthRegisterVerifyRequest) (*CourierOauthRegisterVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourierOauthRegisterVerify not implemented")
}
func (UnimplementedCourierRegisterServiceServer) CourierOauthLogin(context.Context, *CourierOauthLoginRequest) (*CourierOauthLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourierOauthLogin not implemented")
}
func (UnimplementedCourierRegisterServiceServer) CourierOauthLoginVerify(context.Context, *CourierOauthLoginVerifyRequest) (*CourierOauthLoginVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourierOauthLoginVerify not implemented")
}
func (UnimplementedCourierRegisterServiceServer) CourierOtpReclaim(context.Context, *CourierOtpReclaimRequest) (*CourierOtpReclaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourierOtpReclaim not implemented")
}
func (UnimplementedCourierRegisterServiceServer) mustEmbedUnimplementedCourierRegisterServiceServer() {
}

// UnsafeCourierRegisterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierRegisterServiceServer will
// result in compilation errors.
type UnsafeCourierRegisterServiceServer interface {
	mustEmbedUnimplementedCourierRegisterServiceServer()
}

func RegisterCourierRegisterServiceServer(s grpc.ServiceRegistrar, srv CourierRegisterServiceServer) {
	s.RegisterService(&CourierRegisterService_ServiceDesc, srv)
}

func _CourierRegisterService_CourierOtpRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOtpRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierRegisterServiceServer).CourierOtpRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.CourierRegisterService/CourierOtpRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierRegisterServiceServer).CourierOtpRegister(ctx, req.(*CourierOtpRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierRegisterService_CourierOtpLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOtpLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierRegisterServiceServer).CourierOtpLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.CourierRegisterService/CourierOtpLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierRegisterServiceServer).CourierOtpLogin(ctx, req.(*CourierOtpLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierRegisterService_CourierOtpAuthenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOtpAuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierRegisterServiceServer).CourierOtpAuthenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.CourierRegisterService/CourierOtpAuthenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierRegisterServiceServer).CourierOtpAuthenticate(ctx, req.(*CourierOtpAuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierRegisterService_CourierOtpRetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOtpRetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierRegisterServiceServer).CourierOtpRetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.CourierRegisterService/CourierOtpRetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierRegisterServiceServer).CourierOtpRetry(ctx, req.(*CourierOtpRetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierRegisterService_CourierOauthRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOauthRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierRegisterServiceServer).CourierOauthRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.CourierRegisterService/CourierOauthRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierRegisterServiceServer).CourierOauthRegister(ctx, req.(*CourierOauthRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierRegisterService_CourierOauthRegisterVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOauthRegisterVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierRegisterServiceServer).CourierOauthRegisterVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.CourierRegisterService/CourierOauthRegisterVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierRegisterServiceServer).CourierOauthRegisterVerify(ctx, req.(*CourierOauthRegisterVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierRegisterService_CourierOauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOauthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierRegisterServiceServer).CourierOauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.CourierRegisterService/CourierOauthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierRegisterServiceServer).CourierOauthLogin(ctx, req.(*CourierOauthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierRegisterService_CourierOauthLoginVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOauthLoginVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierRegisterServiceServer).CourierOauthLoginVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.CourierRegisterService/CourierOauthLoginVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierRegisterServiceServer).CourierOauthLoginVerify(ctx, req.(*CourierOauthLoginVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierRegisterService_CourierOtpReclaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOtpReclaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierRegisterServiceServer).CourierOtpReclaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.CourierRegisterService/CourierOtpReclaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierRegisterServiceServer).CourierOtpReclaim(ctx, req.(*CourierOtpReclaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourierRegisterService_ServiceDesc is the grpc.ServiceDesc for CourierRegisterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourierRegisterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uaa.CourierRegisterService",
	HandlerType: (*CourierRegisterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CourierOtpRegister",
			Handler:    _CourierRegisterService_CourierOtpRegister_Handler,
		},
		{
			MethodName: "CourierOtpLogin",
			Handler:    _CourierRegisterService_CourierOtpLogin_Handler,
		},
		{
			MethodName: "CourierOtpAuthenticate",
			Handler:    _CourierRegisterService_CourierOtpAuthenticate_Handler,
		},
		{
			MethodName: "CourierOtpRetry",
			Handler:    _CourierRegisterService_CourierOtpRetry_Handler,
		},
		{
			MethodName: "CourierOauthRegister",
			Handler:    _CourierRegisterService_CourierOauthRegister_Handler,
		},
		{
			MethodName: "CourierOauthRegisterVerify",
			Handler:    _CourierRegisterService_CourierOauthRegisterVerify_Handler,
		},
		{
			MethodName: "CourierOauthLogin",
			Handler:    _CourierRegisterService_CourierOauthLogin_Handler,
		},
		{
			MethodName: "CourierOauthLoginVerify",
			Handler:    _CourierRegisterService_CourierOauthLoginVerify_Handler,
		},
		{
			MethodName: "CourierOtpReclaim",
			Handler:    _CourierRegisterService_CourierOtpReclaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uaa.proto",
}

// UserRegisterServiceClient is the client API for UserRegisterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRegisterServiceClient interface {
	// registration request for a new passenger user to send otp to the phone
	UserOtpRegister(ctx context.Context, in *UserOtpRegisterRequest, opts ...grpc.CallOption) (*UserOtpRegisterResponse, error)
	// login request for an existing passenger user to send otp to the phone
	UserOtpLogin(ctx context.Context, in *UserOtpLoginRequest, opts ...grpc.CallOption) (*UserOtpLoginResponse, error)
	// login for passenger user with otp, or with otp and password
	UserOtpAuthenticate(ctx context.Context, in *UserOtpAuthenticateRequest, opts ...grpc.CallOption) (*UserOtpAuthenticateResponse, error)
	// resend otp to the phone of passenger user
	UserOtpRetry(ctx context.Context, in *UserOtpRetryRequest, opts ...grpc.CallOption) (*UserOtpRetryResponse, error)
	// add google or facebook account to a passenger account
	UserOauthRegister(ctx context.Context, in *UserOauthRegisterRequest, opts ...grpc.CallOption) (*UserOauthRegisterResponse, error)
	// verify code from facebook or google to register
	UserOauthRegisterVerify(ctx context.Context, in *UserOauthRegisterVerifyRequest, opts ...grpc.CallOption) (*UserOauthRegisterVerifyResponse, error)
	// Login with google or facebook
	UserOauthLogin(ctx context.Context, in *UserOauthLoginRequest, opts ...grpc.CallOption) (*UserOauthLoginResponse, error)
	// verify code from facebook or google to login
	UserOauthLoginVerify(ctx context.Context, in *UserOauthLoginVerifyRequest, opts ...grpc.CallOption) (*UserOauthLoginVerifyResponse, error)
	// request to add / change phone-number
	UserOtpReclaim(ctx context.Context, in *UserOtpReclaimRequest, opts ...grpc.CallOption) (*UserOtpReclaimResponse, error)
}

type userRegisterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRegisterServiceClient(cc grpc.ClientConnInterface) UserRegisterServiceClient {
	return &userRegisterServiceClient{cc}
}

func (c *userRegisterServiceClient) UserOtpRegister(ctx context.Context, in *UserOtpRegisterRequest, opts ...grpc.CallOption) (*UserOtpRegisterResponse, error) {
	out := new(UserOtpRegisterResponse)
	err := c.cc.Invoke(ctx, "/uaa.UserRegisterService/UserOtpRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterServiceClient) UserOtpLogin(ctx context.Context, in *UserOtpLoginRequest, opts ...grpc.CallOption) (*UserOtpLoginResponse, error) {
	out := new(UserOtpLoginResponse)
	err := c.cc.Invoke(ctx, "/uaa.UserRegisterService/UserOtpLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterServiceClient) UserOtpAuthenticate(ctx context.Context, in *UserOtpAuthenticateRequest, opts ...grpc.CallOption) (*UserOtpAuthenticateResponse, error) {
	out := new(UserOtpAuthenticateResponse)
	err := c.cc.Invoke(ctx, "/uaa.UserRegisterService/UserOtpAuthenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterServiceClient) UserOtpRetry(ctx context.Context, in *UserOtpRetryRequest, opts ...grpc.CallOption) (*UserOtpRetryResponse, error) {
	out := new(UserOtpRetryResponse)
	err := c.cc.Invoke(ctx, "/uaa.UserRegisterService/UserOtpRetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterServiceClient) UserOauthRegister(ctx context.Context, in *UserOauthRegisterRequest, opts ...grpc.CallOption) (*UserOauthRegisterResponse, error) {
	out := new(UserOauthRegisterResponse)
	err := c.cc.Invoke(ctx, "/uaa.UserRegisterService/UserOauthRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterServiceClient) UserOauthRegisterVerify(ctx context.Context, in *UserOauthRegisterVerifyRequest, opts ...grpc.CallOption) (*UserOauthRegisterVerifyResponse, error) {
	out := new(UserOauthRegisterVerifyResponse)
	err := c.cc.Invoke(ctx, "/uaa.UserRegisterService/UserOauthRegisterVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterServiceClient) UserOauthLogin(ctx context.Context, in *UserOauthLoginRequest, opts ...grpc.CallOption) (*UserOauthLoginResponse, error) {
	out := new(UserOauthLoginResponse)
	err := c.cc.Invoke(ctx, "/uaa.UserRegisterService/UserOauthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterServiceClient) UserOauthLoginVerify(ctx context.Context, in *UserOauthLoginVerifyRequest, opts ...grpc.CallOption) (*UserOauthLoginVerifyResponse, error) {
	out := new(UserOauthLoginVerifyResponse)
	err := c.cc.Invoke(ctx, "/uaa.UserRegisterService/UserOauthLoginVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterServiceClient) UserOtpReclaim(ctx context.Context, in *UserOtpReclaimRequest, opts ...grpc.CallOption) (*UserOtpReclaimResponse, error) {
	out := new(UserOtpReclaimResponse)
	err := c.cc.Invoke(ctx, "/uaa.UserRegisterService/UserOtpReclaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRegisterServiceServer is the server API for UserRegisterService service.
// All implementations must embed UnimplementedUserRegisterServiceServer
// for forward compatibility
type UserRegisterServiceServer interface {
	// registration request for a new passenger user to send otp to the phone
	UserOtpRegister(context.Context, *UserOtpRegisterRequest) (*UserOtpRegisterResponse, error)
	// login request for an existing passenger user to send otp to the phone
	UserOtpLogin(context.Context, *UserOtpLoginRequest) (*UserOtpLoginResponse, error)
	// login for passenger user with otp, or with otp and password
	UserOtpAuthenticate(context.Context, *UserOtpAuthenticateRequest) (*UserOtpAuthenticateResponse, error)
	// resend otp to the phone of passenger user
	UserOtpRetry(context.Context, *UserOtpRetryRequest) (*UserOtpRetryResponse, error)
	// add google or facebook account to a passenger account
	UserOauthRegister(context.Context, *UserOauthRegisterRequest) (*UserOauthRegisterResponse, error)
	// verify code from facebook or google to register
	UserOauthRegisterVerify(context.Context, *UserOauthRegisterVerifyRequest) (*UserOauthRegisterVerifyResponse, error)
	// Login with google or facebook
	UserOauthLogin(context.Context, *UserOauthLoginRequest) (*UserOauthLoginResponse, error)
	// verify code from facebook or google to login
	UserOauthLoginVerify(context.Context, *UserOauthLoginVerifyRequest) (*UserOauthLoginVerifyResponse, error)
	// request to add / change phone-number
	UserOtpReclaim(context.Context, *UserOtpReclaimRequest) (*UserOtpReclaimResponse, error)
	mustEmbedUnimplementedUserRegisterServiceServer()
}

// UnimplementedUserRegisterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRegisterServiceServer struct {
}

func (UnimplementedUserRegisterServiceServer) UserOtpRegister(context.Context, *UserOtpRegisterRequest) (*UserOtpRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOtpRegister not implemented")
}
func (UnimplementedUserRegisterServiceServer) UserOtpLogin(context.Context, *UserOtpLoginRequest) (*UserOtpLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOtpLogin not implemented")
}
func (UnimplementedUserRegisterServiceServer) UserOtpAuthenticate(context.Context, *UserOtpAuthenticateRequest) (*UserOtpAuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOtpAuthenticate not implemented")
}
func (UnimplementedUserRegisterServiceServer) UserOtpRetry(context.Context, *UserOtpRetryRequest) (*UserOtpRetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOtpRetry not implemented")
}
func (UnimplementedUserRegisterServiceServer) UserOauthRegister(context.Context, *UserOauthRegisterRequest) (*UserOauthRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOauthRegister not implemented")
}
func (UnimplementedUserRegisterServiceServer) UserOauthRegisterVerify(context.Context, *UserOauthRegisterVerifyRequest) (*UserOauthRegisterVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOauthRegisterVerify not implemented")
}
func (UnimplementedUserRegisterServiceServer) UserOauthLogin(context.Context, *UserOauthLoginRequest) (*UserOauthLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOauthLogin not implemented")
}
func (UnimplementedUserRegisterServiceServer) UserOauthLoginVerify(context.Context, *UserOauthLoginVerifyRequest) (*UserOauthLoginVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOauthLoginVerify not implemented")
}
func (UnimplementedUserRegisterServiceServer) UserOtpReclaim(context.Context, *UserOtpReclaimRequest) (*UserOtpReclaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOtpReclaim not implemented")
}
func (UnimplementedUserRegisterServiceServer) mustEmbedUnimplementedUserRegisterServiceServer() {}

// UnsafeUserRegisterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRegisterServiceServer will
// result in compilation errors.
type UnsafeUserRegisterServiceServer interface {
	mustEmbedUnimplementedUserRegisterServiceServer()
}

func RegisterUserRegisterServiceServer(s grpc.ServiceRegistrar, srv UserRegisterServiceServer) {
	s.RegisterService(&UserRegisterService_ServiceDesc, srv)
}

func _UserRegisterService_UserOtpRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOtpRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterServiceServer).UserOtpRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.UserRegisterService/UserOtpRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterServiceServer).UserOtpRegister(ctx, req.(*UserOtpRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegisterService_UserOtpLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOtpLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterServiceServer).UserOtpLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.UserRegisterService/UserOtpLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterServiceServer).UserOtpLogin(ctx, req.(*UserOtpLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegisterService_UserOtpAuthenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOtpAuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterServiceServer).UserOtpAuthenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.UserRegisterService/UserOtpAuthenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterServiceServer).UserOtpAuthenticate(ctx, req.(*UserOtpAuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegisterService_UserOtpRetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOtpRetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterServiceServer).UserOtpRetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.UserRegisterService/UserOtpRetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterServiceServer).UserOtpRetry(ctx, req.(*UserOtpRetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegisterService_UserOauthRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOauthRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterServiceServer).UserOauthRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.UserRegisterService/UserOauthRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterServiceServer).UserOauthRegister(ctx, req.(*UserOauthRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegisterService_UserOauthRegisterVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOauthRegisterVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterServiceServer).UserOauthRegisterVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.UserRegisterService/UserOauthRegisterVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterServiceServer).UserOauthRegisterVerify(ctx, req.(*UserOauthRegisterVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegisterService_UserOauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOauthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterServiceServer).UserOauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.UserRegisterService/UserOauthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterServiceServer).UserOauthLogin(ctx, req.(*UserOauthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegisterService_UserOauthLoginVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOauthLoginVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterServiceServer).UserOauthLoginVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.UserRegisterService/UserOauthLoginVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterServiceServer).UserOauthLoginVerify(ctx, req.(*UserOauthLoginVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegisterService_UserOtpReclaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOtpReclaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterServiceServer).UserOtpReclaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.UserRegisterService/UserOtpReclaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterServiceServer).UserOtpReclaim(ctx, req.(*UserOtpReclaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRegisterService_ServiceDesc is the grpc.ServiceDesc for UserRegisterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRegisterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uaa.UserRegisterService",
	HandlerType: (*UserRegisterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserOtpRegister",
			Handler:    _UserRegisterService_UserOtpRegister_Handler,
		},
		{
			MethodName: "UserOtpLogin",
			Handler:    _UserRegisterService_UserOtpLogin_Handler,
		},
		{
			MethodName: "UserOtpAuthenticate",
			Handler:    _UserRegisterService_UserOtpAuthenticate_Handler,
		},
		{
			MethodName: "UserOtpRetry",
			Handler:    _UserRegisterService_UserOtpRetry_Handler,
		},
		{
			MethodName: "UserOauthRegister",
			Handler:    _UserRegisterService_UserOauthRegister_Handler,
		},
		{
			MethodName: "UserOauthRegisterVerify",
			Handler:    _UserRegisterService_UserOauthRegisterVerify_Handler,
		},
		{
			MethodName: "UserOauthLogin",
			Handler:    _UserRegisterService_UserOauthLogin_Handler,
		},
		{
			MethodName: "UserOauthLoginVerify",
			Handler:    _UserRegisterService_UserOauthLoginVerify_Handler,
		},
		{
			MethodName: "UserOtpReclaim",
			Handler:    _UserRegisterService_UserOtpReclaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uaa.proto",
}

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServiceClient interface {
	// refresh token by refresh token value given in the last stored token
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// get jwks information needed for other services to authorize tokens
	GetJwks(ctx context.Context, in *GetJwksRequest, opts ...grpc.CallOption) (*GetJwksResponse, error)
}

type tokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServiceClient(cc grpc.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/uaa.TokenService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GetJwks(ctx context.Context, in *GetJwksRequest, opts ...grpc.CallOption) (*GetJwksResponse, error) {
	out := new(GetJwksResponse)
	err := c.cc.Invoke(ctx, "/uaa.TokenService/GetJwks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
// All implementations must embed UnimplementedTokenServiceServer
// for forward compatibility
type TokenServiceServer interface {
	// refresh token by refresh token value given in the last stored token
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// get jwks information needed for other services to authorize tokens
	GetJwks(context.Context, *GetJwksRequest) (*GetJwksResponse, error)
	mustEmbedUnimplementedTokenServiceServer()
}

// UnimplementedTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (UnimplementedTokenServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) GetJwks(context.Context, *GetJwksRequest) (*GetJwksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwks not implemented")
}
func (UnimplementedTokenServiceServer) mustEmbedUnimplementedTokenServiceServer() {}

// UnsafeTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServiceServer will
// result in compilation errors.
type UnsafeTokenServiceServer interface {
	mustEmbedUnimplementedTokenServiceServer()
}

func RegisterTokenServiceServer(s grpc.ServiceRegistrar, srv TokenServiceServer) {
	s.RegisterService(&TokenService_ServiceDesc, srv)
}

func _TokenService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.TokenService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GetJwks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJwksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GetJwks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.TokenService/GetJwks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GetJwks(ctx, req.(*GetJwksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenService_ServiceDesc is the grpc.ServiceDesc for TokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uaa.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshToken",
			Handler:    _TokenService_RefreshToken_Handler,
		},
		{
			MethodName: "GetJwks",
			Handler:    _TokenService_GetJwks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uaa.proto",
}

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error) {
	out := new(AdminLoginResponse)
	err := c.cc.Invoke(ctx, "/uaa.AdminService/AdminLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uaa.AdminService/AdminLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminLogin(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uaa.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminLogin",
			Handler:    _AdminService_AdminLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uaa.proto",
}
